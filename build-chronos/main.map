{"version":3,"sources":["webpack:///webpack/bootstrap 78a2287d497800bbdeb0","webpack:///./chronos/models/db.js","webpack:///./chronos/queues/constants.js","webpack:///external \"debug\"","webpack:///./chronos/index.js","webpack:///./chronos/queues/send-weekly-digest-email.js","webpack:///./node_modules/babel-runtime/regenerator/index.js","webpack:///external \"regenerator-runtime\"","webpack:///external \"lodash.intersection\"","webpack:///./chronos/models/thread.js","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///./cacert","webpack:///external \"rethinkdbdash\"","webpack:///./chronos/models/usersSettings.js","webpack:///./chronos/models/usersChannels.js","webpack:///./chronos/models/message.js","webpack:///./chronos/models/community.js","webpack:///./shared/bull/create-worker.js","webpack:///external \"http\"","webpack:///./shared/bull/create-queue.js","webpack:///external \"bull\"","webpack:///external \"raven\""],"names":["fs","require","path","IS_PROD","process","env","FORCE_DEV","DEFAULT_CONFIG","db","PRODUCTION_CONFIG","password","COMPOSE_RETHINKDB_PASSWORD","host","COMPOSE_RETHINKDB_URL","port","COMPOSE_RETHINKDB_PORT","ssl","ca","config","r","module","exports","MIN_MESSAGE_COUNT","MAX_THREAD_COUNT_PER_CHANNEL","MIN_THREADS_REQUIRED_FOR_DIGEST","SEND_WEEKLY_DIGEST_EMAIL","debug","createWorker","PORT","console","log","server","COMPOSE_REDIS_URL","COMPOSE_REDIS_PORT","listen","address","job","id","allActiveThreadsThisWeek","threadIds","length","messageCountPromises","map","communityId","channelId","content","thread","title","messageCount","Promise","all","messageCounts","filteredTopThreads","filter","activeThreadsByChannel","topThreads","obj","getCommunity","topThreadsWithCommunityDataPromises","community","name","slug","profilePhoto","threadId","threadsWithCommunityData","finalThreads","finishedTopThreads","eligbleUsersForWeeklyDigest","users","channelConnectionPromises","email","firstName","userId","user","channels","usersWithChannels","threadData","threadChannelKeys","Object","keys","getIntersectingChannels","e","rawThreadsForUsersEmail","arr","push","c","threads","eligibleUsersForWeeklyDigest","sort","a","b","processSendWeeklyDigests","eligibleUsers","sendDigestPromises","sendWeeklyDigestEmail","sendAllWeeklyDigests","catch","err","getActiveThreadsInPastWeek","table","row","during","now","sub","not","hasFields","run","getUsersForWeeklyDigest","eq","eqJoin","zip","pluck","distinct","getUsersChannelsEligibleForWeeklyDigest","getAll","index","isMember","getMessageCount","count","getCommunityById","get","http","createQueue","sumArr","input","prop","reduce","sum","item","queueMap","queues","queue","createServer","req","res","setHeader","getJobCounts","then","data","waiting","jobCounts","active","completed","failed","delayed","end","JSON","stringify","Queue","Raven","environment","NODE_ENV","install","redis","COMPOSE_REDIS_PASSWORD","undefined","options","on","message","error","captureException","Error"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 78a2287d497800bbdeb0","/**\n * Database setup is done here\n */\nconst fs = require('fs');\nconst path = require('path');\nconst IS_PROD = !process.env.FORCE_DEV && process.env.NODE_ENV === 'production';\n\nconst DEFAULT_CONFIG = {\n  db: 'spectrum',\n};\n\nconst PRODUCTION_CONFIG = {\n  password: process.env.COMPOSE_RETHINKDB_PASSWORD,\n  host: process.env.COMPOSE_RETHINKDB_URL,\n  port: process.env.COMPOSE_RETHINKDB_PORT,\n  ssl: {\n    ca: IS_PROD && require('raw-loader!../../cacert'),\n  },\n};\n\nconst config = IS_PROD\n  ? {\n      ...DEFAULT_CONFIG,\n      ...PRODUCTION_CONFIG,\n    }\n  : {\n      ...DEFAULT_CONFIG,\n    };\n\nvar r = require('rethinkdbdash')(config);\n\nmodule.exports = { db: r };\n\n\n\n// WEBPACK FOOTER //\n// ./chronos/models/db.js","// @flow\n\n// counts for processing\nexport const MIN_MESSAGE_COUNT = 4;\nexport const MAX_THREAD_COUNT_PER_CHANNEL = 10;\nexport const MIN_THREADS_REQUIRED_FOR_DIGEST = 5;\n// queues\nexport const SEND_WEEKLY_DIGEST_EMAIL = 'send weekly digest email';\n\n\n\n// WEBPACK FOOTER //\n// ./chronos/queues/constants.js","module.exports = require(\"debug\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"debug\"\n// module id = 2\n// module chunks = 0","// @flow\nconst debug = require('debug')('hermes');\nconst createWorker = require('../shared/bull/create-worker');\nimport processSendWeeklyDigestEmail from './queues/send-weekly-digest-email';\nimport { SEND_WEEKLY_DIGEST_EMAIL } from './queues/constants';\n\nconst PORT = process.env.PORT || 3004;\n\nconsole.log('\\n✉️ Chronos, the chron worker, is starting...');\ndebug('Logging with debug enabled!');\nconsole.log('');\n\nconst server = createWorker({\n  [SEND_WEEKLY_DIGEST_EMAIL]: processSendWeeklyDigestEmail,\n});\n\nconsole.log(\n  `🗄 Queues open for business ${(process.env.NODE_ENV === 'production' &&\n    `at ${process.env.COMPOSE_REDIS_URL}:${process.env.COMPOSE_REDIS_PORT}`) ||\n    'locally'}`\n);\n\nserver.listen(PORT, 'localhost', () => {\n  console.log(\n    `💉 Healthcheck server running at ${server.address()\n      .address}:${server.address().port}`\n  );\n});\n\n\n\n// WEBPACK FOOTER //\n// ./chronos/index.js","// @flow\nconst debug = require('debug')('chronos:queue:send-weekly-digest-email');\n// $FlowFixMe\nimport intersection from 'lodash.intersection';\nimport {\n  SEND_WEEKLY_DIGEST_EMAIL,\n  MIN_MESSAGE_COUNT,\n  MAX_THREAD_COUNT_PER_CHANNEL,\n  MIN_THREADS_REQUIRED_FOR_DIGEST,\n} from './constants';\nimport { getActiveThreadsInPastWeek } from '../models/thread';\nimport { getUsersForWeeklyDigest } from '../models/usersSettings';\nimport { getUsersChannelsEligibleForWeeklyDigest } from '../models/usersChannels';\nimport { getMessageCount } from '../models/message';\nimport { getCommunityById } from '../models/community';\n\nexport default job => {\n  debug(`\\nnew job: ${job.id}`);\n  debug(`\\nprocessing weekly digest`);\n\n  /*\n      1. Get all threads in the database that were active in the last week. For each thread, construct a new object containing the thread data and the message count from the server\n  */\n  const allActiveThreadsThisWeek = async () => {\n    // returns array of thread ids\n    const threadIds = await getActiveThreadsInPastWeek();\n    debug('\\n ⚙️ Fetched all active threads this week');\n\n    // if no threadIds, escape\n    if (!threadIds || threadIds.length === 0) return;\n\n    // for each thread that was active in the last week, return a new array containing a record for each thread with the thread data and the message count\n    const messageCountPromises = threadIds.map(\n      async ({ communityId, channelId, id, content, ...thread }) => ({\n        communityId,\n        channelId,\n        id,\n        title: content.title,\n        messageCount: await getMessageCount(id),\n      })\n    );\n\n    // promise all the active threads and message counts\n    const messageCounts = await Promise.all(messageCountPromises);\n    debug('\\n ⚙️ Fetched message counts for threads');\n\n    // remove any threads where the message count is less than 10\n    const filteredTopThreads = messageCounts.filter(\n      thread => thread.messageCount >= MIN_MESSAGE_COUNT\n    );\n    debug('\\n ⚙️ Filtered threads with enough messages');\n\n    // returns an array of threads that are active in the last week and have the minimum required message count to be considered valuable\n    return filteredTopThreads;\n  };\n\n  /*\n      2. Given an array of all the active threads this week that contain the minimum message count required, we now aggregate them by the channel where they were posted.\n\n      The return value from this function is an object with keys representing channelIds and values representing an array of threads\n  */\n  const activeThreadsByChannel = async () => {\n    // get all the active threads from this week\n    const topThreads = await allActiveThreadsThisWeek();\n\n    // if no topThreads, escape\n    if (!topThreads || topThreads.length === 0) return;\n\n    // create an empty object for the final output\n    let obj = {};\n\n    const getCommunity = id => getCommunityById(id);\n\n    // for each thread, get the community data that we'll need when rendering an email\n    const topThreadsWithCommunityDataPromises = topThreads.map(async thread => {\n      const community = await getCommunity(thread.communityId);\n\n      // this is the final data we'll send to the email for each thread\n      const obj = {\n        community: {\n          name: community.name,\n          slug: community.slug,\n          profilePhoto: community.profilePhoto,\n        },\n        channelId: thread.channelId,\n        title: thread.title,\n        threadId: thread.id,\n      };\n      return obj;\n    });\n\n    const threadsWithCommunityData = await Promise.all(\n      topThreadsWithCommunityDataPromises\n    );\n    // for each of the active threads this week, determine if that that thread has been categorized yet into the new object. If so, push that thread into the array, otherwise create a new key/value pair in the object for the channel + thread\n    const finalThreads = threadsWithCommunityData.map(\n      thread =>\n        obj[thread.channelId]\n          ? (obj[thread.channelId] = [...obj[thread.channelId], { ...thread }])\n          : (obj[thread.channelId] = [{ ...thread }])\n    );\n\n    const finishedTopThreads = await Promise.all(finalThreads);\n    debug('\\n ⚙️ Organized top threads by channel');\n\n    // return the final object containing keys for channelIds, and arrays of threads for values\n    return obj;\n  };\n\n  /*\n      3. In this step we process and aggregate user settings, users channels, and the thread data fetched above\n\n      a. first, get all the userIds of people who have opted to receive a weekly digest\n      b. for each person, get an array of channelIds where that user is a member\n      c. determine if there is any overlap between the user's channels and the active threads from the past week. Note: this filters out people who are members of inactive communities, even if they are opted in to receive a weekly digest\n  */\n  const eligbleUsersForWeeklyDigest = async () => {\n    // get users who have opted to receive a weekly digest\n    const users = await getUsersForWeeklyDigest();\n    debug('\\n ⚙️ Fetched users who want to receive a weekly digest');\n\n    // for each user who wants a weekly digest, fetch an array of channelIds where they are a member\n    const channelConnectionPromises = users.map(\n      async ({ email, firstName, userId, ...user }) => {\n        return {\n          email,\n          name: firstName || null,\n          userId,\n          channels: await getUsersChannelsEligibleForWeeklyDigest(userId),\n        };\n      }\n    );\n\n    // fetch all usersChannels\n    const usersWithChannels = await Promise.all(channelConnectionPromises);\n    debug('\\n ⚙️ Fetched users eligible channels');\n\n    // get all the threads, organized by channel, in scope\n    const threadData = await activeThreadsByChannel();\n\n    // if no threads exist\n    if (!threadData) return;\n\n    // get an array of all channels where there are active threads this week\n    const threadChannelKeys = Object.keys(threadData);\n\n    // for each user, determine the overlapping channels where they are a member and where active threads occurred this week\n    const getIntersectingChannels = usersWithChannels.map(e => {\n      return {\n        ...e,\n        channels: intersection(e.channels, threadChannelKeys),\n      };\n    });\n    debug(\n      '\\n ⚙️ Filtered intersecting channels between the user and the top threads this week'\n    );\n\n    // based on the intersecting channels, get the threads that could appear in the user's weekly digest\n    const rawThreadsForUsersEmail = getIntersectingChannels.map(e => {\n      let arr = [];\n      e.channels.map(c => arr.push(...threadData[c]));\n      return {\n        ...e,\n        threads: [...arr],\n      };\n    });\n    debug(\n      '\\n ⚙️ Fetched all the possible threads this user could receive in a weekly digest'\n    );\n\n    // if no rawThreadsForUsersEmail, escape\n    if (!rawThreadsForUsersEmail || rawThreadsForUsersEmail.length === 0)\n      return;\n\n    // we don't want to send a weekly digest to someone with only one thread for that week - so in this step we filter out any results where the thread count is less than the miminimum acceptable threshhold\n    const eligibleUsersForWeeklyDigest = rawThreadsForUsersEmail\n      .filter(user => user.threads.length > MIN_THREADS_REQUIRED_FOR_DIGEST)\n      // and finally, sort the user's threads in descending order by message count\n      .map(({ channels, ...user }) => ({\n        ...user,\n        threads: user.threads.sort((a, b) => b.messageCount - a.messageCount),\n      }));\n\n    debug(\n      '\\n ⚙️ Filtered users who have enough threads to qualify for a weekly digest'\n    );\n\n    /*\n      The result of our operations so far has given us an array with the following shape:\n\n      [\n        {\n          userId: ID,\n          email: String,\n          name?: String // returns null if user doesn't have a first name\n          threads: [{ thread1 }, { thread2}, ... ]\n        }\n        ...\n      ]\n\n      Where a thread contains the following information:\n      {\n        communityId: ID,\n        channelId: ID,\n        id: ID,\n        title: String,\n        messageCount: Number\n      }\n    */\n    return eligibleUsersForWeeklyDigest;\n  };\n\n  const processSendWeeklyDigests = async () => {\n    const eligibleUsers = await eligbleUsersForWeeklyDigest();\n\n    // if no elegible users, escape\n    if (!eligibleUsers || eligibleUsers.length === 0) return;\n\n    debug('\\n👉 Eligible users data');\n    debug(eligibleUsers);\n    debug('\\n👉 Example thread data for email');\n    debug(eligibleUsers[0].threads[0]);\n\n    const sendDigestPromises = eligibleUsers.map(\n      async user =>\n        await sendWeeklyDigestEmail(SEND_WEEKLY_DIGEST_EMAIL, { ...user })\n    );\n\n    const sendAllWeeklyDigests = await Promise.all(sendDigestPromises);\n    return sendAllWeeklyDigests;\n  };\n\n  return processSendWeeklyDigests().catch(err =>\n    console.log('Error sending weekly digests: ', err)\n  );\n};\n\n// migration\n// r.db('spectrum')\n//   .table('usersSettings')\n//   .filter({userId: '01p2A7kDCWUjGj6zQLlMQUOSQL42'})\n//   .update({\n//     notifications: {\n//       types: {\n//         newMessageInThreads: {\n//          email: r.row('notifications')('types')('newMessageInThreads')(\n//            'email'\n//          ),\n//         },\n//         newThreadCreated: {\n//          email: r.row('notifications')('types')('newThreadCreated')(\n//            'email'\n//          ),\n//         },\n//         newDirectMessage: {\n//          email: r.row('notifications')('types')('newDirectMessage')(\n//            'email'\n//          ),\n//         },\n//         weeklyDigest: {\n//          email: true\n//         },\n//       },\n//     },\n//   })\n\n\n\n// WEBPACK FOOTER //\n// ./chronos/queues/send-weekly-digest-email.js","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/regenerator/index.js\n// module id = 6\n// module chunks = 0","module.exports = require(\"regenerator-runtime\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"regenerator-runtime\"\n// module id = 7\n// module chunks = 0","module.exports = require(\"lodash.intersection\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash.intersection\"\n// module id = 8\n// module chunks = 0","// @flow\nconst { db } = require('./db');\n\nexport const getActiveThreadsInPastWeek = (): Promise<Array<Object>> => {\n  return db\n    .table('threads')\n    .filter(\n      db.row('lastActive').during(\n        // Change this to 60*60*24*7 to get weekly active users\n        db.now().sub(60 * 60 * 24 * 7),\n        db.now()\n      )\n    )\n    .filter(thread => db.not(thread.hasFields('deletedAt')))\n    .run();\n};\n\n\n\n// WEBPACK FOOTER //\n// ./chronos/models/thread.js","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 10\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 11\n// module chunks = 0","module.exports = \"-----BEGIN CERTIFICATE-----\\nMIIDbzCCAlegAwIBAgIEWRMkLjANBgkqhkiG9w0BAQ0FADA5MTcwNQYDVQQDDC5T\\ncGFjZSBQcm9ncmFtLTc5Njk3YmRkYTQxNTg3YjFmMzk4MzYxNDhlNmJjMTZhMB4X\\nDTE3MDUxMDE0MzExMFoXDTM3MDUxMDE0MDAwMFowOTE3MDUGA1UEAwwuU3BhY2Ug\\nUHJvZ3JhbS03OTY5N2JkZGE0MTU4N2IxZjM5ODM2MTQ4ZTZiYzE2YTCCASIwDQYJ\\nKoZIhvcNAQEBBQADggEPADCCAQoCggEBALwgqk6SZZah3eVlCvZ8sFHDaHPWekVt\\n1k3XAUkV+SrxijNGWNPnzkumXEd+qWYS9gYL9ak1otEjbxPR9B7+zBiPOFbwX1fE\\n5o97W0gxjwS8iJGL3brSmSuJAfqx3be3l2Da4tpdgmQgKVID3c7E4AVFdgh0snh5\\nNAChbx/BZXtCyJNk8gRR0G9tX01EtAumoRe3PkHs6CN0ObUNX7W9l1G6J5N00ECU\\nZBEcXIyQ/lNzpJrIzcBrZ75mocyCVkp5HINjs0mG+CrSgVzY5KMtWOPFlr1KuH9P\\nDXwYBDAKI3sKxj3Bgmwq1WtFbhTfuZkynxSZ0rgnr+aVFcszL2ZRVDMCAwEAAaN/\\nMH0wHQYDVR0OBBYEFIXsudbQwxml7S2NjYaFCcTs0meUMA4GA1UdDwEB/wQEAwIC\\nBDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TBAUwAwEB/zAf\\nBgNVHSMEGDAWgBSF7LnW0MMZpe0tjY2GhQnE7NJnlDANBgkqhkiG9w0BAQ0FAAOC\\nAQEAfjae2H+mdzABC9Kkh/tLUPKtGu1c3/3QSq4RTPyOAsCgmtWO2NSUcEI928eo\\n8EJvljx8Xo2vl3DbD9OmbWzPeUqQMm2Wsq98RB80KRvQAFSwOKMDqyv0+C/UGnnw\\nry3UMfTuY5Y2rRwsY4Z6FDPWnLJJKIa6aKutYo1pzkkvphtwq8lPQO2NW4uTrpjG\\nuhhH2cmtBUZRvRGIey29Z0TXufUNN6EAcbo0JxEuux6HotXbwI0wRwPmqHLNbSWw\\ngCd/pne0Pjryvw6XHzd4CQUsElWafmOf/+N760O1RCC/XCzOnsjUSLiAt9R7C/Ao\\niS3oQCP1KMbyfpulMFctZJR0kQ==\\n-----END CERTIFICATE-----\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./cacert\n// module id = 12\n// module chunks = 0","module.exports = require(\"rethinkdbdash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rethinkdbdash\"\n// module id = 13\n// module chunks = 0","// @flow\r\nconst { db } = require('./db');\r\n\r\nexport const getUsersForWeeklyDigest = (): Promise<Array<Object>> => {\r\n  return db\r\n    .table('usersSettings')\r\n    .filter(row =>\r\n      row('notifications')('types')('weeklyDigest')('email').eq(true)\r\n    )\r\n    .eqJoin('userId', db.table('users'))\r\n    .zip()\r\n    .pluck(['userId', 'email', 'firstName', 'name'])\r\n    .distinct()\r\n    .run();\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./chronos/models/usersSettings.js","// @flow\nconst { db } = require('./db');\n\nexport const getUsersChannelsEligibleForWeeklyDigest = (\n  userId: string\n): Promise<Array<string>> => {\n  return db\n    .table('usersChannels')\n    .getAll(userId, { index: 'userId' })\n    .filter({ isMember: true })\n    .map(row => row('channelId'))\n    .run();\n};\n\n\n\n// WEBPACK FOOTER //\n// ./chronos/models/usersChannels.js","// @flow\nconst { db } = require('./db');\n\nexport const getMessageCount = (threadId: string): Promise<number> => {\n  return db\n    .table('messages')\n    .getAll(threadId, { index: 'threadId' })\n    .count()\n    .run();\n};\n\n\n\n// WEBPACK FOOTER //\n// ./chronos/models/message.js","// @flow\nconst { db } = require('./db');\n\nexport const getCommunityById = (id: string): Promise<Object> => {\n  return db.table('communities').get(id).run();\n};\n\n\n\n// WEBPACK FOOTER //\n// ./chronos/models/community.js","// @flow\r\n// Create a worker with bull and start a small webserver which responds with\r\n// health information\r\nconst http = require('http');\r\nconst createQueue = require('./create-queue');\r\n\r\n/*::\r\ntype QueueMap = {\r\n  [name: string]: (job: any) => Promise<any>\r\n}\r\n*/\r\n\r\n// Helper function to sum properties of an array of objects\r\n// e.g. [{ completed: 6 }, { completed: 2 }] => 8\r\nconst sumArr = (\r\n  input /*: Array<Object> */,\r\n  prop /*: string */ /*: number */\r\n) => {\r\n  return input.reduce((sum, item) => sum + item[prop], 0);\r\n};\r\n\r\nconst createWorker = (queueMap /*: QueueMap */) => {\r\n  // Start processing the queues\r\n  const queues = Object.keys(queueMap).map(name => {\r\n    const queue = createQueue(name);\r\n    queue.process(queueMap[name]);\r\n    return queue;\r\n  });\r\n\r\n  return http.createServer((req, res) => {\r\n    res.setHeader('Content-Type', 'application/json');\r\n    // Summarize the data across all the queues\r\n    Promise.all(queues.map(queue => queue.getJobCounts())).then(jobCounts => {\r\n      const data = {\r\n        waiting: sumArr(jobCounts, 'waiting'),\r\n        active: sumArr(jobCounts, 'active'),\r\n        completed: sumArr(jobCounts, 'completed'),\r\n        failed: sumArr(jobCounts, 'failed'),\r\n        delayed: sumArr(jobCounts, 'delayed'),\r\n      };\r\n\r\n      res.end(JSON.stringify(data, null, 2));\r\n    });\r\n  });\r\n};\r\n\r\nmodule.exports = createWorker;\r\n\n\n\n// WEBPACK FOOTER //\n// ./shared/bull/create-worker.js","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 19\n// module chunks = 0","// @flow\r\nconst Queue = require('bull');\r\nconst Raven = require('raven');\r\n\r\nif (process.env.NODE_ENV !== 'development') {\r\n  Raven.config(\r\n    'https://3bd8523edd5d43d7998f9b85562d6924:d391ea04b0dc45b28610e7fad735b0d0@sentry.io/154812',\r\n    {\r\n      environment: process.env.NODE_ENV,\r\n    }\r\n  ).install();\r\n}\r\n\r\nconst redis =\r\n  process.env.NODE_ENV === 'production'\r\n    ? {\r\n        port: process.env.COMPOSE_REDIS_PORT,\r\n        host: process.env.COMPOSE_REDIS_URL,\r\n        password: process.env.COMPOSE_REDIS_PASSWORD,\r\n      }\r\n    : undefined; // Use the local instance of Redis in development by not passing any connection string\r\n\r\n// Leave the options undefined if we're using the default redis connection\r\nconst options = redis && { redis: redis };\r\n\r\nfunction createQueue(name /*: string */) {\r\n  const queue = new Queue(name, options);\r\n  queue.on('stalled', job => {\r\n    const message = `Job#${job.id} stalled, processing again.`;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      console.error(message);\r\n      return;\r\n    }\r\n    // In production log stalled job to Sentry\r\n    Raven.captureException(new Error(message));\r\n  });\r\n  return new Queue(name, options);\r\n}\r\n\r\nmodule.exports = createQueue;\r\n\n\n\n// WEBPACK FOOTER //\n// ./shared/bull/create-queue.js","module.exports = require(\"bull\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bull\"\n// module id = 21\n// module chunks = 0","module.exports = require(\"raven\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"raven\"\n// module id = 22\n// module chunks = 0"],"sourceRoot":""}