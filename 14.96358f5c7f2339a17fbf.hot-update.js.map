{"version":3,"file":"14.96358f5c7f2339a17fbf.hot-update.js","sources":["/Users/brianlovin/Sites/spectrum/src/views/notifications/components/browserNotificationRequest.js","/Users/brianlovin/Sites/spectrum/src/views/notifications/index.js"],"sourcesContent":["import React from 'react';\r\nimport { RequestCard, CloseRequest } from '../style';\r\nimport { FlexRow } from '../../../components/globals';\r\nimport { Button } from '../../../components/buttons';\r\n\r\nconst FirstRequest = ({ onSubscribe, onDismiss, loading }) => (\r\n  <RequestCard>\r\n    <p>\r\n      <span role=\"img\" aria-label=\"mailbox emoji\">\r\n        ðŸ“¬\r\n      </span>{' '}\r\n      We need your permission to enable push notifications:\r\n    </p>\r\n    <FlexRow>\r\n      <Button\r\n        icon=\"notification-fill\"\r\n        gradientTheme={'success'}\r\n        onClick={onSubscribe}\r\n        loading={loading}\r\n      >\r\n        Enable\r\n      </Button>\r\n      <CloseRequest\r\n        glyph=\"view-close\"\r\n        color=\"text.placeholder\"\r\n        hoverColor=\"warn.alt\"\r\n        tipText=\"Dismiss\"\r\n        tipLocation=\"top-left\"\r\n        onClick={onDismiss}\r\n      />\r\n    </FlexRow>\r\n  </RequestCard>\r\n);\r\n\r\nconst BrowserNotificationRequest = ({ onSubscribe, onDismiss, loading }) => (\r\n  <FirstRequest\r\n    onSubscribe={onSubscribe}\r\n    onDismiss={onDismiss}\r\n    loading={loading}\r\n  />\r\n);\r\n\r\nexport default BrowserNotificationRequest;\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/notifications/components/browserNotificationRequest.js","// @flow\nimport * as React from 'react';\nimport compose from 'recompose/compose';\nimport { connect } from 'react-redux';\n// NOTE(@mxstbr): This is a custom fork published of off this (as of this writing) unmerged PR: https://github.com/CassetteRocks/react-infinite-scroller/pull/38\n// I literally took it, renamed the package.json and published to add support for scrollElement since our scrollable container is further outside\nimport InfiniteList from 'react-infinite-scroller-with-scroll-element';\nimport { withInfiniteScroll } from '../../components/infiniteScroll';\nimport { parseNotification, getDistinctNotifications } from './utils';\nimport { NewMessageNotification } from './components/newMessageNotification';\nimport { NewReactionNotification } from './components/newReactionNotification';\nimport { NewChannelNotification } from './components/newChannelNotification';\nimport { NewThreadNotification } from './components/newThreadNotification';\nimport { CommunityInviteNotification } from './components/communityInviteNotification';\nimport { MentionMessageNotification } from './components/mentionMessageNotification';\nimport { MentionThreadNotification } from './components/mentionThreadNotification';\nimport { NewUserInCommunityNotification } from './components/newUserInCommunityNotification';\nimport { PrivateChannelRequestApproved } from './components/privateChannelRequestApprovedNotification';\nimport { PrivateChannelRequestSent } from './components/privateChannelRequestSentNotification';\nimport { Column } from '../../components/column';\nimport AppViewWrapper from '../../components/appViewWrapper';\nimport Head from '../../components/head';\nimport Titlebar from '../../views/titlebar';\nimport {\n  displayLoadingNotifications,\n  LoadingThread,\n} from '../../components/loading';\nimport { FlexCol } from '../../components/globals';\nimport { sortByDate } from '../../helpers/utils';\nimport {\n  storeItem,\n  getItemFromStorage,\n  removeItemFromStorage,\n} from '../../helpers/localStorage';\nimport WebPushManager from '../../helpers/web-push-manager';\nimport { track } from '../../helpers/events';\nimport { addToastWithTimeout } from '../../actions/toasts';\nimport {\n  getNotifications,\n  markNotificationsSeenMutation,\n} from '../../api/notification';\nimport { subscribeToWebPush } from '../../api/web-push-subscriptions';\nimport { UpsellSignIn, UpsellNullNotifications } from '../../components/upsell';\nimport ViewError from '../../components/viewError';\nimport BrowserNotificationRequest from './components/browserNotificationRequest';\nimport generateMetaInfo from 'shared/generate-meta-info';\n\ntype Props = {\n  markAllNotificationsSeen: Function,\n  subscribeToWebPush: Function,\n  dispatch: Function,\n  currentUser: Object,\n  data: {\n    networkStatus: number,\n    fetchMore: Function,\n    hasNextPage: boolean,\n    notifications: {\n      edges: Array<Object>,\n    },\n  },\n};\ntype State = {\n  showWebPushPrompt: boolean,\n  webPushPromptLoading: boolean,\n  scrollElement: any,\n};\n\nclass NotificationsPure extends React.Component<Props, State> {\n  constructor() {\n    super();\n\n    this.state = {\n      showWebPushPrompt: false,\n      webPushPromptLoading: false,\n      scrollElement: null,\n    };\n  }\n\n  markAllNotificationsSeen = () => {\n    this.props\n      .markAllNotificationsSeen()\n      .then(({ data: { markAllNotificationsSeen } }) => {\n        // notifs were marked as seen\n      })\n      .catch(err => {\n        // error\n      });\n  };\n\n  componentDidMount() {\n    this.markAllNotificationsSeen();\n    this.setState({\n      // NOTE(@mxstbr): This is super un-reacty but it works. This refers to\n      // the AppViewWrapper which is the scrolling part of the site.\n      scrollElement: document.getElementById('scroller-for-thread-feed'),\n    });\n\n    if (getItemFromStorage('webPushPromptDismissed')) {\n      return this.setState({\n        showWebPushPrompt: false,\n      });\n    }\n\n    WebPushManager.getPermissionState().then(result => {\n      if (result === 'prompt') {\n        track('browser push notifications', 'prompted');\n        this.setState({\n          showWebPushPrompt: true,\n        });\n      }\n    });\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const curr = this.props;\n    // fetching more\n    if (curr.data.networkStatus === 7 && nextProps.data.networkStatus === 3)\n      return false;\n    return true;\n  }\n\n  subscribeToWebPush = () => {\n    track('browser push notifications', 'prompt triggered');\n    this.setState({\n      webPushPromptLoading: true,\n    });\n    WebPushManager.subscribe()\n      .then(subscription => {\n        track('browser push notifications', 'subscribed');\n        removeItemFromStorage('webPushPromptDismissed');\n        this.setState({\n          webPushPromptLoading: false,\n          showWebPushPrompt: false,\n        });\n        return this.props.subscribeToWebPush(subscription);\n      })\n      .catch(err => {\n        track('browser push notifications', 'blocked');\n        this.setState({\n          webPushPromptLoading: false,\n        });\n        return this.props.dispatch(\n          addToastWithTimeout(\n            'error',\n            \"Oops, we couldn't enable browser notifications for you. Please try again!\"\n          )\n        );\n      });\n  };\n\n  dismissWebPushRequest = () => {\n    this.setState({\n      showWebPushPrompt: false,\n    });\n    track('browser push notifications', 'dismissed');\n    storeItem('webPushPromptDismissed', { timestamp: Date.now() });\n  };\n\n  render() {\n    const { currentUser, data } = this.props;\n    if (!currentUser) {\n      return (\n        <AppViewWrapper>\n          <Column type={'primary'}>\n            <UpsellSignIn />\n          </Column>\n        </AppViewWrapper>\n      );\n    }\n\n    if (!data || data.error || data.loading) {\n      return (\n        <AppViewWrapper>\n          <ViewError />\n        </AppViewWrapper>\n      );\n    }\n\n    const { title, description } = generateMetaInfo({\n      type: 'notifications',\n    });\n\n    if (!data.notifications || data.notifications.edges.length === 0) {\n      return (\n        <AppViewWrapper>\n          <Column type={'primary'}>\n            <Head title={title} description={description} />\n            <UpsellNullNotifications />\n          </Column>\n        </AppViewWrapper>\n      );\n    }\n\n    let notifications = data.notifications.edges\n      .map(notification => parseNotification(notification.node))\n      .filter(\n        notification => notification.context.type !== 'DIRECT_MESSAGE_THREAD'\n      );\n\n    notifications = getDistinctNotifications(notifications);\n    notifications = sortByDate(notifications, 'modifiedAt', 'desc');\n\n    const { scrollElement } = this.state;\n\n    return (\n      <FlexCol style={{ flex: '1 1 auto', maxHeight: 'calc(100% - 48px)' }}>\n        <Head title={title} description={description} />\n        <Titlebar title={'Notifications'} provideBack={false} noComposer />\n        <AppViewWrapper>\n          <Column type={'primary'}>\n            {this.state.showWebPushPrompt && (\n              <BrowserNotificationRequest\n                onSubscribe={this.subscribeToWebPush}\n                onDismiss={this.dismissWebPushRequest}\n                loading={this.state.webPushPromptLoading}\n              />\n            )}\n            <InfiniteList\n              pageStart={0}\n              loadMore={data.fetchMore}\n              hasMore={data.hasNextPage}\n              loader={<LoadingThread />}\n              useWindow={false}\n              initialLoad={false}\n              scrollElement={scrollElement}\n              threshold={750}\n            >\n              {notifications.map(notification => {\n                switch (notification.event) {\n                  case 'MESSAGE_CREATED': {\n                    return (\n                      <NewMessageNotification\n                        key={notification.id}\n                        notification={notification}\n                        currentUser={currentUser}\n                      />\n                    );\n                  }\n                  case 'REACTION_CREATED': {\n                    return (\n                      <NewReactionNotification\n                        key={notification.id}\n                        notification={notification}\n                        currentUser={currentUser}\n                      />\n                    );\n                  }\n                  case 'CHANNEL_CREATED': {\n                    return (\n                      <NewChannelNotification\n                        key={notification.id}\n                        notification={notification}\n                        currentUser={currentUser}\n                      />\n                    );\n                  }\n                  case 'USER_JOINED_COMMUNITY': {\n                    return (\n                      <NewUserInCommunityNotification\n                        key={notification.id}\n                        notification={notification}\n                        currentUser={currentUser}\n                      />\n                    );\n                  }\n                  case 'THREAD_CREATED': {\n                    return (\n                      <NewThreadNotification\n                        key={notification.id}\n                        notification={notification}\n                        currentUser={currentUser}\n                      />\n                    );\n                  }\n                  case 'COMMUNITY_INVITE': {\n                    return (\n                      <CommunityInviteNotification\n                        key={notification.id}\n                        notification={notification}\n                        currentUser={currentUser}\n                      />\n                    );\n                  }\n                  case 'MENTION_MESSAGE': {\n                    return (\n                      <MentionMessageNotification\n                        key={notification.id}\n                        notification={notification}\n                        currentUser={currentUser}\n                      />\n                    );\n                  }\n                  case 'MENTION_THREAD': {\n                    return (\n                      <MentionThreadNotification\n                        key={notification.id}\n                        notification={notification}\n                        currentUser={currentUser}\n                      />\n                    );\n                  }\n                  case 'PRIVATE_CHANNEL_REQUEST_SENT': {\n                    return (\n                      <PrivateChannelRequestSent\n                        key={notification.id}\n                        notification={notification}\n                        currentUser={currentUser}\n                      />\n                    );\n                  }\n                  case 'PRIVATE_CHANNEL_REQUEST_APPROVED': {\n                    return (\n                      <PrivateChannelRequestApproved\n                        key={notification.id}\n                        notification={notification}\n                        currentUser={currentUser}\n                      />\n                    );\n                  }\n                  default: {\n                    return null;\n                  }\n                }\n              })}\n            </InfiniteList>\n          </Column>\n        </AppViewWrapper>\n      </FlexCol>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.users.currentUser,\n});\n\nexport default compose(\n  subscribeToWebPush,\n  getNotifications,\n  displayLoadingNotifications,\n  markNotificationsSeenMutation,\n  // $FlowIssue\n  connect(mapStateToProps),\n  withInfiniteScroll\n)(NotificationsPure);\n\n\n\n// WEBPACK FOOTER //\n// src/views/notifications/index.js"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAHA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAPA;AADA;AACA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAqBA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAWA;AAGA;AACA;AAFA;AAEA;AAEA;AACA;AACA;AACA;AApBA;AAsDA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAMA;AACA;AACA;AAjFA;AAmFA;AACA;AADA;AAGA;AACA;AACA;AACA;AAtFA;AACA;AACA;AACA;AAHA;AAHA;AAQA;AACA;;;AAYA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAuCA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AAnBA;AAqBA;AADA;AApBA;AAAA;AACA;AAuBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AA3CA;AACA;AACA;AA4CA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AACA;AA7FA;AA+FA;AA1GA;AARA;AADA;AAHA;AA4HA;;;;AAtQA;AACA;AAwQA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAKA;AACA;;;;A","sourceRoot":""}