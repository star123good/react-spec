{"version":3,"file":"static/js/ChannelView.chunk.js","sources":["/Users/brianlovin/Sites/spectrum/node_modules/validator/lib/isByteLength.js","/Users/brianlovin/Sites/spectrum/node_modules/validator/lib/isEmail.js","/Users/brianlovin/Sites/spectrum/src/api/fragments/channel/channelThreads.js","/Users/brianlovin/Sites/spectrum/src/api/slackImport.js","/Users/brianlovin/Sites/spectrum/src/components/emailInvitationForm/index.js","/Users/brianlovin/Sites/spectrum/src/components/emailInvitationForm/style.js","/Users/brianlovin/Sites/spectrum/src/components/newActivityIndicator/index.js","/Users/brianlovin/Sites/spectrum/src/components/threadComposer/components/composer.js","/Users/brianlovin/Sites/spectrum/src/components/threadComposer/components/placeholder.js","/Users/brianlovin/Sites/spectrum/src/components/threadComposer/components/upsell.js","/Users/brianlovin/Sites/spectrum/src/components/threadComposer/index.js","/Users/brianlovin/Sites/spectrum/src/components/threadComposer/mutations.js","/Users/brianlovin/Sites/spectrum/src/components/threadComposer/queries.js","/Users/brianlovin/Sites/spectrum/src/components/threadComposer/style.js","/Users/brianlovin/Sites/spectrum/src/components/threadFeed/index.js","/Users/brianlovin/Sites/spectrum/src/components/threadFeed/style.js","/Users/brianlovin/Sites/spectrum/src/components/threadFeedCard/facePile.js","/Users/brianlovin/Sites/spectrum/src/components/threadFeedCard/formattedThreadLocation.js","/Users/brianlovin/Sites/spectrum/src/components/threadFeedCard/index.js","/Users/brianlovin/Sites/spectrum/src/components/upsell/requestToJoinChannel.js","/Users/brianlovin/Sites/spectrum/src/views/channel/components/notificationsToggle.js","/Users/brianlovin/Sites/spectrum/src/views/channel/components/pendingUsersNotification.js","/Users/brianlovin/Sites/spectrum/src/views/channel/components/style.js","/Users/brianlovin/Sites/spectrum/src/views/channel/index.js","/Users/brianlovin/Sites/spectrum/src/views/channel/queries.js","/Users/brianlovin/Sites/spectrum/src/views/communitySettings/components/importSlack.js","/Users/brianlovin/Sites/spectrum/src/views/newCommunity/components/share/index.js","/Users/brianlovin/Sites/spectrum/src/views/newCommunity/components/share/style.js","/Users/brianlovin/Sites/spectrum/src/views/newCommunity/style.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = isByteLength;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable prefer-rest-params */\nfunction isByteLength(str, options) {\n  (0, _assertString2.default)(str);\n  var min = void 0;\n  var max = void 0;\n  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isByteLength(str, min [, max])\n    min = arguments[1];\n    max = arguments[2];\n  }\n  var len = encodeURI(str).split(/%..|./).length - 1;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/validator/lib/isByteLength.js\n// module id = ./node_modules/validator/lib/isByteLength.js\n// module chunks = 1 2 3 4 6 7","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _isByteLength = require('./isByteLength');\n\nvar _isByteLength2 = _interopRequireDefault(_isByteLength);\n\nvar _isFQDN = require('./isFQDN');\n\nvar _isFQDN2 = _interopRequireDefault(_isFQDN);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true\n};\n\n/* eslint-disable max-len */\n/* eslint-disable no-control-regex */\nvar displayName = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\,\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\s]*<(.+)>$/i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\n/* eslint-enable max-len */\n/* eslint-enable no-control-regex */\n\nfunction isEmail(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(displayName);\n    if (display_email) {\n      str = display_email[1];\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var user = parts.join('@');\n\n  var lower_domain = domain.toLowerCase();\n  if (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com') {\n    user = user.replace(/\\./g, '').toLowerCase();\n  }\n\n  if (!(0, _isByteLength2.default)(user, { max: 64 }) || !(0, _isByteLength2.default)(domain, { max: 254 })) {\n    return false;\n  }\n\n  if (!(0, _isFQDN2.default)(domain, { require_tld: options.require_tld })) {\n    return false;\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n\n  var user_parts = user.split('.');\n  for (var i = 0; i < user_parts.length; i++) {\n    if (!pattern.test(user_parts[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/validator/lib/isEmail.js\n// module id = ./node_modules/validator/lib/isEmail.js\n// module chunks = 1 2 3 4 6 7","import { gql } from 'react-apollo';\nimport { threadInfoFragment } from '../thread/threadInfo';\n\nexport const channelThreadsFragment = gql`\n  fragment channelThreads on Channel {\n    threadConnection(first: 10, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          ...threadInfo\n        }\n      }\n    }\n  }\n  ${threadInfoFragment}\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/api/fragments/channel/channelThreads.js","// @flow\n// $FlowFixMe\nimport { graphql, gql } from 'react-apollo';\n\nconst getSlackImportOptions = {\n  options: ({ id }) => ({\n    variables: {\n      id,\n    },\n  }),\n};\n\nexport const getSlackImport = graphql(\n  gql`\n    query getSlackImport($id: ID!) {\n      community(id: $id) {\n        id\n        slackImport {\n          members\n          teamName\n          sent\n        }\n      }\n    }\n  `,\n  getSlackImportOptions\n);\n\nconst SEND_SLACK_INVITATIONS_MUTATION = gql`\n  mutation sendSlackInvites($input: SendSlackInvitesInput!) {\n    sendSlackInvites(input: $input) {\n      id\n      slackImport {\n        members\n        teamName\n        sent\n      }\n    }\n  }\n`;\nconst SEND_SLACK_INVITATIONS_OPTIONS = {\n  props: ({ input, mutate }) => ({\n    sendSlackInvites: input =>\n      mutate({\n        variables: {\n          input,\n        },\n      }),\n  }),\n};\n\nexport const sendSlackInvitationsMutation = graphql(\n  SEND_SLACK_INVITATIONS_MUTATION,\n  SEND_SLACK_INVITATIONS_OPTIONS\n);\n\n\n\n// WEBPACK FOOTER //\n// src/api/slackImport.js","// @flow\nimport * as React from 'react';\nimport compose from 'recompose/compose';\nimport { connect } from 'react-redux';\nimport Textarea from 'react-textarea-autosize';\nimport { addToastWithTimeout } from '../../actions/toasts';\nimport Icon from '../icons';\nimport isEmail from 'validator/lib/isEmail';\nimport { sendCommunityEmailInvitationsMutation } from '../../api/community';\nimport { sendChannelEmailInvitationMutation } from '../../api/channel';\nimport { Button } from '../buttons';\nimport { Error } from '../formElements';\nimport { SectionCardFooter } from '../settingsViews/style';\nimport {\n  EmailInviteForm,\n  EmailInviteInput,\n  AddRow,\n  RemoveRow,\n  CustomMessageToggle,\n  CustomMessageTextAreaStyles,\n} from './style';\n\ntype Props = {\n  id: string,\n  dispatch: Function,\n  currentUser: Object,\n  sendEmailInvites: Function,\n};\n\ntype ContactProps = {\n  email: string,\n  firstName: string,\n  lastName: string,\n  error: boolean,\n};\n\ntype State = {\n  isLoading: boolean,\n  contacts: Array<ContactProps>,\n  hasCustomMessage: boolean,\n  customMessageString: string,\n  customMessageError: boolean,\n};\n\nclass EmailInvitationForm extends React.Component<Props, State> {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      contacts: [\n        {\n          email: '',\n          firstName: '',\n          lastName: '',\n          error: false,\n        },\n        {\n          email: '',\n          firstName: '',\n          lastName: '',\n          error: false,\n        },\n        {\n          email: '',\n          firstName: '',\n          lastName: '',\n          error: false,\n        },\n      ],\n      hasCustomMessage: false,\n      customMessageString: '',\n      customMessageError: false,\n    };\n  }\n\n  getUniqueEmails = array => array.filter((x, i, a) => a.indexOf(x) === i);\n\n  sendInvitations = () => {\n    const {\n      contacts,\n      hasCustomMessage,\n      customMessageError,\n      customMessageString,\n    } = this.state;\n    const { dispatch, currentUser, sendEmailInvites } = this.props;\n\n    this.setState({ isLoading: true });\n\n    let validContacts = contacts\n      .filter(contact => contact.error === false)\n      .filter(contact => contact.email !== currentUser.email)\n      .filter(contact => contact.email.length > 0)\n      .filter(contact => isEmail(contact.email))\n      .map(({ error, ...contact }) => {\n        return { ...contact };\n      });\n\n    let customMessage =\n      hasCustomMessage && !customMessageError ? customMessageString : null;\n\n    // make sure to uniqify the emails so you can't enter on email multiple times\n    validContacts = this.getUniqueEmails(validContacts);\n\n    if (validContacts.length === 0) {\n      this.setState({\n        isLoading: false,\n      });\n\n      return dispatch(\n        addToastWithTimeout('error', 'No emails entered - try again!')\n      );\n    }\n\n    sendEmailInvites({\n      id: this.props.id,\n      contacts: validContacts,\n      customMessage,\n    })\n      .then(({ data: { sendEmailInvites } }) => {\n        this.setState({\n          isLoading: false,\n          contacts: [\n            {\n              email: '',\n              firstName: '',\n              lastName: '',\n              error: false,\n            },\n            {\n              email: '',\n              firstName: '',\n              lastName: '',\n              error: false,\n            },\n            {\n              email: '',\n              firstName: '',\n              lastName: '',\n              error: false,\n            },\n          ],\n          hasCustomMessage: false,\n          customMessageString: '',\n          customMessageError: false,\n        });\n\n        dispatch(\n          addToastWithTimeout(\n            'success',\n            `Invitations sent to ${\n              validContacts.length > 1\n                ? `${validContacts.length} people`\n                : `${validContacts.length} person`\n            }!`\n          )\n        );\n      })\n      .catch(err => {\n        this.setState({\n          isLoading: false,\n        });\n        dispatch(addToastWithTimeout('error', err.message));\n      });\n  };\n\n  handleChange = (e, i, key) => {\n    const { contacts } = this.state;\n    contacts[i][key] = e.target.value;\n\n    this.setState({\n      ...this.state,\n      contacts,\n    });\n  };\n\n  addRow = () => {\n    const { contacts } = this.state;\n    contacts.push({\n      email: '',\n      firstName: '',\n      lastName: '',\n      error: false,\n    });\n\n    this.setState({\n      ...this.state,\n      contacts,\n    });\n  };\n\n  removeRow = index => {\n    const { contacts } = this.state;\n    contacts.splice(index, 1);\n    this.setState({\n      ...this.state,\n      contacts,\n    });\n  };\n\n  validate = (e, i) => {\n    const { contacts } = this.state;\n    if (!isEmail(e.target.value)) {\n      contacts[i].error = true;\n    } else {\n      contacts[i].error = false;\n    }\n\n    this.setState({\n      ...this.state,\n      contacts,\n    });\n  };\n\n  handleCustomMessageChange = e => {\n    const customMessageString = e.target.value;\n    if (customMessageString.length > 500) {\n      this.setState({\n        customMessageString,\n        customMessageError: true,\n      });\n    } else {\n      this.setState({\n        customMessageString,\n        customMessageError: false,\n      });\n    }\n  };\n\n  toggleCustomMessage = () => {\n    const { hasCustomMessage } = this.state;\n    this.setState({\n      hasCustomMessage: !hasCustomMessage,\n    });\n  };\n\n  render() {\n    const {\n      contacts,\n      isLoading,\n      hasCustomMessage,\n      customMessageString,\n      customMessageError,\n    } = this.state;\n\n    return (\n      <div>\n        {contacts.map((contact, i) => {\n          return (\n            <EmailInviteForm key={i}>\n              <EmailInviteInput\n                error={contact.error}\n                type=\"email\"\n                onBlur={e => this.validate(e, i)}\n                placeholder=\"Email address\"\n                value={contact.email}\n                onChange={e => this.handleChange(e, i, 'email')}\n              />\n              <EmailInviteInput\n                type=\"text\"\n                placeholder=\"First name (optional)\"\n                value={contact.firstName}\n                onChange={e => this.handleChange(e, i, 'firstName')}\n                hideOnMobile\n              />\n              <RemoveRow onClick={() => this.removeRow(i)}>\n                <Icon glyph=\"view-close\" size=\"16\" />\n              </RemoveRow>\n            </EmailInviteForm>\n          );\n        })}\n\n        <AddRow onClick={this.addRow}>+ Add another</AddRow>\n\n        <CustomMessageToggle onClick={this.toggleCustomMessage}>\n          <Icon glyph={hasCustomMessage ? 'view-close' : 'post'} size={20} />\n          {hasCustomMessage\n            ? 'Remove custom message'\n            : 'Optional: Add a custom message to your invitation'}\n        </CustomMessageToggle>\n\n        {hasCustomMessage && (\n          <Textarea\n            autoFocus\n            value={customMessageString}\n            placeholder=\"Write something sweet here...\"\n            style={{\n              ...CustomMessageTextAreaStyles,\n              border: customMessageError\n                ? '2px solid #E3353C'\n                : '2px solid #DFE7EF',\n            }}\n            onChange={this.handleCustomMessageChange}\n          />\n        )}\n\n        {hasCustomMessage &&\n          customMessageError && (\n            <Error>\n              Your custom invitation message can be up to 500 characters.\n            </Error>\n          )}\n\n        <SectionCardFooter>\n          <Button\n            loading={isLoading}\n            onClick={this.sendInvitations}\n            disabled={hasCustomMessage && customMessageError}\n          >\n            Send Invitations\n          </Button>\n        </SectionCardFooter>\n      </div>\n    );\n  }\n}\n\nconst map = state => ({ currentUser: state.users.currentUser });\n\nexport const CommunityInvitationForm = compose(\n  // $FlowIssue\n  connect(map),\n  sendCommunityEmailInvitationsMutation\n)(EmailInvitationForm);\n\nexport const ChannelInvitationForm = compose(\n  // $FlowIssue\n  connect(map),\n  sendChannelEmailInvitationMutation\n)(EmailInvitationForm);\n\n\n\n// WEBPACK FOOTER //\n// src/components/emailInvitationForm/index.js","import styled from 'styled-components';\n\nexport const EmailInviteForm = styled.div`\n  display: flex;\n  align-items: center;\n\n  &:first-of-type {\n    margin-top: 16px;\n  }\n`;\n\nexport const EmailInviteInput = styled.input`\n  display: flex;\n  flex: 1 1 50%;\n  padding: 8px 12px;\n  font-size: 14px;\n  border-radius: 4px;\n  border: 2px solid\n    ${props => (props.error ? props.theme.warn.default : props.theme.bg.border)};\n  margin-bottom: 8px;\n  margin-top: 8px;\n  margin-left: 4px;\n  margin-right: 4px;\n\n  &:first-of-type {\n    margin-left: 0;\n  }\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n\n  &:focus {\n    border: 2px solid ${props => props.theme.brand.default};\n  }\n\n  @media screen and (max-width: 768px) {\n    display: ${props => (props.hideOnMobile ? 'none' : 'auto')};\n  }\n`;\n\nexport const AddRow = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  padding: 8px;\n  background: ${props => props.theme.bg.wash};\n  margin-top: 8px;\n  margin-bottom: 16px;\n  font-size: 14px;\n  color: ${props => props.theme.text.alt};\n  font-weight: 500;\n  border-radius: 4px;\n\n  &:hover {\n    color: ${props => props.theme.text.default};\n    cursor: pointer;\n  }\n`;\n\nexport const RemoveRow = styled.div`\n  margin-left: 4px;\n  color: ${props => props.theme.text.alt};\n\n  &:hover {\n    cursor: pointer;\n    color: ${props => props.theme.text.default};\n  }\n`;\n\nexport const CustomMessageToggle = styled.h4`\n  font-size: 14px;\n  color: ${props => props.theme.text.alt};\n  margin-top: 16px;\n\n  &:hover {\n    color: ${props => props.theme.brand.default};\n    cursor: pointer;\n  }\n\n  div {\n    position: relative;\n    top: 5px;\n    margin-right: 4px;\n  }\n`;\n\nexport const CustomMessageTextAreaStyles = {\n  width: '100%',\n  borderRadius: '8px',\n  padding: '16px',\n  marginTop: '8px',\n  fontSize: '14px',\n};\n\n\n\n// WEBPACK FOOTER //\n// src/components/emailInvitationForm/style.js","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { clearActivityIndicator } from '../../actions/newActivityIndicator';\nimport styled from 'styled-components';\nimport { Gradient } from '../globals';\n\nconst Pill = styled.div`\n  padding: ${props => (props.refetching ? '8px' : '8px 16px')};\n  border-radius: 20px;\n  color: ${props => props.theme.text.reverse};\n  background: ${props =>\n    Gradient(props.theme.brand.alt, props.theme.brand.default)};};\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  align-self: center;\n  position: fixed;\n  top: 0;\n  opacity: ${props => (props.active ? '1' : '0')};\n  pointer-events: ${props => (props.active ? 'auto' : 'none')};\n  left: 50%;\n  z-index: 9999;\n  transform: translateX(-50%) translateY(${props =>\n    props.active ? '80px' : '60px'});\n  font-weight: 700;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n  transition: all 0.2s ease-in-out;\n  cursor: pointer;\n\n  &:hover {\n    transform: translateX(-50%) translateY(78px);\n    transition: all 0.2s ease-in-out;\n  }\n\n  &:active {\n    transform: translateX(-50%) translateY(80px);\n    transition: all 0.1s ease-in-out;\n  }\n\n  @media (max-width: 768px) {\n    transform: translateX(-50%) translateY(${props =>\n      props.active ? '60px' : '40px'});\n\n    &:hover {\n      transform: translateX(-50%) translateY(58px);\n      transition: all 0.2s ease-in-out;\n    }\n\n    &:active {\n      transform: translateX(-50%) translateY(60px);\n      transition: all 0.1s ease-in-out;\n    }\n  }\n`;\n\nconst scrollTo = (element, to, duration) => {\n  if (duration < 0) return;\n  const difference = to - element.scrollTop;\n  const perTick = difference / duration * 2;\n\n  setTimeout(() => {\n    element.scrollTop = element.scrollTop + perTick;\n    scrollTo(element, to, duration - 2);\n  }, 10);\n};\n\nclass Indicator extends Component {\n  state: {\n    elem: any,\n  };\n\n  constructor() {\n    super();\n\n    this.state = {\n      elem: null,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setState({\n        // NOTE(@mxstbr): This is super un-reacty but it works. This refers to\n        // the AppViewWrapper which is the scrolling part of the site.\n        elem: document.getElementById(this.props.elem),\n      });\n    }\n  }\n\n  componentDidMount() {\n    const elem = document.getElementById(this.props.elem);\n    this.setState({\n      // NOTE(@mxstbr): This is super un-reacty but it works. This refers to\n      // the AppViewWrapper which is the scrolling part of the site.\n      elem,\n    });\n\n    // if the component mounted while the user is scrolled to the top, immediately clear the redux store of the activity indicator - since the user can see the top of the feed, they don't need an indicator\n    if (elem.scrollTop < window.innerHeight / 2) {\n      this.props.dispatch(clearActivityIndicator());\n    }\n  }\n\n  componentWillUnmount() {\n    // when the component unmounts, clear the state so that at next mount we will always get a new scrollTop position for the scroll element\n    this.setState({\n      elem: null,\n    });\n  }\n\n  clearActivityIndicator = () => {\n    // if the user clicks on the new activity indicator, scroll them to the top of the feed and dismiss the indicator\n    setTimeout(() => this.props.dispatch(clearActivityIndicator()), 120);\n    scrollTo(this.state.elem, 0, 80);\n  };\n\n  render() {\n    const { elem } = this.state;\n    let active = false;\n\n    // if the scroll element exists, and the user has scrolled at least half of the screen (e.g. the top of the feed is out of view), then the user should see a new activity indicator\n    if (elem) {\n      active = elem.scrollTop > window.innerHeight / 2;\n    }\n\n    return (\n      <Pill active={active} onClick={this.clearActivityIndicator}>\n        New conversations!\n      </Pill>\n    );\n  }\n}\n\nexport default connect()(Indicator);\n\n\n\n// WEBPACK FOOTER //\n// src/components/newActivityIndicator/index.js","import * as React from 'react';\nimport compose from 'recompose/compose';\nimport Textarea from 'react-textarea-autosize';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport { track } from '../../../helpers/events';\nimport { closeComposer } from '../../../actions/composer';\nimport { changeActiveThread } from '../../../actions/dashboardFeed';\nimport { addToastWithTimeout } from '../../../actions/toasts';\nimport Editor from '../../draftjs-editor';\nimport { toPlainText, fromPlainText, toJSON } from 'shared/draft-utils';\nimport { getComposerCommunitiesAndChannels } from '../queries';\nimport { publishThread } from '../mutations';\nimport { getLinkPreviewFromUrl } from '../../../helpers/utils';\nimport isURL from 'validator/lib/isURL';\nimport { URLS, ENDS_IN_WHITESPACE } from '../../../helpers/regexps';\nimport { TextButton, Button } from '../../buttons';\nimport { FlexRow } from '../../../components/globals';\nimport { LoadingComposer } from '../../loading';\nimport viewNetworkHandler from '../../viewNetworkHandler';\nimport {\n  Container,\n  Composer,\n  Overlay,\n  ThreadDescription,\n  ThreadTitle,\n  ContentContainer,\n  Actions,\n  Dropdowns,\n} from '../style';\n\ntype Props = {\n  title: string,\n  body: Object,\n  isOpen: boolean,\n  dispatch: Function,\n  isLoading: boolean,\n  activeChannel?: string,\n  activeCommunity?: string,\n  isInbox: boolean,\n  mutate: Function,\n  history: Object,\n  data: {\n    refetch: Function,\n    user: {\n      channelConnection: {\n        edges: Array<any>,\n      },\n      communityConnection: {\n        edges: Array<any>,\n      },\n    },\n  },\n};\n\ntype State = {\n  isMounted: boolean,\n  title: string,\n  body: Object,\n  availableCommunities: Array<any>,\n  availableChannels: Array<any>,\n  activeCommunity: ?string,\n  activeChannel: ?string,\n  isPublishing: boolean,\n  linkPreview: ?Object,\n  linkPreviewTrueUrl: ?string,\n  linkPreviewLength: number,\n  fetchingLinkPreview: boolean,\n  postWasPublished: boolean,\n};\nclass ThreadComposerWithData extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isMounted: true,\n      title: props.title || '',\n      body: props.body || fromPlainText(''),\n      availableCommunities: [],\n      availableChannels: [],\n      activeCommunity: '',\n      activeChannel: '',\n      isPublishing: false,\n      linkPreview: null,\n      linkPreviewTrueUrl: '',\n      linkPreviewLength: 0,\n      fetchingLinkPreview: false,\n      postWasPublished: false,\n    };\n  }\n\n  handleIncomingProps = props => {\n    const { isMounted } = this.state;\n    if (!isMounted) return;\n    /*\n      Create a new array of communities only containing the `node` data from\n      graphQL. Then filter the resulting channel to remove any communities\n      that don't have any channels yet\n    */\n\n    // if the user doesn't exist, bust outta here\n    if (!props.data.user || props.data.user === undefined) return;\n\n    const availableCommunities = props.data.user.communityConnection.edges\n      .map(edge => edge.node)\n      .filter(\n        community =>\n          community.communityPermissions.isMember ||\n          community.communityPermissions.isOwner\n      )\n      .sort((a, b) => {\n        const bc = parseInt(b.communityPermissions.reputation, 10);\n        const ac = parseInt(a.communityPermissions.reputation, 10);\n        return bc <= ac ? -1 : 1;\n      });\n\n    /*\n      Iterate through each of our community nodes to construct a new array\n      of possible channels\n\n      returns an array of array, where each parent array represents a community\n      and each child array represents the channels within that parent\n      community\n    */\n    const availableChannels = props.data.user.channelConnection.edges\n      .map(edge => edge.node)\n      .filter(\n        channel =>\n          channel.channelPermissions.isMember ||\n          channel.channelPermissions.isOwner\n      )\n      .filter(channel => {\n        if (!channel.isPrivate) return channel;\n        if (!channel.community.isPro) return null;\n        return channel;\n      });\n\n    /*\n      If a user is viewing a communit or channel, we use the url as a prop\n      to set a default activeCommunity and activeChannel\n\n      If no defaults are set, we use the first available community, and then\n      find the first available channel within that available community\n    */\n    const activeCommunityFromPropsOrState =\n      props.activeCommunity || this.state.activeCommunity;\n\n    let activeCommunity =\n      availableCommunities &&\n      (activeCommunityFromPropsOrState\n        ? availableCommunities.filter(community => {\n            return (\n              community.slug.toLowerCase() ===\n              activeCommunityFromPropsOrState.toLowerCase()\n            );\n          })\n        : availableCommunities);\n\n    activeCommunity =\n      activeCommunity && activeCommunity.length > 0\n        ? activeCommunity[0].id\n        : null;\n\n    if (!activeCommunity) {\n      return props.data.refetch();\n    } else {\n      this.setActiveStuff(\n        availableCommunities,\n        availableChannels,\n        activeCommunity\n      );\n    }\n  };\n\n  setActiveStuff = (\n    availableCommunities,\n    availableChannels,\n    activeCommunity\n  ) => {\n    const props = this.props;\n    const { isMounted } = this.state;\n    if (!isMounted) return;\n    // get the channels for the proper community\n    const activeCommunityChannels = availableChannels.filter(\n      channel => channel.community.id === activeCommunity\n    );\n    let activeChannel = [];\n\n    // Get the active channel if there is one\n    if (props.activeChannel) {\n      activeChannel = activeCommunityChannels.filter(\n        channel =>\n          channel.slug.toLowerCase() === props.activeChannel.toLowerCase()\n      );\n    } else {\n      // Try and get the default channel for the active community\n      activeChannel = activeCommunityChannels.filter(\n        channel => channel.isDefault\n      );\n      // If there is no default channel capitulate and take the first one\n      if (activeChannel.length === 0) {\n        activeChannel = activeCommunityChannels;\n      } else if (activeChannel.length > 1) {\n        const generalChannel = activeChannel.filter(\n          channel => channel.slug === 'general'\n        );\n        if (generalChannel.length > 0) activeChannel = generalChannel;\n      }\n    }\n\n    // ensure that if no items were found for some reason, we don't crash the app\n    // and instead just set null values on the composer\n    activeChannel = activeChannel.length > 0 ? activeChannel[0].id : null;\n\n    this.setState({\n      title: props.title || '',\n      body: props.body || fromPlainText(''),\n      availableCommunities,\n      availableChannels,\n      activeCommunity,\n      activeChannel,\n      isPublishing: false,\n      linkPreview: null,\n      linkPreviewTrueUrl: '',\n      linkPreviewLength: 0,\n      fetchingLinkPreview: false,\n    });\n  };\n\n  componentDidMount() {\n    this.setState({ isMounted: true });\n    this.props.data.refetch().then(result => {\n      // we have to rebuild a new props object to pass to `this.handleIncomingProps`\n      // in order to retain all the previous props passed in from the parent\n      // component and the initial data functions provided by apollo\n      const newProps = Object.assign({}, this.props, {\n        ...this.props,\n        data: {\n          ...this.props.data,\n          user: {\n            ...this.props.data.user,\n            ...result.data.user,\n          },\n        },\n      });\n      this.handleIncomingProps(newProps);\n    });\n    this.refs.titleTextarea.focus();\n  }\n\n  componentWillUpdate(nextProps) {\n    const { isOpen } = nextProps;\n    if (isOpen) {\n      // $FlowIssue\n      document.addEventListener('keydown', this.handleKeyPress, false);\n    } else {\n      // $FlowIssue\n      document.removeEventListener('keydown', this.handleKeyPress, false);\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({ isMounted: false });\n    // $FlowIssue\n    document.removeEventListener('keydown', this.handleKeyPress, false);\n    const { postWasPublished } = this.state;\n\n    // if a post was published, in this session, clear redux so that the next\n    // composer open will start fresh\n    if (postWasPublished) return this.closeComposer('clear');\n\n    // otherwise, clear the composer normally and save the state\n    return this.closeComposer();\n  }\n\n  handleKeyPress = e => {\n    // if person taps esc, close the dialog\n    if (e.keyCode === 27) {\n      this.closeComposer();\n    }\n  };\n\n  changeTitle = e => {\n    const title = e.target.value;\n    if (/\\n$/g.test(title)) {\n      this.bodyEditor.focus();\n      return;\n    }\n    this.setState({\n      title,\n    });\n  };\n\n  changeBody = body => {\n    this.listenForUrl(body);\n    this.setState({\n      body,\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    const curr = this.props;\n    const { isMounted } = this.state;\n    if (!isMounted) return;\n    if (prevProps.isLoading && !curr.isLoading)\n      return this.handleIncomingProps(this.props);\n\n    const { availableCommunities, availableChannels } = this.state;\n    let activeCommunity;\n\n    if (prevProps.activeCommunity !== this.props.activeCommunity) {\n      activeCommunity = this.props.activeCommunity\n        ? availableCommunities.filter(community => {\n            return community.slug === this.props.activeCommunity;\n          })[0].id\n        : availableCommunities[0].id;\n\n      this.setState({\n        activeCommunity,\n      });\n    }\n\n    if (prevProps.activeChannel !== this.props.activeChannel) {\n      const activeCommunityChannels = availableChannels.filter(\n        channel => channel.community.id === activeCommunity\n      );\n      let activeChannel = [];\n\n      // Get the active channel if there is one\n      if (this.props.activeChannel) {\n        activeChannel = activeCommunityChannels.filter(\n          channel => channel.slug === this.props.activeChannel\n        );\n      } else {\n        // Try and get the default channel for the active community\n        activeChannel = activeCommunityChannels.filter(\n          channel => channel.isDefault\n        );\n        // If there is no default channel capitulate and take the first one\n        if (activeChannel.length === 0) {\n          activeChannel = activeCommunityChannels;\n          // If there are more than one default ones, try and choose the \"General\" one if it exists\n        } else if (activeChannel.length > 1) {\n          const generalChannel = activeChannel.filter(\n            channel => channel.slug === 'general'\n          );\n          if (generalChannel.length > 0) activeChannel = generalChannel;\n        }\n      }\n\n      // ensure that if no items were found for some reason, we don't crash the app\n      // and instead just set null values on the composer\n      activeChannel = activeChannel.length > 0 ? activeChannel[0].id : null;\n\n      this.setState({\n        activeChannel,\n      });\n    }\n  }\n\n  closeComposer = (clear?: string) => {\n    // we will clear the composer if it unmounts as a result of a post\n    // being published, that way the next composer open will start fresh\n    if (clear) return this.props.dispatch(closeComposer('', ''));\n\n    // otherwise, we will save the editor state to rehydrate the title and\n    // body if the user reopens the composer in the same session\n    const { title, body } = this.state;\n    this.props.dispatch(closeComposer(title, body));\n  };\n\n  setActiveCommunity = e => {\n    const newActiveCommunity = e.target.value;\n    const activeCommunityChannels = this.state.availableChannels.filter(\n      channel => channel.community.id === newActiveCommunity\n    );\n    const newActiveCommunityData = this.state.availableCommunities.find(\n      community => community.id === newActiveCommunity\n    );\n    const newActiveChannel =\n      activeCommunityChannels.find(channel => {\n        // If there is an active channel and we're switching back to the currently open community\n        // select that channel\n        if (\n          this.props.activeChannel &&\n          this.props.activeCommunity === newActiveCommunityData.slug\n        ) {\n          return channel.slug === this.props.activeChannel;\n        }\n        // Otherwise select the default one\n        return channel.isDefault;\n        // Default to the first channel if no default one can be found\n      }) || activeCommunityChannels[0];\n\n    this.setState({\n      activeCommunity: newActiveCommunity,\n      activeChannel: newActiveChannel.id,\n    });\n  };\n\n  setActiveChannel = e => {\n    const activeChannel = e.target.value;\n\n    this.setState({\n      activeChannel,\n    });\n  };\n\n  publishThread = () => {\n    // if no title and no channel is set, don't allow a thread to be published\n    if (!this.state.title || !this.state.activeChannel) {\n      return;\n    }\n\n    // isPublishing will change the publish button to a loading spinner\n    this.setState({\n      isPublishing: true,\n    });\n\n    // define new constants in order to construct the proper shape of the\n    // input for the publishThread mutation\n    const {\n      activeChannel,\n      activeCommunity,\n      title,\n      body,\n      linkPreview,\n      linkPreviewTrueUrl,\n    } = this.state;\n    const channelId = activeChannel;\n    const communityId = activeCommunity;\n    const jsonBody = toJSON(body);\n\n    const content = {\n      title,\n      body: JSON.stringify(jsonBody),\n    };\n\n    const attachments = [];\n    if (linkPreview) {\n      const attachmentData = JSON.stringify({\n        ...linkPreview,\n        trueUrl: linkPreviewTrueUrl,\n      });\n      attachments.push({\n        attachmentType: 'linkPreview',\n        data: attachmentData,\n      });\n    }\n\n    // Get the images\n    const filesToUpload = Object.keys(jsonBody.entityMap)\n      .filter(\n        key =>\n          jsonBody.entityMap[key].type === 'image' &&\n          jsonBody.entityMap[key].data.file &&\n          jsonBody.entityMap[key].data.file.constructor === File\n      )\n      .map(key => jsonBody.entityMap[key].data.file);\n\n    // this.props.mutate comes from a higher order component defined at the\n    // bottom of this file\n    this.props\n      .mutate({\n        variables: {\n          thread: {\n            channelId,\n            communityId,\n            type: 'DRAFTJS',\n            content,\n            attachments,\n            filesToUpload,\n          },\n        },\n      })\n      // after the mutation occurs, it will either return an error or the new\n      // thread that was published\n      .then(({ data }) => {\n        // get the thread id to redirect the user\n        const id = data.publishThread.id;\n\n        track('thread', 'published', null);\n\n        // stop the loading spinner on the publish button\n        this.setState({\n          postWasPublished: true,\n          isPublishing: false,\n        });\n\n        // redirect the user to the thread\n        // if they are in the inbox, select it\n        this.props.isInbox\n          ? this.props.dispatch(changeActiveThread(id))\n          : this.props.history.push(`?thread=${id}`);\n\n        this.props.dispatch(\n          addToastWithTimeout('success', 'Thread published!')\n        );\n\n        this.props.dispatch(closeComposer('', ''));\n      })\n      .catch(err => {\n        this.setState({\n          isPublishing: false,\n        });\n        this.props.dispatch(addToastWithTimeout('error', err.message));\n      });\n  };\n\n  listenForUrl = state => {\n    const { linkPreview, linkPreviewLength } = this.state;\n    if (linkPreview !== null) return;\n\n    const lastChangeType = state.getLastChangeType();\n    if (\n      lastChangeType !== 'backspace-character' &&\n      lastChangeType !== 'insert-characters'\n    ) {\n      return;\n    }\n\n    const text = toPlainText(state);\n\n    if (!ENDS_IN_WHITESPACE.test(text)) return;\n\n    const toCheck = text.match(URLS);\n\n    if (toCheck) {\n      const len = toCheck.length;\n      if (linkPreviewLength === len) return; // no new links, don't recheck\n\n      let urlToCheck = toCheck[len - 1].trim();\n\n      if (!/^https?:\\/\\//i.test(urlToCheck)) {\n        urlToCheck = 'https://' + urlToCheck;\n      }\n\n      if (!isURL(urlToCheck)) return;\n      this.setState({ fetchingLinkPreview: true });\n\n      getLinkPreviewFromUrl(urlToCheck)\n        .then(data => {\n          this.setState(prevState => ({\n            linkPreview: { ...data, trueUrl: urlToCheck },\n            linkPreviewTrueUrl: urlToCheck,\n            linkPreviewLength: prevState.linkPreviewLength + 1,\n            fetchingLinkPreview: false,\n            error: null,\n          }));\n        })\n        .catch(err => {\n          this.setState({\n            error:\n              \"Oops, that URL didn't seem to want to work. You can still publish your story anyways 👍\",\n            fetchingLinkPreview: false,\n          });\n        });\n    }\n  };\n\n  removeLinkPreview = () => {\n    this.setState({\n      linkPreview: null,\n      linkPreviewTrueUrl: null,\n    });\n  };\n\n  render() {\n    const {\n      title,\n      availableChannels,\n      availableCommunities,\n      activeCommunity,\n      activeChannel,\n      isPublishing,\n      linkPreview,\n      linkPreviewTrueUrl,\n      fetchingLinkPreview,\n    } = this.state;\n\n    const { isOpen, isLoading, isInbox } = this.props;\n\n    if (availableCommunities && availableChannels) {\n      return (\n        <Container isOpen={isOpen} isInbox={isInbox}>\n          <Overlay\n            isOpen={isOpen}\n            onClick={this.closeComposer}\n            isInbox={isInbox}\n          />\n          <Composer isOpen={isOpen} isInbox={isInbox}>\n            <ContentContainer isOpen={isOpen}>\n              <Textarea\n                onChange={this.changeTitle}\n                style={ThreadTitle}\n                value={this.state.title}\n                placeholder={'A title for your conversation...'}\n                ref=\"titleTextarea\"\n                autoFocus\n              />\n\n              <Editor\n                onChange={this.changeBody}\n                state={this.state.body}\n                style={ThreadDescription}\n                editorRef={editor => (this.bodyEditor = editor)}\n                editorKey=\"thread-composer\"\n                placeholder=\"Write more thoughts here...\"\n                className={'threadComposer'}\n                showLinkPreview={true}\n                linkPreview={{\n                  loading: fetchingLinkPreview,\n                  remove: this.removeLinkPreview,\n                  trueUrl: linkPreviewTrueUrl,\n                  data: linkPreview,\n                }}\n              />\n\n              <Actions>\n                <FlexRow>\n                  <Dropdowns>\n                    <select\n                      onChange={this.setActiveCommunity}\n                      value={activeCommunity}\n                    >\n                      {availableCommunities.map(community => {\n                        return (\n                          <option key={community.id} value={community.id}>\n                            {community.name}\n                          </option>\n                        );\n                      })}\n                    </select>\n                    <select\n                      onChange={this.setActiveChannel}\n                      value={activeChannel}\n                    >\n                      {availableChannels\n                        .filter(\n                          channel => channel.community.id === activeCommunity\n                        )\n                        .map((channel, i) => {\n                          return (\n                            <option key={channel.id} value={channel.id}>\n                              {channel.name}\n                            </option>\n                          );\n                        })}\n                    </select>\n                  </Dropdowns>\n                </FlexRow>\n                <FlexRow>\n                  <TextButton\n                    hoverColor=\"warn.alt\"\n                    onClick={this.closeComposer}\n                  >\n                    Cancel\n                  </TextButton>\n                  <Button\n                    onClick={this.publishThread}\n                    loading={isPublishing}\n                    disabled={!title || isPublishing}\n                    color={'brand'}\n                  >\n                    Publish\n                  </Button>\n                </FlexRow>\n              </Actions>\n            </ContentContainer>\n          </Composer>\n        </Container>\n      );\n    }\n\n    if (isLoading) {\n      return <LoadingComposer />;\n    }\n\n    return null;\n  }\n}\n\nconst map = state => ({\n  isOpen: state.composer.isOpen,\n  title: state.composer.title,\n  body: state.composer.body,\n});\nexport default compose(\n  // $FlowIssue\n  connect(map),\n  getComposerCommunitiesAndChannels,\n  publishThread,\n  viewNetworkHandler,\n  withRouter\n)(ThreadComposerWithData);\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadComposer/components/composer.js","// @flow\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { openComposer } from '../../../actions/composer';\nimport Icon from '../../icons';\nimport { Container, Composer, Placeholder, PlaceholderLabel } from '../style';\nimport Upsell from './upsell';\n\ntype Props = {\n  dispatch: Function,\n  isOpen: boolean,\n  isInbox: boolean,\n  showCommunityOwnerUpsell: boolean,\n};\nclass ComposerPlaceholder extends React.Component<Props> {\n  render() {\n    const { isOpen, showCommunityOwnerUpsell, isInbox, dispatch } = this.props;\n\n    return (\n      <Container isOpen={isOpen} isInbox={isInbox}>\n        <Composer\n          isOpen={isOpen}\n          onClick={() => dispatch(openComposer())}\n          isInbox={isInbox}\n        >\n          {!isOpen && showCommunityOwnerUpsell && <Upsell />}\n          <Placeholder isOpen={isOpen}>\n            <Icon glyph=\"post\" onboarding=\"foo\" tipLocation=\"top\" />\n            <PlaceholderLabel>Start a new conversation...</PlaceholderLabel>\n          </Placeholder>\n        </Composer>\n      </Container>\n    );\n  }\n}\nexport default connect()(ComposerPlaceholder);\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadComposer/components/placeholder.js","// @flow\nimport * as React from 'react';\nimport { ComposerUpsell, UpsellPulse, UpsellDot } from '../style';\n\nexport default class Upsell extends React.Component<{}> {\n  render() {\n    return (\n      <ComposerUpsell>\n        <UpsellDot />\n        <UpsellPulse />\n        <p>Create a thread to get a conversation started in your community.</p>\n      </ComposerUpsell>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadComposer/components/upsell.js","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ComposerPlaceholder from './components/placeholder';\nimport ComposerEditor from './components/composer';\n\nclass ThreadComposerWithData extends Component {\n  render() {\n    const {\n      isOpen,\n      isInbox,\n      showComposerUpsell,\n      activeCommunity,\n      activeChannel,\n    } = this.props;\n    const showCommunityOwnerUpsell = showComposerUpsell || false;\n\n    return isOpen ? (\n      <ComposerEditor\n        activeCommunity={activeCommunity}\n        activeChannel={activeChannel}\n      />\n    ) : (\n      <ComposerPlaceholder\n        isInbox={isInbox}\n        isOpen={isOpen}\n        showCommunityOwnerUpsell={showCommunityOwnerUpsell}\n      />\n    );\n  }\n}\n\nconst map = state => ({ isOpen: state.composer.isOpen });\nexport default connect(map)(ThreadComposerWithData);\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadComposer/index.js","// @flow\n// $FlowFixMe\nimport { graphql, gql } from 'react-apollo';\nimport { threadInfoFragment } from '../../api/fragments/thread/threadInfo';\n\nexport const publishThread = graphql(\n  gql`\n    mutation publishThread($thread: ThreadInput!) {\n      publishThread(thread: $thread) {\n        # When a thread is published, we want to return extra metadata about\n        # the new thread to handle a few downstream operations:\n        #\n        # First, when a thread is published, we notify the dashboard 'everything'\n        # query and insert the new thread into the threads list. That way if a\n        # user publishes a thread and navigates to the homepage, their thread will\n        # appear without needing to refetch\n        #\n        # Additionally, we want to get back the channelId and communityId\n        # so that the community and channel the thread is posted under can\n        # trigger their reducers and automatically add the new thread to the\n        # store. See 'views/community/queries.js' for an example of this\n        # reducer operation in use.\n        #\n        # The underlying goal here is to ensure that when a thread is published,\n        # it will appear in all the feeds a user would expect it to appear\n        # and play nicely with Apollo in th event that a feed was previously\n        # fetched and cached\n        ...threadInfo\n        channel {\n          id\n          slug\n          community {\n            id\n            slug\n          }\n        }\n      }\n    }\n    ${threadInfoFragment}\n  `\n);\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadComposer/mutations.js","// @flow\n// $FlowFixMe\nimport { graphql, gql } from 'react-apollo';\nimport { userInfoFragment } from '../../api/fragments/user/userInfo';\n\nexport const GET_COMPOSER_COMMUNITIES_AND_CHANNELS_QUERY = gql`\nquery getComposerCommunitiesAndChannels {\n  # Not using the communityConnection or channelConnection fragments here\n  # because for this particular scenario I'm only trying to return much\n  # deeper nested data in order to handle channel + community selection in\n  # the composer\n  #\n  # TODO: Eventually we should run one query at app initialization for all of\n  # a user's communities + channels, save that in the thread somewhere, and\n  # use it to hydrate the composer here, as well as use the data to handle\n  # join/leave, follow/unfollow buttons, etc. as the user browsers around\n  # to different threads, channels, and users.\n  user: currentUser {\n    ...userInfo\n    communityConnection {\n      edges {\n        node {\n          id\n          name\n          slug\n          communityPermissions {\n            isMember\n            isBlocked\n            isOwner\n            isModerator\n          }\n        }\n      }\n    }\n    channelConnection {\n      edges {\n        node {\n          id\n          name\n          slug\n          isDefault\n          isPrivate\n          community {\n            id\n            isPro\n          }\n          channelPermissions {\n            isMember\n            isPending\n            isBlocked\n            isOwner\n            isModerator\n          }\n        }\n      }\n    }\n  }\n}\n${userInfoFragment}\n`;\n\nexport const getComposerCommunitiesAndChannels = graphql(\n  GET_COMPOSER_COMMUNITIES_AND_CHANNELS_QUERY,\n  { options: { fetchPolicy: 'cache-first' } }\n);\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadComposer/queries.js","import styled, { keyframes } from 'styled-components';\nimport { Card } from '../card';\nimport { Transition, hexa, Shadow, FlexRow, FlexCol, zIndex } from '../globals';\n\nexport const Container = styled(FlexRow)`\n  align-self: stretch;\n  display: flex;\n  justify-content: center;\n\n  @media (max-width: 768px) {\n    display: ${props => (props.isOpen ? 'block' : 'none')};\n    position: fixed;\n    height: calc(100vh - 56px);\n    width: 100%;\n    top: 8px;\n    flex-direction: column;\n    justify-content: flex-start;\n    z-index: ${zIndex.composer};\n  }\n`;\n\nexport const Composer = styled(Card)`\n  margin-bottom: 16px;\n  position: relative;\n  z-index: ${props => (props.isInbox ? '3001' : zIndex.composer)};\n  width: 100%;\n  display: block;\n  min-height: 64px;\n  border-radius: 12px;\n  transition: ${Transition.hover.off};\n\n  &:hover {\n    transition: none;\n    box-shadow: ${Shadow.high}\n      ${({ theme }) => hexa(theme.text.placeholder, 0.5)};\n  }\n\n  @media (max-width: 768px) {\n    width: calc(100% - 16px);\n    margin: 48px 8px;\n    height: calc(100% - 112px);\n    min-height: 240px;\n    pointer-events: all;\n  }\n`;\n\nexport const Overlay = styled.div`\n  ${props =>\n    props.isOpen\n      ? `\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      width: 100%;\n      height: 100%;\n      z-index: ${props.isInbox ? '3000' : zIndex.composer - 1};\n      background: #000;\n      pointer-events: auto;\n      opacity: 0.4;\n    `\n      : `\n      opacity: 0;\n      pointer-events: none;\n\n    `};\n`;\n\nexport const Placeholder = styled.div`\n  ${/* either the placeholder *or* the content container shows at a time. */ ''} display: ${props =>\n      props.isOpen ? 'none' : 'flex'};\n  justify-content: flex-start;\n  align-items: center;\n  cursor: pointer;\n  padding: 16px;\n  color: ${props => props.theme.text.alt};\n  transition: ${Transition.hover.off};\n\n  &:hover {\n    transition: ${Transition.hover.on};\n    color: ${props => props.theme.brand.alt};\n  }\n\n  @media (max-width: 768px) {\n    opacity: 0;\n  }\n`;\n\nexport const PlaceholderLabel = styled.h3`\n  font-size: 20px;\n  font-weight: 800;\n  margin-left: 8px;\n`;\n\nexport const ContentContainer = styled.div`\n  display: ${props => (props.isOpen ? 'block' : 'none')};\n\n  @media (max-width: 768px) {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const Actions = styled(FlexCol)`\n  background: #f8fbfe;\n  border-top: 2px solid ${props => props.theme.bg.border};\n  padding: 8px 8px 8px 0;\n  border-radius: 0 0 12px 12px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n\n  @media (max-width: 768px) {\n    position: absolute;\n    bottom: 0;\n    flex-direction: column;\n    align-items: flex-end;\n    padding: 8px;\n  }\n`;\n\nexport const Dropdowns = styled(FlexRow)`\n  display: flex;\n  align-items: center;\n  margin-bottom: 16px;\n\n  select {\n    max-width: 224px;\n    display: block;\n    padding: 8px 12px;\n    border: none;\n    border: 2px solid ${props => props.theme.bg.border};\n    border-radius: 8px;\n    box-shadow: none;\n    color: ${props => props.theme.text.default};\n    font-weight: 600;\n    font-size: 14px;\n    box-sizing: border-box;\n    background-color: #fff;\n    background-image: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    cursor: pointer;\n    margin-left: 8px;\n  }\n\n  @media (max-width: 768px) {\n    width: 100%;\n    justify-content: flex-start;\n    margin-bottom: 8px;\n\n    select:nth-of-type(2) {\n        flex: 1 0 auto;\n        margin-left: 4px;\n      }\n    }\n  }\n`;\n\nexport const ComposerUpsell = styled.div`\n  position: relative;\n  padding: 4px 16px;\n  background: ${props => props.theme.brand.alt};\n  border-bottom: 2px solid ${props => props.theme.brand.alt};\n  color: #fff;\n  text-align: center;\n  border-radius: 12px 12px 0 0;\n\n  p {\n    font-size: 14px;\n    font-weight: 700;\n  }\n`;\n\nexport const UpsellPulse = styled.div`\n  width: 10px;\n  height: 10px;\n  border: 5px solid ${props => props.theme.brand.alt};\n  -webkit-border-radius: 30px;\n  -moz-border-radius: 30px;\n  border-radius: 30px;\n  background-color: ${props => props.theme.brand.alt};\n  z-index: ${zIndex.composer};\n  position: absolute;\n  top: -4px;\n  left: -4px;\n  box-shadow: 0 0 0 2px #fff;\n`;\n\nconst pulse = keyframes`\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    opacity: 0.0;\n  }\n  25% {\n    -webkit-transform: scale(0);\n      -moz-transform: scale(0);\n      opacity: 0.1;\n  }\n  50% {\n      -webkit-transform: scale(0.1);\n      -moz-transform: scale(0.1);\n      opacity: 0.3;\n  }\n  75% {\n      -webkit-transform: scale(0.5);\n      -moz-transform: scale(0.5);\n      opacity: 0.5;\n  }\n  100% {\n      -webkit-transform: scale(1);\n      -moz-transform: scale(1);\n      opacity: 0.0;\n  }\n`;\n\nexport const UpsellDot = styled.div`\n  border: 10px solid ${props => props.theme.brand.default};\n  background: transparent;\n  -webkit-border-radius: 60px;\n  -moz-border-radius: 60px;\n  border-radius: 60px;\n  height: 50px;\n  width: 50px;\n  -webkit-animation: ${pulse} 3s ease-out;\n  -moz-animation: ${pulse} 3s ease-out;\n  animation: ${pulse} 3s ease-out;\n  -webkit-animation-iteration-count: infinite;\n  -moz-animation-iteration-count: infinite;\n  animation-iteration-count: infinite;\n  position: absolute;\n  top: -24px;\n  left: -24px;\n  z-index: ${zIndex.composer};\n  opacity: 0;\n`;\n\n// these are style objects because i'm custom styling another react component to handle autoresizing\n\nexport const ThreadTitle = {\n  fontSize: '20px',\n  padding: '16px 24px 0 24px',\n  outline: 'none',\n  border: '0',\n  lineHeight: '1.4',\n  fontWeight: '800',\n  boxShadow: 'none',\n  width: '100%',\n  color: '#171A21',\n  whiteSpace: 'pre-wrap',\n  borderRadius: '12px 12px 0 0',\n};\n\nexport const ThreadDescription = {\n  fontSize: '16px',\n  fontWeight: '500',\n  width: '100%',\n  height: 'calc(100% - 132px)',\n  display: 'inline-block',\n  lineHeight: '1.5',\n  padding: '0 24px 24px 24px',\n  outline: 'none',\n  border: '0',\n  boxShadow: 'none',\n  color: '#171A21',\n  whiteSpace: 'pre-wrap',\n  overflowY: 'scroll',\n  position: 'relative',\n  top: '6px',\n};\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadComposer/style.js","import React, { Component } from 'react';\n//$FlowFixMe\nimport styled from 'styled-components';\n//$FlowFixMe\nimport compose from 'recompose/compose';\n// NOTE(@mxstbr): This is a custom fork published of off this (as of this writing) unmerged PR: https://github.com/CassetteRocks/react-infinite-scroller/pull/38\n// I literally took it, renamed the package.json and published to add support for scrollElement since our scrollable container is further outside\nimport InfiniteList from 'react-infinite-scroller-with-scroll-element';\nimport { connect } from 'react-redux';\nimport { ImportSlackWithoutCard } from '../../views/communitySettings/components/importSlack';\nimport { CommunityInvitationForm } from '../emailInvitationForm';\nimport Share from '../../views/newCommunity/components/share';\nimport ThreadFeedCard from '../threadFeedCard';\nimport { Card } from '../card';\nimport { NullCard } from '../upsell';\nimport { LoadingThread } from '../loading';\nimport { Divider } from './style';\nimport NewActivityIndicator from '../../components/newActivityIndicator';\nimport ViewError from '../viewError';\n\nconst NullState = () => (\n  <NullCard\n    bg=\"post\"\n    heading={`Sorry, no threads here yet...`}\n    copy={`But you could start one!`}\n  />\n);\n\nconst UpsellState = ({ community }) => {\n  return (\n    <NullCard\n      bg=\"onboarding\"\n      repeat\n      heading={'Every community has to start somewhere...'}\n      copy={`${\n        community.name\n      } just needs more friends - invite people to your community to get a conversation started!`}\n    >\n      <Share community={community} onboarding={false} />\n      <Divider />\n      <CommunityInvitationForm id={community.id} />\n      <Divider />\n      <ImportSlackWithoutCard community={community} id={community.id} />\n    </NullCard>\n  );\n};\n\nconst Threads = styled.div`\n  min-width: 100%;\n\n  button {\n    align-self: center;\n    margin: auto;\n  }\n\n  @media (max-width: 768px) {\n  }\n`;\n\n/*\n  The thread feed always expects a prop of 'threads' - this means that in\n  the Apollo query contructor, you will need to map a new prop called 'threads'\n  to return whatever threads we're fetching (community -> threadsConnection)\n\n  See 'views/community/queries.js' for an example of the prop mapping in action\n*/\nclass ThreadFeedPure extends Component {\n  state: {\n    scrollElement: any,\n    subscription: ?Function,\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      scrollElement: null,\n      subscription: null,\n    };\n  }\n\n  subscribe = () => {\n    this.setState({\n      subscription:\n        this.props.data.subscribeToUpdatedThreads &&\n        this.props.data.subscribeToUpdatedThreads(),\n    });\n  };\n\n  unsubscribe = () => {\n    const { subscription } = this.state;\n    if (subscription) {\n      // This unsubscribes the subscription\n      subscription();\n    }\n  };\n\n  shouldComponentUpdate(nextProps) {\n    const curr = this.props;\n    // fetching more\n    if (curr.data.networkStatus === 7 && nextProps.data.networkStatus === 3)\n      return false;\n    return true;\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  componentDidMount() {\n    this.setState({\n      // NOTE(@mxstbr): This is super un-reacty but it works. This refers to\n      // the AppViewWrapper which is the scrolling part of the site.\n      scrollElement: document.getElementById('scroller-for-thread-feed'),\n    });\n    this.subscribe();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      !prevProps.data.thread &&\n      this.props.data.threads &&\n      this.props.data.threads.length === 0\n    ) {\n      // if there are no threads, tell the parent container so that we can render upsells to community owners in the parent container\n      if (this.props.setThreadsStatus) {\n        this.props.setThreadsStatus();\n      }\n\n      if (this.props.hasThreads) {\n        this.props.hasThreads();\n      }\n\n      if (this.props.hasNoThreads) {\n        this.props.hasNoThreads();\n      }\n    }\n  }\n\n  render() {\n    const {\n      data: { threads, networkStatus, error },\n      viewContext,\n      newActivityIndicator,\n    } = this.props;\n\n    const { scrollElement } = this.state;\n    const dataExists = threads && threads.length > 0;\n    const isCommunityMember =\n      this.props.community &&\n      (this.props.community.communityPermissions.isMember ||\n        this.props.community.communityPermissions.isOwner ||\n        this.props.community.communityPermissions.isModerator) &&\n      !this.props.community.communityPermissions.isBlocked;\n\n    const threadNodes = dataExists\n      ? threads.slice().map(thread => thread.node)\n      : [];\n\n    let filteredThreads = threadNodes;\n    if (\n      this.props.data.community &&\n      this.props.data.community.watercooler &&\n      this.props.data.community.watercooler.id\n    ) {\n      filteredThreads = filteredThreads.filter(\n        t => t.id !== this.props.data.community.watercooler.id\n      );\n    }\n    if (\n      this.props.data.community &&\n      this.props.data.community.pinnedThread &&\n      this.props.data.community.pinnedThread.id\n    ) {\n      filteredThreads = filteredThreads.filter(\n        t => t.id !== this.props.data.community.pinnedThread.id\n      );\n    }\n\n    if (dataExists) {\n      return (\n        <Threads data-e2e-id=\"thread-feed\">\n          {newActivityIndicator && (\n            <NewActivityIndicator elem=\"scroller-for-thread-feed\" />\n          )}\n\n          {this.props.data.community &&\n            this.props.data.community.pinnedThread &&\n            this.props.data.community.pinnedThread.id && (\n              <ThreadFeedCard\n                data={this.props.data.community.pinnedThread}\n                viewContext={viewContext}\n                isPinned={true}\n              />\n            )}\n\n          {this.props.data.community &&\n            this.props.data.community.watercooler &&\n            this.props.data.community.watercooler.id && (\n              <ThreadFeedCard\n                data={this.props.data.community.watercooler}\n                viewContext={viewContext}\n              />\n            )}\n\n          <InfiniteList\n            pageStart={0}\n            loadMore={this.props.data.fetchMore}\n            hasMore={this.props.data.hasNextPage}\n            loader={<LoadingThread />}\n            useWindow={false}\n            initialLoad={false}\n            scrollElement={scrollElement}\n            threshold={750}\n          >\n            {filteredThreads.map(thread => {\n              return (\n                <ThreadFeedCard\n                  key={thread.id}\n                  data={thread}\n                  viewContext={viewContext}\n                />\n              );\n            })}\n          </InfiniteList>\n        </Threads>\n      );\n    }\n\n    if (networkStatus <= 2) {\n      return (\n        <Threads>\n          <LoadingThread />\n          <LoadingThread />\n          <LoadingThread />\n          <LoadingThread />\n          <LoadingThread />\n          <LoadingThread />\n          <LoadingThread />\n          <LoadingThread />\n          <LoadingThread />\n          <LoadingThread />\n        </Threads>\n      );\n    }\n\n    if (networkStatus === 8 || error) {\n      return (\n        <Card>\n          <ViewError\n            heading={'We ran into an issue loading the feed'}\n            subheading={\n              'Try refreshing the page below. If you’re still seeing this error, you can email us at hi@spectrum.chat.'\n            }\n            refresh\n          />\n        </Card>\n      );\n    }\n\n    if (this.props.isNewAndOwned) {\n      return <UpsellState community={this.props.community} />;\n    } else if (isCommunityMember || this.props.viewContext === 'channel') {\n      return <NullState />;\n    } else {\n      return null;\n    }\n  }\n}\n\nconst map = state => ({\n  newActivityIndicator: state.newActivityIndicator.hasNew,\n});\nconst ThreadFeed = compose(connect(map))(ThreadFeedPure);\n\nexport default ThreadFeed;\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadFeed/index.js","// @flow\n// $FlowFixMe\nimport styled from 'styled-components';\nimport { OutlineButton } from '../buttons';\n\nexport const FetchMoreButton = styled(OutlineButton)`\n  width: 100%;\n  padding: 16px 0;\n\n  @media (max-width: 768px) {\n    padding: 32px 0;\n    border-radius: 0;\n    background: #fff;\n    font-size: 16px;\n    font-weight: 600;\n    color: ${props => props.theme.brand.default};\n    border: none;\n    box-shadow: none;\n    border-top: 2px solid ${props => props.theme.bg.border};\n\n    &:hover {\n      background: ${props => props.theme.bg.wash};\n      border-radius: 0;\n      box-shadow: none;\n    }\n  }\n`;\n\nexport const Divider = styled.div`\n  border-bottom: 2px solid ${props => props.theme.bg.border};\n  width: 100%;\n  display: block;\n  padding-top: 24px;\n  margin-bottom: 24px;\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadFeed/style.js","import React from 'react';\nimport Avatar from '../../components/avatar';\nimport { ParticipantHeads, ParticipantCount, Creator } from './style';\n\nconst messageAvatars = list => {\n  const avatarList = list.slice(0, 5);\n\n  return avatarList.map(participant => (\n    <Avatar\n      size={32}\n      isOnline={participant.isOnline}\n      link={participant.username ? `/users/${participant.username}` : null}\n      src={participant.profilePhoto}\n      role=\"presentation\"\n      key={participant.id}\n      user={participant}\n    />\n  ));\n};\n\nconst FacePile = props => {\n  const { data: { creator, participants } } = props;\n  const participantList = participants.filter(\n    participant => participant.id !== creator.id\n  );\n  const participantCount = participants.length;\n\n  return (\n    <ParticipantHeads>\n      <Creator role=\"presentation\">\n        <Avatar\n          size={32}\n          user={creator}\n          isOnline={creator.isOnline}\n          link={creator.username ? `/users/${creator.username}` : null}\n          src={creator.profilePhoto}\n          role=\"presentation\"\n          key={creator.id}\n        />\n      </Creator>\n      {messageAvatars(participantList)}\n      {participantCount > 6 && (\n        <ParticipantCount>{`+${participantCount - 6}`}</ParticipantCount>\n      )}\n    </ParticipantHeads>\n  );\n};\n\nexport default FacePile;\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadFeedCard/facePile.js","import React from 'react';\n// $FlowFixMe\nimport Link from 'src/components/link';\nimport Icon from '../../components/icons';\nimport Avatar from '../../components/avatar';\nimport {\n  ThreadContext,\n  ThreadContextAvatar,\n  ThreadContextMeta,\n  Location,\n  Lock,\n} from './style';\n\nconst FormattedThreadLocation = props => {\n  const needsCommunityDetails =\n    props.viewContext === 'dashboard' || props.viewContext === 'profile';\n\n  const needsChannelDetails =\n    props.viewContext === 'dashboard' ||\n    props.viewContext === 'profile' ||\n    props.viewContext === 'community';\n\n  return (\n    <ThreadContext>\n      {needsCommunityDetails && (\n        <ThreadContextAvatar>\n          <Avatar\n            community={props.data.community}\n            size={20}\n            radius={8}\n            src={props.data.community.profilePhoto}\n          />\n        </ThreadContextAvatar>\n      )}\n      <ThreadContextMeta>\n        {(needsCommunityDetails || needsChannelDetails) && (\n            <Location>\n              {needsCommunityDetails && (\n                <Link to={`/${props.data.community.slug}`}>\n                  {props.data.community.name}\n                </Link>\n              )}\n              {needsCommunityDetails &&\n                needsChannelDetails && <span>{' / '}</span>}\n              {needsChannelDetails && (\n                <Link\n                  to={`/${props.data.community.slug}/${props.data.channel\n                    .slug}`}\n                >\n                  {props.data.channel.isPrivate && (\n                    <Lock>\n                      <Icon\n                        glyph=\"private\"\n                        tipText={'Private channel'}\n                        tipLocation=\"top-right\"\n                        size={12}\n                      />\n                    </Lock>\n                  )}\n                  {props.data.channel.name}\n                </Link>\n              )}\n            </Location>\n          )}\n      </ThreadContextMeta>\n    </ThreadContext>\n  );\n};\n\nexport default FormattedThreadLocation;\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadFeedCard/formattedThreadLocation.js","// @flow\nimport React from 'react';\nimport truncate from 'shared/truncate';\nimport compose from 'recompose/compose';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Link from 'src/components/link';\nimport { LinkPreview } from '../../components/linkPreview';\nimport Icon from '../../components/icons';\nimport FacePile from './facePile';\nimport FormattedThreadLocation from './formattedThreadLocation';\nimport {\n  StyledThreadFeedCard,\n  CardContent,\n  CardLink,\n  Title,\n  MessageCount,\n  Attachments,\n  Pinned,\n  PinnedBanner,\n  PinnedIconWrapper,\n  ContentInfo,\n  MetaNew,\n} from './style';\n\nconst ThreadFeedCardPure = (props: Object): React$Element<any> => {\n  const { location: { pathname }, data: { attachments, participants } } = props;\n  const attachmentsExist = attachments && attachments.length > 0;\n  const participantsExist = participants && participants.length > 0;\n\n  return (\n    <StyledThreadFeedCard>\n      <CardLink\n        to={{\n          pathname: pathname,\n          search: `?thread=${props.data.id}`,\n        }}\n      />\n      <CardContent>\n        <FormattedThreadLocation {...props} />\n        <Link\n          to={{\n            pathname: pathname,\n            search: `?thread=${props.data.id}`,\n          }}\n        >\n          <Title>{truncate(props.data.content.title, 80)}</Title>\n          {props.isPinned && (\n            <Pinned>\n              <PinnedBanner />\n              <PinnedIconWrapper>\n                <Icon glyph=\"pin-fill\" size={24} />\n              </PinnedIconWrapper>\n            </Pinned>\n          )}\n        </Link>\n        {attachmentsExist &&\n          attachments.map((attachment, i) => {\n            if (attachment.attachmentType === 'linkPreview') {\n              return (\n                <Attachments key={i}>\n                  <LinkPreview\n                    trueUrl={attachment.data.trueUrl}\n                    data={JSON.parse(attachment.data)}\n                    size={'small'}\n                    editable={false}\n                    margin={'8px 0 12px'}\n                  />\n                </Attachments>\n              );\n            } else {\n              return null;\n            }\n          })}\n        <ContentInfo>\n          {participantsExist && <FacePile {...props} />}\n          {props.data.messageCount > 0 ? (\n            <MessageCount>\n              <Icon size={20} glyph=\"message-fill\" />\n              <span>{props.data.messageCount}</span>\n            </MessageCount>\n          ) : (\n            <MetaNew>\n              <Icon size={20} glyph=\"notification-fill\" />\n              <span>Fresh thread!</span>\n            </MetaNew>\n          )}\n        </ContentInfo>\n      </CardContent>\n    </StyledThreadFeedCard>\n  );\n};\n\nconst ThreadFeedCard = compose(withRouter)(ThreadFeedCardPure);\nexport default connect()(ThreadFeedCard);\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadFeedCard/index.js","// @flow\nimport React, { Component } from 'react';\n// $FlowFixMe\nimport compose from 'recompose/compose';\n// $FlowFixMe\nimport { connect } from 'react-redux';\n// $FlowFixMe\nimport Link from 'src/components/link';\nimport { track } from '../../helpers/events';\nimport { toggleChannelSubscriptionMutation } from '../../api/channel';\nimport { addToastWithTimeout } from '../../actions/toasts';\nimport { Button, OutlineButton } from '../buttons';\nimport { Actions } from './style';\n\ntype Props = {\n  isPending: boolean,\n  community: Object,\n  channel: Object,\n  toggleChannelSubscription: Function,\n  dispatch: Function,\n};\n\ntype State = {\n  isLoading: boolean,\n};\n\nclass RequestToJoinChannel extends Component<Props, State> {\n  state: {\n    isLoading: boolean,\n  };\n\n  constructor() {\n    super();\n\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  toggleRequest = () => {\n    const { toggleChannelSubscription, dispatch, channel } = this.props;\n    const channelId = channel.id;\n\n    this.setState({\n      isLoading: true,\n    });\n\n    toggleChannelSubscription({ channelId })\n      .then(({ data: { toggleChannelSubscription } }) => {\n        this.setState({\n          isLoading: false,\n        });\n\n        const { isPending } = toggleChannelSubscription.channelPermissions;\n\n        if (isPending) {\n          track('channel', 'requested to join', null);\n        } else {\n          track('channel', 'cancelled request to join', null);\n        }\n\n        const str = isPending\n          ? `Requested to join ${toggleChannelSubscription.name} in ${toggleChannelSubscription\n              .community.name}!`\n          : `Canceled request to join ${toggleChannelSubscription.name} in ${toggleChannelSubscription\n              .community.name}.`;\n\n        const type = isPending ? 'success' : 'neutral';\n        dispatch(addToastWithTimeout(type, str));\n      })\n      .catch(err => {\n        this.setState({\n          isLoading: false,\n        });\n\n        dispatch(addToastWithTimeout('error', err.message));\n      });\n  };\n\n  render() {\n    const { isPending, community, channel } = this.props;\n    const { isLoading } = this.state;\n\n    return (\n      <Actions>\n        {isPending && (\n          <OutlineButton\n            large\n            onClick={this.toggleRequest}\n            icon=\"minus\"\n            loading={isLoading}\n            label\n          >\n            Cancel request\n          </OutlineButton>\n        )}\n\n        {isPending && (\n          <Link to={`/${community.slug}`}>\n            <Button large>Back to {community.name}</Button>\n          </Link>\n        )}\n\n        {!isPending && (\n          <Button\n            large\n            onClick={this.toggleRequest}\n            icon=\"private-unlocked\"\n            loading={isLoading}\n            label\n          >\n            Request to join {channel.name}\n          </Button>\n        )}\n      </Actions>\n    );\n  }\n}\n\nexport default compose(connect(), toggleChannelSubscriptionMutation)(\n  RequestToJoinChannel\n);\n\n\n\n// WEBPACK FOOTER //\n// src/components/upsell/requestToJoinChannel.js","// @flow\nimport * as React from 'react';\n// $FlowFixMe\nimport compose from 'recompose/compose';\n// $FlowFixMe\nimport { connect } from 'react-redux';\nimport { toggleChannelNotificationsMutation } from '../../../api/channel';\nimport { Checkbox } from '../../../components/formElements';\nimport { addToastWithTimeout } from '../../../actions/toasts';\nimport {\n  StyledCard,\n  ListHeader,\n  ListHeading,\n  ListContainer,\n} from '../../../components/listItems/style';\n\ntype Props = {\n  value: boolean,\n  channel: {\n    id: string,\n    name: string,\n  },\n  toggleChannelNotifications: Function,\n  dispatch: Function,\n};\n\ntype State = {\n  isReceiving: boolean,\n};\n\nclass NotificationsTogglePure extends React.Component<Props, State> {\n  state: {\n    isReceiving: boolean,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const isReceiving = props.value;\n    this.state = {\n      isReceiving,\n    };\n  }\n\n  handleChange = () => {\n    const { channel: { id } } = this.props;\n    const { isReceiving } = this.state;\n    this.setState({\n      isReceiving: !isReceiving,\n    });\n\n    this.props\n      .toggleChannelNotifications(id)\n      .then(({ data: { toggleChannelNotifications } }) => {\n        const value =\n          toggleChannelNotifications.channelPermissions.receiveNotifications;\n        const type = value ? 'success' : 'neutral';\n        const str = value\n          ? 'Notifications activated!'\n          : 'Notifications turned off.';\n        this.props.dispatch(addToastWithTimeout(type, str));\n      })\n      .catch(err => {\n        this.props.dispatch(addToastWithTimeout('error', err.message));\n      });\n  };\n\n  render() {\n    const { isReceiving } = this.state;\n    const { channel } = this.props;\n\n    return (\n      <StyledCard largeOnly>\n        <ListHeader>\n          <ListHeading>New Thread Notifications</ListHeading>\n        </ListHeader>\n        <ListContainer>\n          <Checkbox\n            id=\"isPrivate\"\n            checked={isReceiving}\n            onChange={this.handleChange}\n          >\n            Get notified when new threads are published in {channel.name}\n          </Checkbox>\n        </ListContainer>\n      </StyledCard>\n    );\n  }\n}\n\nexport const NotificationsToggle = compose(\n  toggleChannelNotificationsMutation,\n  connect()\n)(NotificationsTogglePure);\nexport default NotificationsToggle;\n\n\n\n// WEBPACK FOOTER //\n// src/views/channel/components/notificationsToggle.js","// @flow\nimport React from 'react';\n// $FlowFixMe\nimport Link from 'src/components/link';\n// $FlowFixMe\nimport compose from 'recompose/compose';\nimport { displayLoadingCard } from '../../../components/loading';\nimport { getPendingUsersQuery } from '../../../api/channel';\nimport { PendingUserNotificationContainer, PendingUserCount } from './style';\n\nconst PendingUsersNotificationPure = ({ data: { channel } }) => {\n  if (!channel || !channel.pendingUsers || channel.pendingUsers.length === 0)\n    return null;\n\n  return (\n    <PendingUserNotificationContainer>\n      <Link to={`/${channel.community.slug}/${channel.slug}/settings`}>\n        <PendingUserCount>{channel.pendingUsers.length}</PendingUserCount>\n        Pending members\n      </Link>\n    </PendingUserNotificationContainer>\n  );\n};\n\nexport const PendingUsersNotification = compose(\n  getPendingUsersQuery,\n  displayLoadingCard\n)(PendingUsersNotificationPure);\n\nexport default PendingUsersNotification;\n\n\n\n// WEBPACK FOOTER //\n// src/views/channel/components/pendingUsersNotification.js","// @flow\n// $FlowFixMe\nimport styled from 'styled-components';\nimport { Card } from '../../../components/card';\n\nexport const PendingUserNotificationContainer = styled(Card)`\n  width: 100%;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  flex: 1;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${props => props.theme.text.alt};\n\n  a {\n    padding: 16px;\n  }\n`;\n\nexport const PendingUserCount = styled.span`\n  padding: 4px 8px;\n  border-radius: 8px;\n  color: #fff;\n  font-size: 14px;\n  font-weight: 700;\n  margin-right: 12px;\n  background: ${props => props.theme.warn.default};\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/views/channel/components/style.js","import * as React from 'react';\n//$FlowFixMe\nimport compose from 'recompose/compose';\n// $FlowFixMe\nimport { connect } from 'react-redux';\n// $FlowFixMe\nimport generateMetaInfo from 'shared/generate-meta-info';\nimport { addCommunityToOnboarding } from '../../actions/newUserOnboarding';\nimport ThreadComposer from '../../components/threadComposer';\nimport Head from '../../components/head';\nimport AppViewWrapper from '../../components/appViewWrapper';\nimport viewNetworkHandler from '../../components/viewNetworkHandler';\nimport ViewError from '../../components/viewError';\nimport Column from '../../components/column';\nimport ThreadFeed from '../../components/threadFeed';\nimport { ChannelProfile } from '../../components/profile';\nimport PendingUsersNotification from './components/pendingUsersNotification';\nimport NotificationsToggle from './components/notificationsToggle';\nimport { getChannelThreads, getChannel } from './queries';\nimport Login from '../login';\nimport { LoadingScreen } from '../../components/loading';\nimport { UpsellSignIn, Upsell404Channel } from '../../components/upsell';\nimport RequestToJoinChannel from '../../components/upsell/requestToJoinChannel';\nimport { UpsellUpgradeCommunityPrivateChannel } from '../communitySettings/components/upgradeCommunity';\nimport Titlebar from '../titlebar';\n\nconst ThreadFeedWithData = compose(connect(), getChannelThreads)(ThreadFeed);\n\ntype Props = {\n  match: {\n    params: {\n      communitySlug: string,\n      channelSlug: string,\n    },\n  },\n  data: {\n    channel: Object,\n  },\n  currentUser: Object,\n  isLoading: boolean,\n  hasError: boolean,\n  dispatch: Function,\n};\n\nclass ChannelView extends React.Component<Props> {\n  componentDidUpdate(prevProps) {\n    // if the user is new and signed up through a channel page, push\n    // the channel's community data into the store to hydrate the new user experience\n    // with their first community they should join\n    if (this.props.currentUser) return;\n    if (\n      (!prevProps.data.channel && this.props.data.channel) ||\n      (prevProps.data.channel &&\n        prevProps.data.channel.id !== this.props.data.channel.id)\n    ) {\n      this.props.dispatch(\n        addCommunityToOnboarding(this.props.data.channel.community)\n      );\n    }\n  }\n\n  render() {\n    const {\n      match,\n      data: { channel },\n      currentUser,\n      isLoading,\n      hasError,\n    } = this.props;\n    const { communitySlug, channelSlug } = match.params;\n    const isLoggedIn = currentUser;\n\n    if (channel) {\n      // at this point the view is no longer loading, has not encountered an error, and has returned a community record\n      const {\n        isBlocked,\n        isPending,\n        isMember,\n        isOwner,\n        isModerator,\n      } = channel.channelPermissions;\n      const userHasPermissions = isMember || isOwner || isModerator;\n      const isRestricted = channel.isPrivate && !userHasPermissions;\n      const isGlobalOwner =\n        isOwner || channel.community.communityPermissions.isOwner;\n\n      // if the channel is private but the user isn't logged in, redirect to the login page\n      if (!isLoggedIn && channel.isPrivate) {\n        return <Login redirectPath={`${window.location.href}`} />;\n      }\n\n      // user has explicitly been blocked from this channel\n      if (isBlocked) {\n        return (\n          <AppViewWrapper>\n            <Titlebar\n              title={'Private channel'}\n              provideBack={true}\n              backRoute={`/${communitySlug}`}\n              noComposer\n            />\n            <ViewError\n              heading={`You don’t have permission to view this channel.`}\n              subheading={`Head back to the ${communitySlug} community to get back on track.`}\n            >\n              <Upsell404Channel community={communitySlug} />\n            </ViewError>\n          </AppViewWrapper>\n        );\n      }\n\n      // channel is private and the user is not a member or owner\n      if (isRestricted) {\n        return (\n          <AppViewWrapper>\n            <Titlebar\n              title={channel.name}\n              subtitle={channel.community.name}\n              provideBack={true}\n              backRoute={`/${communitySlug}`}\n              noComposer\n            />\n            <ViewError\n              emoji={isPending ? '🕓' : '🔑'}\n              heading={\n                isPending\n                  ? `Your request to join this channel is pending`\n                  : `This channel is private`\n              }\n              subheading={\n                isPending\n                  ? `Return to the ${channel.community\n                      .name} community until you hear back.`\n                  : `Request to join this channel and the admins of ${channel\n                      .community.name} will be notified.`\n              }\n            >\n              <RequestToJoinChannel\n                channel={channel}\n                community={channel.community}\n                isPending={isPending}\n              />\n            </ViewError>\n          </AppViewWrapper>\n        );\n      }\n\n      // at this point the user has full permission to view the channel\n      const { title, description } = generateMetaInfo({\n        type: 'channel',\n        data: {\n          name: channel.name,\n          communityName: channel.community.name,\n          description: channel.description,\n        },\n      });\n\n      return (\n        <AppViewWrapper data-e2e-id=\"channel-view\">\n          <Head\n            title={title}\n            description={description}\n            image={channel.community.profilePhoto}\n          />\n          <Titlebar\n            title={channel.name}\n            subtitle={channel.community.name}\n            provideBack={true}\n            backRoute={`/${communitySlug}`}\n            noComposer={!isMember}\n          />\n          <Column type=\"secondary\">\n            <ChannelProfile data={{ channel }} profileSize=\"full\" />\n\n            {/* user is signed in and is a member of the channel */}\n            {isLoggedIn &&\n              userHasPermissions && (\n                <NotificationsToggle\n                  value={channel.channelPermissions.receiveNotifications}\n                  channel={channel}\n                />\n              )}\n\n            {/* user is signed in and has permissions to view pending users */}\n            {isLoggedIn &&\n              (isOwner || isGlobalOwner) && (\n                <PendingUsersNotification channel={channel} id={channel.id} />\n              )}\n          </Column>\n\n          <Column type=\"primary\" alignItems=\"center\">\n            {!isLoggedIn && (\n              <UpsellSignIn\n                title={`Join the ${channel.community.name} community`}\n                view={{ data: channel, type: 'channel' }}\n                redirectPath={window.location}\n              />\n            )}\n\n            {/* if the user is logged in and has permission to post, but the channel is private in an unpaid community, return an upsell to upgrade the community */}\n            {isLoggedIn &&\n              userHasPermissions &&\n              channel.isPrivate &&\n              !channel.community.isPro && (\n                <UpsellUpgradeCommunityPrivateChannel\n                  community={channel.community}\n                />\n              )}\n\n            {/* if the user is logged in and has permissions to post, and the channel is either private + paid, or is not private, show the composer */}\n            {isLoggedIn &&\n              userHasPermissions &&\n              ((channel.isPrivate && channel.community.isPro) ||\n                !channel.isPrivate) && (\n                <ThreadComposer\n                  activeCommunity={communitySlug}\n                  activeChannel={channelSlug}\n                />\n              )}\n\n            <ThreadFeedWithData\n              viewContext=\"channel\"\n              id={channel.id}\n              currentUser={isLoggedIn}\n              channelId={channel.id}\n            />\n          </Column>\n        </AppViewWrapper>\n      );\n    }\n\n    if (isLoading) {\n      return <LoadingScreen />;\n    }\n\n    if (hasError) {\n      return (\n        <AppViewWrapper>\n          <Titlebar\n            title={'Channel not found'}\n            provideBack={true}\n            backRoute={`/${communitySlug}`}\n            noComposer\n          />\n          <ViewError\n            refresh\n            heading={'There was an error fetching this channel.'}\n          />\n        </AppViewWrapper>\n      );\n    }\n\n    return (\n      <AppViewWrapper>\n        <Titlebar\n          title={`Channel not found`}\n          provideBack={true}\n          backRoute={`/${communitySlug}`}\n          noComposer\n        />\n        <ViewError\n          heading={`We couldn’t find a channel with this name.`}\n          subheading={`Head back to the ${communitySlug} community to get back on track.`}\n        >\n          <Upsell404Channel community={communitySlug} />\n        </ViewError>\n      </AppViewWrapper>\n    );\n  }\n}\n\nconst map = state => ({\n  currentUser: state.users.currentUser,\n});\n\nexport default compose(connect(map), getChannel, viewNetworkHandler)(\n  ChannelView\n);\n\n\n\n// WEBPACK FOOTER //\n// src/views/channel/index.js","// @flow\nimport { graphql, gql } from 'react-apollo';\nimport { channelInfoFragment } from '../../api/fragments/channel/channelInfo';\nimport { communityInfoFragment } from '../../api/fragments/community/communityInfo';\nimport { communityMetaDataFragment } from '../../api/fragments/community/communityMetaData';\nimport { channelThreadsFragment } from '../../api/fragments/channel/channelThreads';\nimport { channelMetaDataFragment } from '../../api/fragments/channel/channelMetaData';\nimport { subscribeToUpdatedThreads } from '../../api/subscriptions';\nimport parseRealtimeThreads from '../../helpers/realtimeThreads';\n\nconst LoadMoreThreads = gql`\n  query loadMoreChannelThreads($id: ID, $after: String) {\n    channel(id: $id) {\n      ...channelInfo\n      ...channelThreads\n    }\n  }\n  ${channelInfoFragment}\n  ${channelThreadsFragment}\n`;\n\nconst threadsQueryOptions = {\n  props: ({\n    ownProps,\n    data: {\n      fetchMore,\n      error,\n      loading,\n      channel,\n      networkStatus,\n      subscribeToMore,\n    },\n  }) => ({\n    data: {\n      error,\n      loading,\n      networkStatus,\n      channel,\n      threads: channel ? channel.threadConnection.edges : '',\n      feed: channel && channel.id,\n      hasNextPage: channel\n        ? channel.threadConnection.pageInfo.hasNextPage\n        : false,\n      subscribeToUpdatedThreads: () => {\n        return subscribeToMore({\n          document: subscribeToUpdatedThreads,\n          updateQuery: (prev, { subscriptionData }) => {\n            const updatedThread = subscriptionData.data.threadUpdated;\n            if (!updatedThread) return prev;\n\n            const thisChannelId = ownProps.channelId;\n            const updatedThreadShouldAppearInContext =\n              thisChannelId === updatedThread.channel.id;\n\n            const newThreads = updatedThreadShouldAppearInContext\n              ? parseRealtimeThreads(\n                  prev.channel.threadConnection.edges,\n                  updatedThread,\n                  ownProps.dispatch\n                ).filter(thread => thread.node.channel.id === thisChannelId)\n              : [...prev.channel.threadConnection.edges];\n\n            return {\n              ...prev,\n              channel: {\n                ...prev.channel,\n                threadConnection: {\n                  ...prev.channel.threadConnection,\n                  pageInfo: {\n                    ...prev.channel.threadConnection.pageInfo,\n                  },\n                  edges: newThreads,\n                },\n              },\n            };\n          },\n        });\n      },\n      fetchMore: () =>\n        fetchMore({\n          query: LoadMoreThreads,\n          variables: {\n            after:\n              channel.threadConnection.edges[\n                channel.threadConnection.edges.length - 1\n              ].cursor,\n            id: channel.id,\n          },\n          updateQuery: (prev, { fetchMoreResult }) => {\n            if (!fetchMoreResult.channel) {\n              return prev;\n            }\n            return {\n              ...prev,\n              channel: {\n                ...prev.channel,\n                threadConnection: {\n                  ...prev.channel.threadConnection,\n                  pageInfo: {\n                    ...prev.channel.threadConnection.pageInfo,\n                    ...fetchMoreResult.channel.threadConnection.pageInfo,\n                  },\n                  edges: [\n                    ...prev.channel.threadConnection.edges,\n                    ...fetchMoreResult.channel.threadConnection.edges,\n                  ],\n                },\n              },\n            };\n          },\n        }),\n    },\n  }),\n  options: ({ id }) => ({\n    variables: {\n      id,\n    },\n    fetchPolicy: 'cache-and-network',\n  }),\n};\n\nexport const getChannelThreads = graphql(\n  gql`\n    query getChannelThreads($id: ID, $after: String) {\n\t\t\tchannel(id: $id) {\n        ...channelInfo\n        ...channelThreads\n      }\n    }\n    ${channelInfoFragment}\n    ${channelThreadsFragment}\n\t`,\n  threadsQueryOptions\n);\n\n/*\n  Loads the sidebar profile component widget independent of the thread feed.\n  In the future we can compose these queries together since they are fetching\n  such similar data, but for now we're making a decision to keep the data\n  queries specific to each component.\n*/\nconst profileQueryOptions = {\n  options: ({ match: { params: { channelSlug, communitySlug } } }) => ({\n    variables: {\n      channelSlug: channelSlug.toLowerCase(),\n      communitySlug: communitySlug.toLowerCase(),\n    },\n    fetchPolicy: 'cache-first',\n  }),\n};\n\nexport const getChannel = graphql(\n  gql`\n\t\tquery getChannel($channelSlug: String, $communitySlug: String) {\n\t\t\tchannel(channelSlug: $channelSlug, communitySlug: $communitySlug) {\n        ...channelInfo\n        ...channelMetaData\n        community {\n          ...communityInfo\n          ...communityMetaData\n        }\n      }\n\t\t}\n    ${channelInfoFragment}\n    ${communityInfoFragment}\n    ${communityMetaDataFragment}\n    ${channelMetaDataFragment}\n\t`,\n  profileQueryOptions\n);\n\n\n\n// WEBPACK FOOTER //\n// src/views/channel/queries.js","// @flow\nimport * as React from 'react';\nimport compose from 'recompose/compose';\nimport { connect } from 'react-redux';\nimport Textarea from 'react-textarea-autosize';\nimport { addToastWithTimeout } from '../../../actions/toasts';\nimport {\n  getSlackImport,\n  sendSlackInvitationsMutation,\n} from '../../../api/slackImport';\nimport { Loading } from '../../../components/loading';\nimport { Button } from '../../../components/buttons';\nimport Icon from '../../../components/icons';\nimport viewNetworkHandler from '../../../components/viewNetworkHandler';\nimport { CustomMessageToggle, CustomMessageTextAreaStyles } from '../style';\nimport {\n  SectionCard,\n  SectionCardFooter,\n  SectionTitle,\n} from '../../../components/settingsViews/style';\nimport { Description, Notice } from '../../../components/listItems/style';\nimport { Error } from '../../../components/formElements';\n\ntype Props = {\n  data: {\n    community: Object,\n    startPolling: Function,\n    stopPolling: Function,\n  },\n  hasInvitedPeople: Function,\n  sendSlackInvites: Function,\n  dispatch: Function,\n  isLoading: boolean,\n};\n\ntype State = {\n  isSendingInvites: boolean,\n  hasCustomMessage: boolean,\n  customMessageString: string,\n  customMessageError: boolean,\n};\n\nclass ImportSlack extends React.Component<Props, State> {\n  constructor() {\n    super();\n\n    this.state = {\n      isSendingInvites: false,\n      hasCustomMessage: false,\n      customMessageString: '',\n      customMessageError: false,\n    };\n  }\n\n  sendInvites = () => {\n    const { community } = this.props.data;\n    const {\n      customMessageError,\n      customMessageString,\n      hasCustomMessage,\n    } = this.state;\n\n    this.props.hasInvitedPeople && this.props.hasInvitedPeople();\n\n    let customMessage =\n      hasCustomMessage && !customMessageError ? customMessageString : null;\n\n    this.setState({\n      isSendingInvites: true,\n    });\n\n    this.props\n      .sendSlackInvites({\n        id: community.id,\n        customMessage,\n      })\n      .then(({ data: { sendSlackInvites } }) => {\n        this.setState({\n          isSendingInvites: false,\n          hasCustomMessage: false,\n        });\n        this.props.dispatch(\n          addToastWithTimeout('success', 'Your invitations are being sent!')\n        );\n      })\n      .catch(err => {\n        this.setState({\n          isSendingInvites: false,\n        });\n        this.props.dispatch(addToastWithTimeout('error', err.message));\n      });\n  };\n\n  handleChange = e => {\n    const customMessageString = e.target.value;\n    if (customMessageString.length > 500) {\n      this.setState({\n        customMessageString,\n        customMessageError: true,\n      });\n    } else {\n      this.setState({\n        customMessageString,\n        customMessageError: false,\n      });\n    }\n  };\n\n  toggleCustomMessage = () => {\n    const { hasCustomMessage } = this.state;\n    this.setState({\n      hasCustomMessage: !hasCustomMessage,\n    });\n  };\n\n  render() {\n    const {\n      data: { community, startPolling, stopPolling },\n      isLoading,\n    } = this.props;\n    const {\n      isSendingInvites,\n      customMessageString,\n      hasCustomMessage,\n      customMessageError,\n    } = this.state;\n\n    if (community) {\n      // if no import has been created yet, we won't have a team name or a record at all\n      const noImport =\n        !community.slackImport || !community.slackImport.teamName;\n      // if an import has been created, but does not have members data yet\n      const partialImport =\n        community.slackImport &&\n        community.slackImport.teamName &&\n        !community.slackImport.members;\n      // if an import has been created and we have members\n      const fullImport = community.slackImport && community.slackImport.members;\n      const hasAlreadyBeenSent = fullImport && community.slackImport.sent;\n\n      const url = this.props.isOnboarding\n        ? `https://slack.com/oauth/authorize?&client_id=201769987287.200380534417&scope=users:read.email,users:read,team:read,admin&state=${\n            community.id\n          }&redirect_uri=${\n            process.env.NODE_ENV === 'development'\n              ? 'http://localhost:3001/api/slack/onboarding'\n              : 'https://spectrum.chat/api/slack/onboarding'\n          }`\n        : `https://slack.com/oauth/authorize?&client_id=201769987287.200380534417&scope=users:read.email,users:read,team:read,admin&state=${\n            community.id\n          }&redirect_uri=${\n            process.env.NODE_ENV === 'development'\n              ? 'http://localhost:3001/api/slack'\n              : 'https://spectrum.chat/api/slack'\n          }`;\n\n      if (noImport) {\n        return (\n          <div>\n            <SectionTitle>Invite a Slack Team</SectionTitle>\n            <Description>\n              Easily invite your team from an existing Slack team to Spectrum.\n              Get started by connecting your team below.{' '}\n            </Description>\n            <Notice>\n              <strong>Note:</strong> We will not invite any of your team members\n              until you’re ready. We will prompt for admin access to ensure that\n              you own the Slack team.\n            </Notice>\n            <SectionCardFooter>\n              <a href={url}>\n                <Button>Connect a Slack Team</Button>\n              </a>\n            </SectionCardFooter>\n          </div>\n        );\n      } else if (partialImport) {\n        startPolling(5000);\n        return (\n          <div>\n            <SectionTitle>Invite a Slack Team</SectionTitle>\n            <SectionCardFooter>\n              <Button loading>Connecting with Slack...</Button>\n            </SectionCardFooter>\n          </div>\n        );\n      } else if (fullImport) {\n        stopPolling();\n        const members = JSON.parse(community.slackImport.members);\n        const teamName = community.slackImport.teamName;\n        const count = members.length.toLocaleString();\n\n        if (hasAlreadyBeenSent) {\n          return (\n            <div>\n              <SectionTitle>Invite your Slack team</SectionTitle>\n              <Description>\n                This community has been connected to the{' '}\n                <strong>{teamName}</strong> Slack team. We found {count} members\n                with email addresses - you have already invited them to join\n                your community.\n              </Description>\n              <SectionCardFooter>\n                <Button disabled>Invites sent to {count} people</Button>\n              </SectionCardFooter>\n            </div>\n          );\n        } else {\n          return (\n            <div>\n              <SectionTitle>Invite a Slack Team</SectionTitle>\n              <Description>\n                This community has been connected to the{' '}\n                <strong>{teamName}</strong> Slack team. We found {count} members\n                with email addresses - you can invite them to your Spectrum\n                community in one click.\n              </Description>\n\n              <CustomMessageToggle onClick={this.toggleCustomMessage}>\n                <Icon\n                  glyph={hasCustomMessage ? 'view-close' : 'post'}\n                  size={20}\n                />\n                {hasCustomMessage\n                  ? 'Remove custom message'\n                  : 'Optional: Add a custom message to your invitation'}\n              </CustomMessageToggle>\n\n              {hasCustomMessage && (\n                <Textarea\n                  autoFocus\n                  value={customMessageString}\n                  placeholder=\"Write something sweet here...\"\n                  style={{\n                    ...CustomMessageTextAreaStyles,\n                    border: customMessageError\n                      ? '1px solid #E3353C'\n                      : '1px solid #DFE7EF',\n                  }}\n                  onChange={this.handleChange}\n                />\n              )}\n\n              {hasCustomMessage &&\n                customMessageError && (\n                  <Error>\n                    Your custom invitation message can be up to 500 characters.\n                  </Error>\n                )}\n\n              <SectionCardFooter>\n                <Button\n                  gradientTheme=\"success\"\n                  onClick={this.sendInvites}\n                  loading={isSendingInvites}\n                  disabled={hasCustomMessage && customMessageError}\n                >\n                  Invite {count} people to Spectrum\n                </Button>\n              </SectionCardFooter>\n            </div>\n          );\n        }\n      }\n    }\n\n    if (isLoading) {\n      return <Loading />;\n    }\n\n    return null;\n  }\n}\n\nconst ImportSlackCard = props => (\n  <SectionCard>\n    <ImportSlack {...props} />\n  </SectionCard>\n);\n\nconst ImportSlackNoCard = props => <ImportSlack {...props} />;\n\nexport const ImportSlackWithoutCard = compose(\n  sendSlackInvitationsMutation,\n  getSlackImport,\n  connect(),\n  viewNetworkHandler\n)(ImportSlackNoCard);\nexport const ImportSlackWithCard = compose(\n  sendSlackInvitationsMutation,\n  getSlackImport,\n  connect(),\n  viewNetworkHandler\n)(ImportSlackCard);\nexport default ImportSlackWithCard;\n\n\n\n// WEBPACK FOOTER //\n// src/views/communitySettings/components/importSlack.js","// @flow\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport compose from 'recompose/compose';\nimport { OutlineButton, Button } from '../../../../components/buttons';\nimport { ButtonRow, InputRow, Input } from './style';\nimport { Description } from '../../style';\nimport { Loading } from '../../../../components/loading';\nimport Clipboard from 'react-clipboard.js';\n\nconst Share = ({ community, history, onboarding }) => {\n  if (!community) return <Loading />;\n\n  return (\n    <div>\n      <ButtonRow>\n        <a\n          href={`https://www.facebook.com/sharer/sharer.php?u=https://spectrum.chat/${community.slug}&t=Come hang out with me in the ${community.name} community on Spectrum!`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Button\n            icon=\"facebook\"\n            gradientTheme={'none'}\n            hoverColor={'social.facebook.default'}\n            color={'social.facebook.default'}\n          >\n            Share on Facebook\n          </Button>\n        </a>\n        <a\n          href={`https://twitter.com/share?text=Come hang out with me in the ${community.name} community on @withspectrum!&url=https://spectrum.chat/${community.slug}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Button\n            icon=\"twitter\"\n            gradientTheme={'none'}\n            hoverColor={'social.twitter.default'}\n            color={'social.twitter.default'}\n          >\n            Share on Twitter\n          </Button>\n        </a>\n      </ButtonRow>\n\n      <Clipboard\n        component=\"div\"\n        data-clipboard-text={`https://spectrum.chat/${community.slug}`}\n      >\n        <InputRow>\n          <Input>{`https://spectrum.chat/${community.slug}`}</Input>\n        </InputRow>\n      </Clipboard>\n\n      {onboarding && (\n        <ButtonRow>\n          <Description centered>\n            You're ready to start building your community - you can view it now,\n            or manage your settings at any time\n          </Description>\n          <a href={`/${community.slug}/settings`}>\n            <OutlineButton>View community settings</OutlineButton>\n          </a>\n          <a href={`/${community.slug}`}>\n            <Button>Go to my community</Button>\n          </a>\n        </ButtonRow>\n      )}\n    </div>\n  );\n};\n\nexport default compose(withRouter)(Share);\n\n\n\n// WEBPACK FOOTER //\n// src/views/newCommunity/components/share/index.js","// @flow\n// $FlowFixMe\nimport styled from 'styled-components';\nimport { zIndex } from '../../../../components/globals';\n\nexport const ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  flex-wrap: wrap;\n  margin-top: 16px;\n  justify-content: center;\n\n  a,\n  button {\n    margin-top: 16px;\n  }\n\n  a:first-of-type,\n  button:first-of-type {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n\n  a > button:first-of-type {\n    margin: 0;\n  }\n`;\n\nexport const InputRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  flex-wrap: wrap;\n  margin: 16px;\n  justify-content: center;\n  position: relative;\n  max-width: 100%;\n`;\n\nexport const Input = styled.div`\n  padding: 4px 12px;\n  border-radius: 8px;\n  border: 2px solid ${props => props.theme.bg.border};\n  background: #fff;\n  font-weight: 500;\n  color: ${props => props.theme.text.alt};\n  padding-right: 72px;\n  position: relative;\n  display: flex;\n  align-self: center;\n  max-width: 100%;\n  z-index: ${zIndex.form};\n\n  &:hover {\n    cursor: pointer;\n\n    &:after {\n      background: ${props => props.theme.bg.wash};\n    }\n  }\n\n  &:after {\n    content: 'COPY';\n    font-size: 11px;\n    font-weight: 600;\n    color: ${props => props.theme.brand.default};\n    text-transform: uppercase;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    background: #fff;\n    padding: 4px 12px;\n    border-left: 2px solid ${props => props.theme.bg.border};\n    border-radius: 0 8px 8px 0;\n    z-index: ${zIndex.form + 1};\n    line-height: 2.1;\n  }\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/views/newCommunity/components/share/style.js","// @flow\n// $FlowFixMe\nimport styled from 'styled-components';\nimport Card from '../../components/card';\n\nexport const Container = styled(Card)`\n  background-image: ${props =>\n    props.bg ? `url('/img/fills/${props.bg}.svg')` : 'none'};\n  background-color: #fff;\n  background-size: 110% auto;\n  background-repeat: ${props => (props.repeat ? 'repeat-y' : 'no-repeat')};\n  background-position: ${props =>\n    props.repeat ? 'center top' : 'center center'};\n  width: 100%;\n  height: auto;\n  min-height: 160px;\n  display: flex;\n`;\n\nexport const Actions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  border-top: 2px solid ${props => props.theme.bg.border};\n  padding: 24px;\n  background: #fff;\n  border-radius: 0 0 12px 12px;\n`;\n\nexport const Title = styled.h1`\n  font-weight: 900;\n  color: ${props => props.theme.text.default};\n  font-size: 24px;\n  letter-spacing: -0.1px;\n  padding: 24px 24px 8px;\n  text-align: ${props => (props.centered ? 'center' : 'left')};\n`;\n\nexport const Description = styled.h3`\n  font-size: 16px;\n  font-weight: 500;\n  color: ${props => props.theme.text.alt};\n  line-height: 1.4;\n  padding: 8px 24px 16px;\n  text-align: ${props => (props.centered ? 'center' : 'left')};\n`;\n\nexport const Divider = styled.div`\n  border-bottom: 2px solid ${props => props.theme.bg.border};\n  width: 100%;\n  display: block;\n  padding-top: 24px;\n  margin-bottom: 24px;\n`;\n\nexport const ContentContainer = styled.div`padding: 0 24px 24px;`;\n\nexport const FormContainer = styled.div``;\n\nexport const Form = styled.form`\n  display: block;\n  flex-direction: column;\n  align-self: stretch;\n  flex: 1 0 100%;\n  max-width: 100%;\n  margin: 16px;\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/views/newCommunity/style.js"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AADA;AAAA;AADA;AACA;AAOA;AACA;AAeA;AAYA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AADA;AADA;AADA;AADA;AAAA;AADA;AACA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA8BA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AA8BA;AAAA;AAAA;AAAA;AACA;AA/BA;AAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAxBA;AACA;AA0BA;AAUA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAvHA;AAwHA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AAjIA;AAkIA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAEA;AAFA;AAIA;AACA;AAhJA;AAiJA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AAzJA;AA0JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AAvKA;AAyKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAtLA;AAuLA;AACA;AACA;AACA;AADA;AAGA;AACA;AA3LA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAxBA;AAFA;AA4BA;AACA;;;AAiKA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAhBA;AAqBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AAFA;AAMA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAzDA;AAoEA;;;;AA7QA;AACA;AA+QA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;ACtUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AAAA;AAOA;AAAA;AAeA;AAAA;AAIA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAKA;AAAA;AAIA;AAAA;AAKA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AASA;AAAA;AACA;AAAA;AAGA;AAAA;AAkBA;AAAA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AAAA;AACA;AADA;AACA;AADA;AAwCA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAzCA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAhEA;AACA;AAkEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiDA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAHA;AAkBA;AACA;;;AA2IA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AAFA;AAUA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AA2BA;AAAA;AACA;AAAA;AADA;AACA;AAEA;AACA;AACA;AALA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAiNA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAaA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAVA;AAYA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAdA;AAbA;AADA;AAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAjCA;AA3BA;AADA;AANA;AAwFA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;AAjmBA;AACA;;;;AAoBA;AAAA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AAEA;AAIA;AAIA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AADA;AAYA;AACA;AAdA;AAeA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAC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","sourceRoot":""}