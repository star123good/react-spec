{"version":3,"file":"static/js/DirectMessages.chunk.js","sources":["/Users/brianlovin/Sites/spectrum/src/api/directMessageThread.js","/Users/brianlovin/Sites/spectrum/src/api/fragments/user/userDirectMessageThreads.js","/Users/brianlovin/Sites/spectrum/src/views/directMessages/components/avatars.js","/Users/brianlovin/Sites/spectrum/src/views/directMessages/components/header.js","/Users/brianlovin/Sites/spectrum/src/views/directMessages/components/messageThreadListItem.js","/Users/brianlovin/Sites/spectrum/src/views/directMessages/components/messages.js","/Users/brianlovin/Sites/spectrum/src/views/directMessages/components/style.js","/Users/brianlovin/Sites/spectrum/src/views/directMessages/components/threadsList.js","/Users/brianlovin/Sites/spectrum/src/views/directMessages/containers/existingThread.js","/Users/brianlovin/Sites/spectrum/src/views/directMessages/containers/newThread.js","/Users/brianlovin/Sites/spectrum/src/views/directMessages/index.js","/Users/brianlovin/Sites/spectrum/src/views/directMessages/mutations.js"],"sourcesContent":["// $FlowFixMe\nimport { graphql, gql } from 'react-apollo';\nimport { directMessageThreadInfoFragment } from './fragments/directMessageThread/directMessageThreadInfo';\nimport { userDirectMessageThreadsFragment } from './fragments/user/userDirectMessageThreads';\nimport { userInfoFragment } from './fragments/user/userInfo';\nimport { subscribeToUpdatedDirectMessageThreads } from './subscriptions';\n\n/*\n  Create a new direct message group\n  Input is:\n  - an array of user ids\n  - a thread-less \"message\" object\n\n  Because we are creating a DM group for the first time, we need to send the\n  message data to the backend to store it after the DM group is created\n  and we have a threadID\n*/\nconst CREATE_DIRECT_MESSAGE_THREAD_MUTATION = gql`\n  mutation createDirectMessageThread($input: DirectMessageThreadInput!) {\n    createDirectMessageThread(input: $input) {\n      ...directMessageThreadInfo\n    }\n  }\n  ${directMessageThreadInfoFragment}\n`;\nconst CREATE_DIRECT_MESSAGE_THREAD_OPTIONS = {\n  options: {\n    refetchQueries: ['currentUserDirectMessageThreads'],\n  },\n  props: ({ input, mutate }) => ({\n    createDirectMessageThread: input =>\n      mutate({\n        variables: {\n          input,\n        },\n        update: (store, { data: { createDirectMessageThread } }) => {\n          if (!createDirectMessageThread) return;\n          const data = store.readQuery({\n            query: GET_CURRENT_USER_DIRECT_MESSAGE_THREADS_QUERY,\n          });\n\n          data.user.directMessageThreadsConnection.edges.push({\n            cursor: createDirectMessageThread.id,\n            node: createDirectMessageThread,\n            __typename: 'DirectMessageThreadEdge',\n          });\n\n          // Write our data back to the cache.\n          store.writeQuery({\n            query: GET_CURRENT_USER_DIRECT_MESSAGE_THREADS_QUERY,\n            data,\n          });\n        },\n      }),\n  }),\n};\nexport const createDirectMessageThreadMutation = graphql(\n  CREATE_DIRECT_MESSAGE_THREAD_MUTATION,\n  CREATE_DIRECT_MESSAGE_THREAD_OPTIONS\n);\n\nconst LoadMoreDirectMessageThreads = gql`\n  query loadMoreDirectMessageThreads($after: String) {\n    user: currentUser {\n      ...userInfo\n      directMessageThreadsConnection(after: $after) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            ...directMessageThreadInfo\n          }\n        }\n      }\n    }\n  }\n  ${userInfoFragment}\n  ${directMessageThreadInfoFragment}\n`;\n\nexport const GET_CURRENT_USER_DIRECT_MESSAGE_THREADS_QUERY = gql`\n  query currentUserDirectMessageThreads {\n    user: currentUser {\n      ...userInfo\n      ...userDirectMessageThreads\n    }\n  }\n  ${userInfoFragment}\n  ${userDirectMessageThreadsFragment}\n`;\n\nexport const GET_CURRENT_USER_DIRECT_MESSAGE_THREADS_OPTIONS = {\n  options: {\n    fetchPolicy: 'cache-and-network',\n  },\n  props: props => ({\n    ...props,\n    hasNextPage: props.data.user\n      ? props.data.user.directMessageThreadsConnection.pageInfo.hasNextPage\n      : false,\n    fetchMore: () =>\n      props.data.fetchMore({\n        query: LoadMoreDirectMessageThreads,\n        variables: {\n          after:\n            props.data.user.directMessageThreadsConnection.edges[\n              props.data.user.directMessageThreadsConnection.edges.length - 1\n            ].cursor,\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult.user) {\n            return prev;\n          }\n\n          const foo = {\n            ...prev,\n            user: {\n              ...prev.user,\n              directMessageThreadsConnection: {\n                ...prev.user.directMessageThreadsConnection,\n                pageInfo: {\n                  ...prev.user.directMessageThreadsConnection.pageInfo,\n                  ...fetchMoreResult.user.directMessageThreadsConnection\n                    .pageInfo,\n                },\n                edges: [\n                  ...prev.user.directMessageThreadsConnection.edges,\n                  ...fetchMoreResult.user.directMessageThreadsConnection.edges,\n                ],\n              },\n            },\n          };\n          return foo;\n        },\n      }),\n    subscribeToUpdatedDirectMessageThreads: () => {\n      return props.data.subscribeToMore({\n        document: subscribeToUpdatedDirectMessageThreads,\n        updateQuery: (prev, { subscriptionData }) => {\n          const updatedDirectMessageThread =\n            subscriptionData.data.directMessageThreadUpdated;\n          if (!updatedDirectMessageThread) return prev;\n\n          // Add the new notification to the data\n          return Object.assign({}, prev, {\n            ...prev,\n            directMessageThreadsConnection: {\n              ...prev.user.directMessageThreadsConnection,\n              edges: [\n                ...prev.user.directMessageThreadsConnection.edges,\n                {\n                  node: updatedDirectMessageThread,\n                  cursor: '__this-is-a-cursor__',\n                  __typename: 'DirectMessageThread',\n                },\n              ],\n            },\n          });\n        },\n      });\n    },\n  }),\n};\n\nexport const getCurrentUserDirectMessageThreads = graphql(\n  GET_CURRENT_USER_DIRECT_MESSAGE_THREADS_QUERY,\n  GET_CURRENT_USER_DIRECT_MESSAGE_THREADS_OPTIONS\n);\n\n/*\n  Set a user's last seen state in the db\n*/\nconst SET_LAST_SEEN_MUTATION = gql`\n  mutation setLastSeen($id: ID!) {\n    setLastSeen(id: $id) {\n      ...directMessageThreadInfo\n    }\n  }\n  ${directMessageThreadInfoFragment}\n`;\nconst SET_LAST_SEEN_OPTIONS = {\n  props: ({ id, mutate }) => ({\n    setLastSeen: id =>\n      mutate({\n        variables: {\n          id,\n        },\n      }),\n  }),\n};\nexport const setLastSeenMutation = graphql(\n  SET_LAST_SEEN_MUTATION,\n  SET_LAST_SEEN_OPTIONS\n);\n\n/*\n  Get all media messages for a threadId to populate the gallery\n*/\nexport const GET_DIRECT_MESSAGE_THREAD_QUERY = gql`\n  query getDirectMessageThread($id: ID!) {\n    directMessageThread(id: $id) {\n      ...directMessageThreadInfo\n    }\n  }\n  ${directMessageThreadInfoFragment}\n`;\n\nexport const GET_DIRECT_MESSAGE_THREAD_OPTIONS = {\n  options: ({ id }) => ({\n    variables: {\n      id,\n    },\n    fetchPolicy: 'cache-and-network',\n  }),\n};\n\nexport const getDirectMessageThread = graphql(\n  GET_DIRECT_MESSAGE_THREAD_QUERY,\n  GET_DIRECT_MESSAGE_THREAD_OPTIONS\n);\n\n\n\n// WEBPACK FOOTER //\n// src/api/directMessageThread.js","// @flow\n// $FlowFixme\nimport { gql } from 'react-apollo';\nimport { directMessageThreadInfoFragment } from '../directMessageThread/directMessageThreadInfo';\n\nexport const userDirectMessageThreadsFragment = gql`\n  fragment userDirectMessageThreads on User {\n    directMessageThreadsConnection {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          ...directMessageThreadInfo\n        }\n      }\n    }\n  }\n  ${directMessageThreadInfoFragment}\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/api/fragments/user/userDirectMessageThreads.js","import React from 'react';\nimport Avatar from '../../../components/avatar';\nimport {\n  AvatarContainer,\n  TwoAvatarContainer,\n  TwoAvatarWrap,\n  ThreeAvatarContainer,\n  Remainder,\n} from './style';\n\nexport const renderAvatars = users => {\n  if (users.length === 1) {\n    return (\n      <AvatarContainer>\n        <Avatar\n          user={users[0]}\n          isOnline={users[0].isOnline}\n          onlineSize={'large'}\n          size={44}\n          radius={44}\n          src={users[0].profilePhoto}\n        />\n      </AvatarContainer>\n    );\n  }\n\n  if (users.length === 2) {\n    return (\n      <TwoAvatarContainer>\n        {users.map(user => {\n          return (\n            <TwoAvatarWrap key={user.id}>\n              <Avatar\n                user={user}\n                isOnline={user.isOnline}\n                size={34}\n                radius={34}\n                src={user.profilePhoto}\n              />\n            </TwoAvatarWrap>\n          );\n        })}\n      </TwoAvatarContainer>\n    );\n  }\n\n  if (users.length === 3) {\n    return (\n      <ThreeAvatarContainer>\n        {users.map(user => {\n          return (\n            <Avatar\n              user={user}\n              isOnline={user.isOnline}\n              onlineSize={'small'}\n              key={user.id}\n              size={20}\n              radius={20}\n              src={user.profilePhoto}\n            />\n          );\n        })}\n      </ThreeAvatarContainer>\n    );\n  }\n\n  if (users.length === 4) {\n    return (\n      <ThreeAvatarContainer>\n        {users.map(user => {\n          return (\n            <Avatar\n              user={user}\n              isOnline={user.isOnline}\n              onlineSize={'small'}\n              key={user.id}\n              size={19}\n              radius={19}\n              src={user.profilePhoto}\n            />\n          );\n        })}\n      </ThreeAvatarContainer>\n    );\n  }\n\n  if (users.length > 4) {\n    const remainder = users.length % 4;\n\n    return (\n      <ThreeAvatarContainer>\n        {users.map((user, i) => {\n          while (i < 3) {\n            return (\n              <Avatar\n                user={user}\n                isOnline={user.isOnline}\n                onlineSize={'small'}\n                key={user.id}\n                size={19}\n                radius={19}\n                src={user.profilePhoto}\n              />\n            );\n          }\n\n          return null;\n        })}\n\n        <Remainder>\n          <span>+{remainder}</span>\n        </Remainder>\n      </ThreeAvatarContainer>\n    );\n  }\n\n  return null;\n};\n\n\n\n// WEBPACK FOOTER //\n// src/views/directMessages/components/avatars.js","import React from 'react';\nimport generateMetaInfo from 'shared/generate-meta-info';\nimport Head from '../../../components/head';\nimport {\n  StyledHeader,\n  PhotosContainer,\n  Photo,\n  Names,\n  Username,\n  PhotoWrapper,\n} from './style';\n\nconst Header = ({ thread, currentUser }) => {\n  const trimmedUsers = thread.participants.filter(\n    user => user.userId !== currentUser.id\n  );\n\n  const photos = trimmedUsers.map(user => (\n    <PhotoWrapper key={user.id}>\n      <Photo\n        user={user}\n        size={60}\n        radius={60}\n        isOnline={user.isOnline}\n        onlineSize={'large'}\n        src={user.profilePhoto}\n        link={user.username ? `/users/${user.username}` : null}\n      />\n    </PhotoWrapper>\n  ));\n\n  const names = trimmedUsers.map(user => user.name).join(', ');\n  const username =\n    trimmedUsers.length === 1 && trimmedUsers[0].username\n      ? trimmedUsers[0].username\n      : '';\n\n  const { title, description } = generateMetaInfo({\n    type: 'directMessage',\n    data: {\n      title: `${names}`,\n      description: `Conversation with ${names}`,\n    },\n  });\n\n  return (\n    <StyledHeader>\n      <Head title={title} description={description} />\n      <PhotosContainer>{photos}</PhotosContainer>\n      <Names>{names}</Names>\n      <Username>{username && `@${username}`}</Username>\n    </StyledHeader>\n  );\n};\n\nexport default Header;\n\n\n\n// WEBPACK FOOTER //\n// src/views/directMessages/components/header.js","import React, { Component } from 'react';\n// $FlowFixMe\nimport Link from 'src/components/link';\nimport { timeDifference } from '../../../helpers/utils';\nimport { renderAvatars } from './avatars';\nimport {\n  Wrapper,\n  Row,\n  Meta,\n  MessageGroupTextContainer,\n  MessageGroupByline,\n  Usernames,\n  Timestamp,\n} from './style';\n\nclass ListCardItemDirectMessageThread extends Component {\n  render() {\n    const { thread, currentUser, active } = this.props;\n\n    // convert the server time to an iso timestamp\n    const timestamp = new Date(thread.threadLastActive).getTime();\n\n    // get the difference in a readable format (e.g 'a week ago')\n    const threadTimeDifference = timeDifference(Date.now(), timestamp);\n\n    // filter currentUser out\n    const participants = thread.participants.filter(\n      user => user.userId !== currentUser.id\n    );\n    // concat a string of users' names for thread messages\n    let participantsArray =\n      participants.length > 1\n        ? participants\n            .map(user => user.name)\n            .join(', ')\n            .replace(/,(?!.*,)/gim, ' and')\n        : participants[0].name;\n    // pass participants to a helper function to generate the avatar displays\n    const avatars = renderAvatars(participants);\n\n    const currentParticipant = thread.participants.filter(\n      user => user.userId === currentUser.id\n    )[0];\n\n    const currentParticipantLastActiveTimestamp = new Date(\n      currentParticipant.lastSeen\n    ).getTime();\n\n    let isUnread = currentParticipantLastActiveTimestamp < timestamp;\n    isUnread = active ? false : isUnread;\n\n    return (\n      <Wrapper active={active} isUnread={isUnread}>\n        <Link to={`/messages/${thread.id}`}>\n          <Row>\n            {avatars}\n            <MessageGroupTextContainer>\n              <MessageGroupByline>\n                <Usernames isUnread={isUnread}>\n                  <p>{participantsArray}</p>\n                </Usernames>\n                <Timestamp isUnread={isUnread}>\n                  {threadTimeDifference}\n                </Timestamp>\n              </MessageGroupByline>\n              <Meta isUnread={isUnread} nowrap>\n                {thread.snippet}\n              </Meta>\n            </MessageGroupTextContainer>\n          </Row>\n        </Link>\n      </Wrapper>\n    );\n  }\n}\n\nexport default ListCardItemDirectMessageThread;\n\n\n\n// WEBPACK FOOTER //\n// src/views/directMessages/components/messageThreadListItem.js","// @flow\nimport * as React from 'react';\nimport compose from 'recompose/compose';\nimport { sortAndGroupMessages } from '../../../helpers/messages';\nimport ChatMessages from '../../../components/messageGroup';\nimport { Loading } from '../../../components/loading';\nimport { Spinner } from '../../../components/globals';\nimport viewNetworkHandler from '../../../components/viewNetworkHandler';\nimport NextPageButton from '../../../components/nextPageButton';\nimport { getDirectMessageThreadMessages } from '../queries';\nimport { setLastSeenMutation } from '../../../api/directMessageThread';\nimport { toggleReactionMutation } from '../mutations';\nimport { MessagesScrollWrapper } from './style';\n\ntype Props = {\n  id: string,\n  forceScrollToBottom: Function,\n  contextualScrollToBottom: Function,\n  data: {\n    directMessageThread: {\n      id: string,\n    },\n    messages: Array<Object>,\n    hasNextPage: boolean,\n    fetchMore: Function,\n  },\n  subscribeToNewMessages: Function,\n  isLoading: boolean,\n  hasError: boolean,\n  isFetchingMore: boolean,\n  setLastSeen: Function,\n  toggleReaction: Function,\n};\n\ntype State = {\n  subscription: ?Function,\n};\n\nclass MessagesWithData extends React.Component<Props, State> {\n  state = {\n    subscription: null,\n  };\n\n  componentDidMount() {\n    this.props.forceScrollToBottom();\n    this.subscribe();\n  }\n\n  componentDidUpdate(prev) {\n    const { contextualScrollToBottom, data, setLastSeen } = this.props;\n\n    if (this.props.data.loading) {\n      this.unsubscribe();\n    }\n\n    if (\n      prev.data.networkStatus === 1 &&\n      prev.data.loading &&\n      !this.props.data.loading\n    ) {\n      this.subscribe();\n      setTimeout(() => this.props.forceScrollToBottom());\n    }\n    // force scroll to bottom when a message is sent in the same thread\n    if (prev.data.messages !== data.messages && contextualScrollToBottom) {\n      // mark this thread as unread when new messages come in and i'm viewing it\n      setLastSeen(data.directMessageThread.id);\n      contextualScrollToBottom();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  subscribe = () => {\n    this.setState({\n      subscription: this.props.subscribeToNewMessages(),\n    });\n  };\n\n  unsubscribe = () => {\n    const { subscription } = this.state;\n    if (subscription) {\n      // This unsubscribes the subscription\n      subscription();\n    }\n  };\n\n  render() {\n    const {\n      data: { messages, hasNextPage, fetchMore },\n      hasError,\n      isLoading,\n      isFetchingMore,\n      toggleReaction,\n    } = this.props;\n\n    if (hasError) {\n      return <div>Error!</div>;\n    }\n\n    // NOTE(@mxstbr): The networkStatus check shouldn't be there, but if I remove\n    // it the loading indicator doesn't show when switching between threads which\n    // is hella annoying as the old msgs stick around until the new ones are there.\n    // TODO: FIXME and remove the networkStatus === 7\n    if (isFetchingMore || (messages && messages.length > 0)) {\n      let unsortedMessages = messages.map(message => message.node);\n\n      const unique = array => {\n        const processed = [];\n        for (let i = array.length - 1; i >= 0; i--) {\n          if (processed.indexOf(array[i].id) < 0) {\n            processed.push(array[i].id);\n          } else {\n            array.splice(i, 1);\n          }\n        }\n        return array;\n      };\n\n      const uniqueMessages = unique(unsortedMessages);\n      const sortedMessages = sortAndGroupMessages(uniqueMessages);\n\n      return (\n        <MessagesScrollWrapper>\n          {hasNextPage && (\n            <NextPageButton\n              isFetchingMore={isFetchingMore}\n              fetchMore={fetchMore}\n            />\n          )}\n          <ChatMessages\n            toggleReaction={toggleReaction}\n            messages={sortedMessages}\n            forceScrollToBottom={this.props.forceScrollToBottom}\n            contextualScrollToBottom={this.props.contextualScrollToBottom}\n            threadId={this.props.id}\n            threadType={'directMessageThread'}\n          />\n        </MessagesScrollWrapper>\n      );\n    }\n\n    if (isLoading) {\n      return <Loading />;\n    }\n\n    return null;\n  }\n}\n\nconst Messages = compose(\n  toggleReactionMutation,\n  setLastSeenMutation,\n  getDirectMessageThreadMessages,\n  viewNetworkHandler\n)(MessagesWithData);\n\nexport default Messages;\n\n\n\n// WEBPACK FOOTER //\n// src/views/directMessages/components/messages.js","import styled from 'styled-components';\nimport Avatar from '../../../components/avatar';\nimport {\n  Truncate,\n  FlexCol,\n  FlexRow,\n  H3,\n  H4,\n  P,\n  hexa,\n  zIndex,\n} from '../../../components/globals';\n\nexport const ThreadsListScrollContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  overflow-y: auto;\n  max-height: 100%;\n`;\n\nexport const Wrapper = styled(FlexCol)`\n  flex: 0 0 auto;\n  justify-content: center;\n  max-width: 100%;\n  height: 64px;\n  position: relative;\n  background: ${props => (props.active ? props.theme.bg.wash : '#fff')};\n  box-shadow: ${props =>\n    props.isUnread ? `inset -2px 0 0 ${props.theme.brand.default}` : 'none'};\n\n  a {\n    padding: 8px 12px;\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 16px;\n    width: calc(100% - 16px);\n    border-bottom: 1px solid ${props => props.theme.bg.wash};\n  }\n\n  &:first-of-type a {\n    padding-top: 8px;\n  }\n\n  &:last-of-type a {\n    padding-bottom: 16px;\n\n    &:after {\n      display: none;\n    }\n  }\n\n  &:hover {\n    cursor: pointer;\n    background: ${props => props.theme.bg.wash};\n  }\n`;\n\nexport const Col = styled(FlexCol)`\n  flex: 1;\n`;\n\nexport const Row = styled(FlexRow)`\n  flex: 0 0 auto;\n  align-items: center;\n\n  a {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nexport const Heading = styled(H3)`\n  font-weight: 700;\n`;\n\nexport const Meta = styled(H4)`\n  font-weight: ${props => (props.isUnread ? 600 : 400)};\n  color: ${props =>\n    props.isUnread ? props.theme.text.default : props.theme.text.alt};\n\n  ${props => (props.nowrap ? Truncate() : '')};\n`;\n\nexport const Description = styled(P)`\n  margin-top: 8px;\n  font-weight: 400;\n  color: ${({ theme }) => theme.text.default};\n`;\n\nexport const MessageGroupTextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 0 calc(100% - 64px);\n  overflow: hidden;\n  position: relative;\n  top: -1px;\n`;\n\nexport const MessageGroupByline = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: baseline;\n`;\n\nexport const Usernames = styled.span`\n  display: flex;\n  overflow: hidden;\n  flex-wrap: nowrap;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  color: ${({ theme }) => theme.text.default};\n  font-weight: ${props => (props.isUnread ? 800 : 600)};\n  line-height: 1.1;\n  margin-bottom: 1px;\n  font-size: 14px;\n  flex: 1 1 100%;\n\n  p {\n    ${Truncate()};\n  }\n`;\n\nexport const Timestamp = styled.span`\n  font-size: 12px;\n  text-align: right;\n  color: ${props => (props.isUnread ? props.theme.brand.default : '#909aa7')};\n  padding-right: 4px;\n  display: inline-block;\n  flex: 1 0 auto;\n  margin-left: 8px;\n`;\n\nexport const Snippet = styled.p`\n  font-size: 13px;\n  font-weight: ${props => (props.unread ? 700 : 500)};\n  color: ${props =>\n    props.unread ? props.theme.text.default : props.theme.text.alt};\n  padding-right: 4px;\n  display: inline-block;\n  line-height: 1.3;\n  margin-top: 0;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport const AvatarContainer = styled.div`\n  margin-right: 16px;\n  width: 44px;\n  height: 44px;\n  position: relative;\n\n  img {\n    box-shadow: 0 0 0 2px #fff;\n  }\n`;\n\nexport const TwoAvatarContainer = styled(AvatarContainer)`\n  width: 60px;\n  height: 60px;\n  position: relative;\n\n  span {\n    margin: 1px;\n\n    &:first-child {\n      position: absolute;\n      z-index: ${zIndex.avatar};\n      top: 4px;\n      left: 0;\n    }\n\n    &:last-child {\n      position: absolute;\n      z-index: ${zIndex.avatar + 1};\n      bottom: 4px;\n      right: 0;\n    }\n  }\n`;\n\nexport const TwoAvatarWrap = styled(AvatarContainer)`\n  &:first-child {\n    position: absolute;\n    z-index: ${zIndex.avatar};\n    top: 4px;\n    left: 0;\n    width: 34px;\n    height: 34px;\n  }\n\n  &:last-child {\n    position: absolute;\n    z-index: ${zIndex.avatar + 1};\n    bottom: 4px;\n    right: 0;\n    margin: 0;\n    width: 34px;\n    height: 34px;\n  }\n`;\n\nexport const ThreeAvatarContainer = styled(AvatarContainer)`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n\n  img {\n    margin: 1px;\n\n    &:last-child {\n      margin-top: 0;\n    }\n  }\n`;\n\nexport const Remainder = styled.span`\n  border-radius: 19px;\n  width: 19px;\n  height: 19px;\n  padding: 0 2px;\n  font-size: 9px;\n  font-weight: 700;\n  color: ${props => props.theme.text.alt};\n  background: ${props => props.theme.bg.wash};\n  margin: 2px 1px 1px 2px;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ComposerInputWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  display: block;\n`;\n\nexport const Grow = styled.div`\n  flex: 1 1 auto;\n  justify-content: center;\n  align-items: stretch;\n  background: ${props => props.theme.bg.wash};\n  width: 100%;\n  height: 100%;\n`;\n\nexport const ComposerInput = styled.input`\n  font-size: 16px;\n  padding: 15px 16px;\n  width: 100%;\n  border-bottom: 1px solid ${props => props.theme.bg.border};\n  position: relative;\n  z-index: ${zIndex.search};\n\n  @media (max-width: 768px) {\n    padding: 20px 16px;\n  }\n`;\n\nexport const SearchSpinnerContainer = styled.span`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 32px;\n  height: 32px;\n  z-index: ${zIndex.loading};\n`;\n\nexport const SearchResultsDropdown = styled.ul`\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  position: absolute;\n  top: ${props => (props.moved ? '104px' : '60px')};\n  left: 8px;\n  display: inline-block;\n  width: 320px;\n  max-height: 420px;\n  overflow-y: scroll;\n  z-index: ${zIndex.dropdown};\n\n  @media (max-width: 768px) {\n    width: 100%;\n    left: 0;\n    border-radius: 0 0 8px 8px;\n  }\n`;\n\nexport const SearchResult = styled.li`\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid ${props => props.theme.bg.border};\n  background: ${props => (props.focused ? props.theme.bg.wash : '#fff')};\n  width: 100%;\n  ${Truncate()} padding: 8px 16px 8px 8px;\n\n  &:only-child {\n    border-bottom: none;\n  }\n\n  &:last-child {\n    border-bottom: none;\n  }\n\n  &:hover {\n    background: ${props => props.theme.bg.wash};\n    cursor: pointer;\n  }\n`;\n\nexport const SearchResultImage = styled(Avatar)`\n  margin-right: 8px;\n`;\n\nexport const SearchResultTextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n`;\n\nexport const SearchResultDisplayName = styled.p`\n  font-size: 14px;\n  font-weight: 600;\n  color: ${props => props.theme.text.default};\n  line-height: 1.4;\n`;\n\nexport const SearchResultUsername = styled.p`\n  font-size: 12px;\n  font-weight: 500;\n  color: ${props => props.theme.text.alt};\n  line-height: 1.4;\n`;\n\nexport const SearchResultNull = styled.p`\n  text-align: center;\n  font-size: 14px;\n  font-weight: 400;\n  color: ${props => props.theme.text.alt};\n`;\n\nexport const SelectedUsersPills = styled.ul`\n  position: relative;\n  width: 100%;\n  font-size: 16px;\n  padding: 9px 12px;\n  width: 100%;\n  z-index: ${zIndex.chatInput + 1};\n  background: #fff;\n`;\n\nexport const Pill = styled.li`\n  list-style-type: none;\n  display: inline-block;\n  font-size: 14px;\n  background: ${props =>\n    props.selected\n      ? props.theme.brand.default\n      : hexa(props.theme.brand.default, 0.1)};\n  box-shadow: inset 0 0 1px rgba(123, 22, 255, 0.15);\n  color: ${props =>\n    props.selected ? props.theme.bg.default : props.theme.brand.default};\n  border-radius: 4px;\n  padding: 2px 12px;\n  margin-right: 4px;\n`;\n\nexport const StyledHeader = styled.div`\n  display: flex;\n  flex: ${props => (props.fill ? '1 0 auto' : '0 0 auto')};\n  justify-content: center;\n  align-items: center;\n  align-self: ${props => (props.fill ? 'center' : 'flex-start')};\n  flex-direction: column;\n  width: 100%;\n  background: ${props => (props.wash ? props.theme.bg.wash : '#fff')};\n  padding: 32px;\n  padding-bottom: 0;\n`;\n\nexport const PhotosContainer = styled.div`\n  display: block;\n  padding: 8px 0;\n`;\n\nexport const PhotoWrapper = styled.span`\n  margin: 0 6px;\n  display: inline-block;\n`;\n\nexport const Photo = styled(Avatar)`\n  border: 1px solid #fff;\n`;\n\nexport const Names = styled.h2`\n  display: block;\n  font-weight: 800;\n  font-size: 24px;\n  color: ${({ theme }) => theme.text.default};\n  text-align: center;\n  line-height: 1.4;\n`;\n\nexport const Username = styled.h3`\n  display: block;\n  font-weight: 500;\n  font-size: 14px;\n  color: ${({ theme }) => theme.text.alt};\n  margin: 0;\n  display: flex;\n`;\n\nexport const MessagesScrollWrapper = styled.div`\n  width: 100%;\n  flex: 1 0 auto;\n  padding-top: 24px;\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/views/directMessages/components/style.js","// @flow\nimport * as React from 'react';\nimport ListCardItemDirectMessageThread from './messageThreadListItem';\nimport InfiniteList from 'react-infinite-scroller-with-scroll-element';\nimport { LoadingDM } from '../../../components/loading';\nimport { ThreadsListScrollContainer } from './style';\n\ntype Props = {\n  threads: ?Array<Object>,\n  currentUser: ?Object,\n  active: string,\n  fetchMore: Function,\n  hasNextPage: boolean,\n};\n\ntype State = {\n  scrollElement: any,\n};\n\nclass ThreadsList extends React.Component<Props, State> {\n  state = {\n    scrollElement: null,\n  };\n\n  componentDidMount() {\n    this.setState({\n      // NOTE(@mxstbr): This is super un-reacty but it works. This refers to\n      // the AppViewWrapper which is the scrolling part of the site.\n      scrollElement: document.getElementById('scroller-for-dm-threads'),\n    });\n  }\n\n  render() {\n    const { threads, currentUser, active, fetchMore, hasNextPage } = this.props;\n    const { scrollElement } = this.state;\n\n    if (!threads || threads.length === 0) {\n      return null;\n    }\n\n    return (\n      <ThreadsListScrollContainer id={'scroller-for-dm-threads'}>\n        <InfiniteList\n          pageStart={0}\n          loadMore={fetchMore}\n          hasMore={hasNextPage}\n          loader={<LoadingDM />}\n          useWindow={false}\n          initialLoad={false}\n          scrollElement={scrollElement}\n          threshold={30}\n        >\n          {threads.map(thread => {\n            return (\n              <ListCardItemDirectMessageThread\n                thread={thread}\n                key={thread.id}\n                currentUser={currentUser}\n                active={active === thread.id}\n              />\n            );\n          })}\n        </InfiniteList>\n      </ThreadsListScrollContainer>\n    );\n  }\n}\n\nexport default ThreadsList;\n\n\n\n// WEBPACK FOOTER //\n// src/views/directMessages/components/threadsList.js","// @flow\nimport * as React from 'react';\nimport compose from 'recompose/compose';\nimport { connect } from 'react-redux';\nimport { withApollo } from 'react-apollo';\nimport { track } from '../../../helpers/events';\nimport { setLastSeenMutation } from '../../../api/directMessageThread';\nimport Messages from '../components/messages';\nimport Header from '../components/header';\nimport ChatInput from '../../../components/chatInput';\nimport viewNetworkHandler from '../../../components/viewNetworkHandler';\nimport { getDirectMessageThread } from '../../../api/directMessageThread';\nimport { MessagesContainer, ViewContent } from '../style';\nimport { Loading } from '../../../components/loading';\nimport ViewError from '../../../components/viewError';\n\ntype Props = {\n  data: Object,\n  isLoading: boolean,\n  setActiveThread: Function,\n  setLastSeen: Function,\n  match: Object,\n  id: ?string,\n  currentUser: Object,\n};\nclass ExistingThread extends React.Component<Props> {\n  scrollBody: ?HTMLDivElement;\n  chatInput: ?ChatInput;\n\n  componentDidMount() {\n    const threadId = this.props.id;\n    this.props.setActiveThread(threadId);\n    this.props.setLastSeen(threadId);\n    this.forceScrollToBottom();\n\n    // autofocus on desktop\n    if (window && window.innerWidth > 768 && this.chatInput) {\n      this.chatInput.triggerFocus();\n    }\n\n    track('direct message thread', 'viewed', null);\n  }\n\n  componentDidUpdate(prevProps) {\n    // if the thread slider is open, dont be focusing shit up in heyuhr\n    if (this.props.threadSliderIsOpen) return;\n    // if the thread slider is closed and we're viewing DMs, refocus the chat input\n    if (\n      prevProps.threadSliderIsOpen &&\n      !this.props.threadSliderIsOpen &&\n      this.chatInput\n    ) {\n      this.chatInput.triggerFocus();\n    }\n    if (prevProps.match.params.threadId !== this.props.match.params.threadId) {\n      const threadId = this.props.match.params.threadId;\n      this.props.setActiveThread(threadId);\n      this.props.setLastSeen(threadId);\n      this.forceScrollToBottom();\n      // autofocus on desktop\n      if (window && window.innerWidth > 768 && this.chatInput) {\n        this.chatInput.triggerFocus();\n      }\n    }\n  }\n\n  forceScrollToBottom = () => {\n    if (!this.scrollBody) return;\n    let node = this.scrollBody;\n    node.scrollTop = node.scrollHeight - node.clientHeight;\n  };\n\n  contextualScrollToBottom = () => {\n    if (!this.scrollBody) return;\n    let node = this.scrollBody;\n    if (node.scrollHeight - node.clientHeight < node.scrollTop + 140) {\n      node.scrollTop = node.scrollHeight - node.clientHeight;\n    }\n  };\n\n  render() {\n    const id = this.props.match.params.threadId;\n    const { currentUser, data, isLoading } = this.props;\n\n    if (id !== 'new') {\n      if (data.directMessageThread) {\n        const thread = data.directMessageThread;\n        return (\n          <MessagesContainer>\n            <ViewContent\n              innerRef={scrollBody => (this.scrollBody = scrollBody)}\n            >\n              <Header thread={thread} currentUser={currentUser} />\n              <Messages\n                id={id}\n                threadType={thread.threadType}\n                currentUser={currentUser}\n                forceScrollToBottom={this.forceScrollToBottom}\n                contextualScrollToBottom={this.contextualScrollToBottom}\n              />\n            </ViewContent>\n\n            <ChatInput\n              thread={id}\n              currentUser={currentUser}\n              threadType={'directMessageThread'}\n              forceScrollToBottom={this.forceScrollToBottom}\n              onRef={chatInput => (this.chatInput = chatInput)}\n            />\n          </MessagesContainer>\n        );\n      }\n\n      if (isLoading) {\n        return <Loading />;\n      }\n\n      return (\n        <ViewError\n          heading={'We had trouble loading this conversation'}\n          refresh\n        />\n      );\n    }\n\n    /*\n      if we are viewing /new we will handle the messages view in the composer\n      component\n    */\n    return null;\n  }\n}\n\nconst map = state => ({ threadSliderIsOpen: state.threadSlider.isOpen });\nexport default compose(\n  // $FlowIssue\n  connect(map),\n  getDirectMessageThread,\n  setLastSeenMutation,\n  withApollo,\n  viewNetworkHandler\n)(ExistingThread);\n\n\n\n// WEBPACK FOOTER //\n// src/views/directMessages/containers/existingThread.js","import React, { Component } from 'react';\nimport { withApollo } from 'react-apollo';\nimport { withRouter } from 'react-router';\nimport compose from 'recompose/compose';\nimport Head from '../../../components/head';\nimport { connect } from 'react-redux';\nimport generateMetaInfo from 'shared/generate-meta-info';\nimport Messages from '../components/messages';\nimport Header from '../components/header';\nimport ChatInput from '../../../components/chatInput';\nimport { MessagesContainer, ViewContent } from '../style';\nimport { findDOMNode } from 'react-dom';\nimport { GET_DIRECT_MESSAGE_THREAD_QUERY } from '../queries';\nimport { throttle } from '../../../helpers/utils';\nimport { track } from '../../../helpers/events';\nimport { SEARCH_USERS_QUERY } from '../../../api/user';\nimport { Spinner } from '../../../components/globals';\nimport { addToastWithTimeout } from '../../../actions/toasts';\nimport { clearDirectMessagesComposer } from '../../../actions/directMessageThreads';\nimport { createDirectMessageThreadMutation } from '../../../api/directMessageThread';\nimport {\n  ComposerInputWrapper,\n  Grow,\n  SelectedUsersPills,\n  Pill,\n  SearchSpinnerContainer,\n  ComposerInput,\n  SearchResultsDropdown,\n  SearchResult,\n  SearchResultNull,\n  SearchResultUsername,\n  SearchResultDisplayName,\n  SearchResultTextContainer,\n  SearchResultImage,\n} from '../components/style';\n\nclass NewThread extends Component {\n  state: {\n    searchString: string,\n    searchResults: Array<any>,\n    searchIsLoading: boolean,\n    selectedUsersForNewThread: Array<any>,\n    focusedSearchResult: string, // id\n    focusedSelectedUser: string, // id\n    existingThreadBasedOnSelectedUsers: string, // id\n    existingThreadWithMessages: Object,\n    loadingExistingThreadMessages: boolean,\n    chatInputIsFocused: boolean,\n    threadIsBeingCreated: boolean,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // user types in a string that returns all users whose username\n      // or displayName contains the string\n      searchString: '',\n      // the query returns an array of user objects. this is used to populate\n      // the search dropdown\n      searchResults: [],\n      // if the query is still fetching, a loading indicator appears in\n      // the search bar\n      searchIsLoading: false,\n      // as a user selects users for the new direct message thread, we add\n      // them to an array. this array will be used for two functions:\n      // 1. Map against the user's existing DM threads to see if a thread\n      //    with the selected users already exists\n      // 2. If no existing thread is found, this is the array that will be\n      //    used in the DMThread creation mutation\n      selectedUsersForNewThread: [],\n      // represents a userId of a search result that is currently \"focused\"\n      // in the search dropdown. This allows a user to press up/down, or enter\n      // to quickly navigation the search results dropdown\n      focusedSearchResult: '',\n      // when users have been added to `selectedUsersForNewThread`, they can\n      // be removed by either backspacing them away, or a user can click on\n      // the person's name, and then press backspace, to remove that specific\n      // user\n      focusedSelectedUser: '',\n      // if an existing thread is found based on the selected users, we will\n      // kick off a query to get that thread's messages and load it inline\n      // we will also use this object to make sure the chat input sends messages\n      // to the existing thread and doesn't create a new one\n      existingThreadBasedOnSelectedUsers: '',\n      // after we get the messages from the server, we'll store the full object\n      existingThreadWithMessages: {},\n      // if the query is loading, we show a centered spinner in the middle of\n      // the page where the messages will appear\n      loadingExistingThreadMessages: false,\n      // if the user is focused on the chat input, we want 'enter' to send\n      // a message and create the dm group, and ignore other logic around\n      // pressing the 'enter' key\n      chatInputIsFocused: false,\n      // set to true while a thread is being created, to prevent a user pressing\n      // enter twice and accidentally creating two threads\n      threadIsBeingCreated: false,\n    };\n\n    // only kick off search query every 200ms\n    this.search = throttle(this.search, 200);\n  }\n\n  /*\n    takes a string that gets sent to the server and matched against all\n    user's displayNames and usernames\n  */\n  search = (string: string) => {\n    // if the user has cleared the search input, make sure there are no search\n    // results or focused users\n    if (!string || string.length === 0) {\n      return this.setState({\n        searchResults: [],\n        focusedSearchResult: '',\n      });\n    }\n\n    const { selectedUsersForNewThread } = this.state;\n    const { currentUser, client } = this.props;\n\n    // start the input loading spinner\n    this.setState({\n      searchIsLoading: true,\n    });\n\n    // trigger the query\n    client\n      .query({\n        query: SEARCH_USERS_QUERY,\n        variables: {\n          string,\n        },\n      })\n      .then(({ data: { searchUsers } }) => {\n        // if we return users from the search query, stop the loading\n        // spinner, populate the searchResults array, and focus the first\n        // result\n        if (searchUsers.length > 0) {\n          // create an array of user ids if the user has already selected people\n          // for the thread\n          const selectedUsersIds =\n            selectedUsersForNewThread &&\n            selectedUsersForNewThread.map(user => user.id);\n\n          // filter the search results to only show users who aren't already selected\n          // then filter that list to remove the currentUser so you can't message yourself\n\n          let searchResults = selectedUsersForNewThread\n            ? searchUsers\n                .filter(user => selectedUsersIds.indexOf(user.id) < 0)\n                .filter(user => user.id !== currentUser.id)\n            : searchUsers.filter(user => user.id !== currentUser.id);\n\n          this.setState({\n            // if the search results are totally filtered out of the selectedUsers,\n            // return an empty array\n            searchResults: searchResults.length > 0 ? searchResults : [],\n            searchIsLoading: false,\n            // if all results are filtered, clear the focused search result\n            focusedSearchResult:\n              searchResults.length > 0 ? searchResults[0].id : '',\n          });\n          // otherwise if no results are found, clear the above\n        } else {\n          this.setState({\n            searchResults: [],\n            searchIsLoading: false,\n            focusedSearchResult: '',\n          });\n        }\n      });\n  };\n\n  handleKeyPress = (e: any) => {\n    // if the thread slider is open, we shouldn't be doing anything in DMs\n    if (this.props.threadSliderIsOpen) return;\n\n    // destructure the whole state object\n    const {\n      searchString,\n      searchResults,\n      selectedUsersForNewThread,\n      focusedSearchResult,\n      focusedSelectedUser,\n      chatInputIsFocused,\n    } = this.state;\n\n    // create a reference to the input - we will use this to call .focus()\n    // after certain events (like pressing backspace or enter)\n    const input = findDOMNode(this.refs.input);\n\n    // create temporary arrays of IDs from the searchResults and selectedUsers\n    // to more easily manipulate the ids\n    const searchResultIds = searchResults && searchResults.map(user => user.id);\n\n    const indexOfFocusedSearchResult = searchResultIds.indexOf(\n      focusedSearchResult\n    );\n\n    /*\n      if a user presses backspace\n      1. Determine if they have focused on a selectedUser pill - if so, they\n         are trying to delete it\n      2. Determine if there are any more characters left in the search string.\n         If so, they are just typing a search query as normal\n      3. If there are no more characters left in the search string, we need\n         to check if the user has already selected people to message. If so,\n         we remove the last one in the array\n      4. If no more characters are in the search query, and no users are\n         selected to be messaged, we can just return and clear out unneeded\n         state\n    */\n    if (e.keyCode === 8) {\n      // 0. if the chat input is focused, don't do anything\n      if (chatInputIsFocused) return;\n\n      // 1. If there is a selectedUser that has been focused, delete it\n      if (focusedSelectedUser) {\n        const newSelectedUsers = selectedUsersForNewThread.filter(\n          user => user.id !== focusedSelectedUser\n        );\n\n        this.setState({\n          selectedUsersForNewThread: newSelectedUsers,\n          focusedSelectedUser: '',\n          existingThreadBasedOnSelectedUsers: '',\n          existingThreadWithMessages: {},\n        });\n\n        // recheckfor an existing direct message thread on the server\n        this.getMessagesForExistingDirectMessageThread();\n\n        // focus the search input\n        input.focus();\n\n        return;\n      }\n\n      // 2. If there are more characters left in the search string\n      if (searchString.length > 0) return;\n\n      // 3. The user is trying to delete selected users. If one isn't selected,\n      //    select it.\n      //    Note: If the user presses backspace again it will trigger step #1\n      //    above\n      if (selectedUsersForNewThread.length > 0 && !focusedSelectedUser) {\n        // recheck for an existing thread if the user stops searching but\n        // still has selected users for the new thread\n        this.getMessagesForExistingDirectMessageThread();\n\n        const focused =\n          selectedUsersForNewThread[selectedUsersForNewThread.length - 1].id;\n\n        this.setState({\n          focusedSelectedUser: focused,\n        });\n\n        return;\n      }\n\n      // 4\n      input.focus();\n      return;\n    }\n\n    /*\n      If the person presses escape:\n      1. If there are focused selected users, clear them\n      2. If there are search results, clear them to hide the dropdown\n    */\n    if (e.keyCode === 27) {\n      // 0. if the chat input is focused, don't do anything\n      if (chatInputIsFocused) return;\n\n      this.setState({\n        searchResults: [],\n        searchIsLoading: false,\n        loadingExistingThreadMessages: false,\n        focusedSelectedUser: '',\n      });\n\n      input.focus();\n      return;\n    }\n\n    /*\n      if person presses down\n      1. If the user is at the last item in the search results, don't\n      do anything\n      2. Focus the next user in the search results\n    */\n    if (e.keyCode === 40) {\n      // 0. if the chat input is focused, don't do anything\n      if (chatInputIsFocused) return;\n\n      // 1\n      if (indexOfFocusedSearchResult === searchResults.length - 1) return;\n      if (searchResults.length === 1) return;\n\n      // 2\n      this.setState({\n        focusedSearchResult: searchResults[indexOfFocusedSearchResult + 1].id,\n      });\n\n      return;\n    }\n\n    /*\n      if person presses up\n      1. If the user is at the first`` item in the search results, don't\n      do anything\n      2. Focus the previous user in the search results\n    */\n    if (e.keyCode === 38) {\n      // 0. if the chat input is focused, don't do anything\n      if (chatInputIsFocused) return;\n\n      // 1\n      if (indexOfFocusedSearchResult === 0) return;\n      if (searchResults.length === 1) return;\n\n      // 2\n      this.setState({\n        focusedSearchResult: searchResults[indexOfFocusedSearchResult - 1].id,\n      });\n\n      return;\n    }\n\n    /*\n      if person presses enter\n      1. If there are search results and one of them is focused, add that user\n      to the selectedUsers state, clear the searchString, clear the searchResults,\n      and stop loading. Then kick off a new search to see if there is an\n      existing thread containing the selected users\n      2. Otherwise do nothing\n    */\n    if (e.keyCode === 13) {\n      // 0. if the chat input is focused, don't do anything\n      if (chatInputIsFocused) return;\n      if (!searchResults || searchResults.length === 0) return;\n\n      // 1\n      this.addUserToSelectedUsersList(\n        searchResults[indexOfFocusedSearchResult]\n      );\n      return;\n    }\n  };\n\n  setFocusedSelectedUser = (id: string) => {\n    this.setState({\n      focusedSelectedUser: id,\n    });\n\n    return;\n  };\n\n  addUserToSelectedUsersList = (user: Object) => {\n    const { selectedUsersForNewThread } = this.state;\n\n    // add the new user to the state array\n    selectedUsersForNewThread.push(user);\n    this.setState({\n      selectedUsersForNewThread,\n      searchResults: [],\n      searchString: '',\n      focusedSearchResult: '',\n      searchIsLoading: false,\n      existingThreadBasedOnSelectedUsers: '',\n      existingThreadWithMessages: {},\n    });\n\n    // trigger a new search for an existing thread\n    this.getMessagesForExistingDirectMessageThread();\n  };\n\n  handleChange = (e: any) => {\n    const { existingThreadBasedOnSelectedUsers } = this.state;\n\n    // unfocus any selected user pills\n    this.setState({\n      focusedSelectedUser: '',\n    });\n\n    // if a user keeps typing, assume they aren't trying to message a different\n    // set of people\n    if (existingThreadBasedOnSelectedUsers) {\n      this.setState({\n        loadingExistingThreadMessages: false,\n      });\n    }\n\n    const string = e.target.value.toLowerCase().trim();\n\n    // set the searchstring to state\n    this.setState({\n      searchString: e.target.value,\n    });\n\n    // trigger a new search based on the search input\n    this.search(string);\n  };\n\n  /*\n    This method is used to determine if the selected users in the new thread\n    being composed match an existing DM thread for the current user. If we\n    find a match, we should load the messages for that thread and prepare\n    the chatInput to send any messages to that existing thread.\n\n    If no matches are found, we will return a falsey value which will tell\n    the chat input that it is creating a new thread based on the current\n    array of selectedUsers in the state\n  */\n  getMessagesForExistingDirectMessageThread = () => {\n    const { threads, currentUser, client } = this.props;\n    const { selectedUsersForNewThread } = this.state;\n\n    if (!threads) {\n      return;\n    }\n\n    // user hasn't created any dm threads yet,\n    if (threads && threads.length === 0) {\n      return;\n    }\n\n    // if there are no selected users in the thread\n    if (selectedUsersForNewThread.length === 0) {\n      this.setState({\n        existingThreadBasedOnSelectedUsers: '',\n        loadingExistingThreadMessages: false,\n      });\n\n      return;\n    }\n\n    /*\n      If we made it here it means that the user has selected people to message\n      in the composer and that they have some existing threads that were\n      already returned from the server. What we need to do now is determine\n      if the selectedUsers in the composer exactly match the users of an\n      existing thread.\n\n      We'll do this by:\n      1. Creating a new array of the user's existing DM threads with the\n      following shape:\n        {\n          id\n          users: [ id ]\n        }\n      where the users array does *not* contain the currentUser id. It has\n      to be cleared becaues the composer input does *not* contain the current\n      user.\n\n      2. For each of these threads, we'll sort the users, sort the composer's\n      selected users and look for a match.\n    */\n\n    // 1. Create a new array of cleaned up threads objects\n    const cleanedExistingThreads = threads.map(thread => {\n      return {\n        id: thread.id,\n        participants: thread.participants\n          .filter(user => user.userId !== currentUser.id)\n          .map(user => user.userId),\n      };\n    });\n\n    // 2. Sort both arrays of user IDs and look for a match\n    const sortedSelectedUsersForNewThread = selectedUsersForNewThread\n      .map(user => user.id)\n      .sort()\n      .join('');\n\n    // will return null or an object\n    const existingThread = cleanedExistingThreads.filter(thread => {\n      const sortedUsers = thread.participants.sort().join('');\n\n      if (sortedUsers === sortedSelectedUsersForNewThread) {\n        return thread;\n      } else {\n        return null;\n      }\n    });\n\n    // if an existing thread was found, set it to the state and get the messages\n    // from the server\n    if (existingThread.length > 0) {\n      this.setState({\n        loadingExistingThreadMessages: true,\n        existingThreadBasedOnSelectedUsers: existingThread[0].id,\n      });\n\n      client\n        .query({\n          query: GET_DIRECT_MESSAGE_THREAD_QUERY,\n          variables: {\n            id: existingThread[0].id,\n          },\n        })\n        .then(({ data: { directMessageThread } }) => {\n          // stop loading\n          this.setState({\n            loadingExistingThreadMessages: false,\n          });\n\n          // if messages were found\n          if (directMessageThread.id) {\n            this.setState({\n              existingThreadWithMessages: directMessageThread,\n            });\n            // if no messages were found\n          } else {\n            this.setState({\n              existingThreadWithMessages: {},\n              existingThreadBasedOnSelectedUsers: '',\n            });\n          }\n        });\n    }\n  };\n\n  componentWillMount() {\n    // can take an optional param of an array of user objects to automatically\n    // populate the new message composer\n    const { initNewThreadWithUser } = this.props;\n\n    // if the prop is present, add the users to the selected users state\n    if (initNewThreadWithUser.length > 0) {\n      this.setState({\n        selectedUsersForNewThread: [...initNewThreadWithUser],\n      });\n    }\n  }\n  /*\n    Add event listeners when the component mounts - will be listening\n    for up, down, backspace, escape, and enter, to trigger different\n    functions depending on the context or state of the composer\n  */\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress, false);\n\n    const { initNewThreadWithUser, threadSliderIsOpen } = this.props;\n\n    // if someone is viewing a thread, don't focus here\n    if (threadSliderIsOpen) return;\n\n    // focus the composer input if no users were already in the composer\n    if (initNewThreadWithUser.length === 0) {\n      const input = findDOMNode(this.refs.input);\n      return input.focus();\n    }\n\n    this.chatInput.triggerFocus();\n\n    // clear the redux store of this inited user, in case the person\n    // sends more messages later in the session\n    this.props.dispatch(clearDirectMessagesComposer());\n\n    if (this.state.selectedUsersForNewThread.length > 0) {\n      // trigger a new search for an existing thread with these users\n      this.getMessagesForExistingDirectMessageThread();\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress, false);\n  }\n\n  componentDidUpdate() {\n    this.forceScrollToBottom();\n  }\n\n  forceScrollToBottom = () => {\n    if (!this.scrollBody) return;\n    let node = this.scrollBody;\n    node.scrollTop = node.scrollHeight - node.clientHeight;\n  };\n\n  createThread = ({ messageBody, messageType, file }) => {\n    const { selectedUsersForNewThread, threadIsBeingCreated } = this.state;\n\n    // if no users have been selected, break out of this function and throw\n    // an error\n    if (selectedUsersForNewThread.length === 0) {\n      return this.props.dispatch(\n        addToastWithTimeout(\n          'error',\n          'Choose some people to send this message to first!'\n        )\n      );\n    }\n\n    const input = {\n      participants: selectedUsersForNewThread.map(user => user.id),\n      message: {\n        messageType: messageType,\n        threadType: 'directMessageThread',\n        content: {\n          body: messageBody ? messageBody : '',\n        },\n        file: file ? file : null,\n      },\n    };\n\n    const isPrivate = selectedUsersForNewThread.length > 1 ? true : false;\n\n    if (threadIsBeingCreated) {\n      return;\n    } else {\n      this.setState({\n        threadIsBeingCreated: true,\n      });\n\n      this.props\n        .createDirectMessageThread(input)\n        .then(({ data: { createDirectMessageThread } }) => {\n          if (!createDirectMessageThread) {\n            this.props.dispatch(\n              addToastWithTimeout(\n                'error',\n                'Failed to create direct message thread, please try again!'\n              )\n            );\n            return;\n          }\n          track(\n            'direct message thread',\n            `${isPrivate ? 'private thread' : 'group thread'} created`,\n            null\n          );\n\n          this.setState({\n            threadIsBeingCreated: false,\n          });\n\n          this.props.setActiveThread(createDirectMessageThread.id);\n          this.props.history.push(`/messages/${createDirectMessageThread.id}`);\n        })\n        .catch(err => {\n          // if an error happened, the user can try to resend the message to\n          // create a new thread\n          this.setState({\n            threadIsBeingCreated: false,\n          });\n\n          this.props.dispatch(addToastWithTimeout('error', err.message));\n        });\n    }\n  };\n\n  onChatInputFocus = () => {\n    this.setState({\n      chatInputIsFocused: true,\n    });\n  };\n\n  onChatInputBlur = () => {\n    this.setState({\n      chatInputIsFocused: false,\n    });\n  };\n\n  render() {\n    const {\n      searchString,\n      selectedUsersForNewThread,\n      searchIsLoading,\n      searchResults,\n      focusedSelectedUser,\n      focusedSearchResult,\n      existingThreadBasedOnSelectedUsers,\n      loadingExistingThreadMessages,\n      existingThreadWithMessages,\n    } = this.state;\n    const { currentUser, hideOnMobile } = this.props;\n\n    const { title, description } = generateMetaInfo({\n      type: 'directMessage',\n      data: {\n        title: 'New message',\n        description: null,\n      },\n    });\n\n    return (\n      <MessagesContainer hideOnMobile={hideOnMobile}>\n        <Head title={title} description={description} />\n        <ComposerInputWrapper>\n          {// if users have been selected, show them as pills\n          selectedUsersForNewThread.length > 0 && (\n            <SelectedUsersPills>\n              {selectedUsersForNewThread.map(user => {\n                return (\n                  <Pill\n                    selected={focusedSelectedUser === user.id}\n                    onClick={() => this.setFocusedSelectedUser(user.id)}\n                    key={user.id}\n                  >\n                    {user.name}\n                  </Pill>\n                );\n              })}\n            </SelectedUsersPills>\n          )}\n\n          {searchIsLoading && (\n            <SearchSpinnerContainer>\n              <Spinner size={16} color={'brand.default'} />\n            </SearchSpinnerContainer>\n          )}\n\n          <ComposerInput\n            ref=\"input\"\n            type=\"text\"\n            value={searchString}\n            placeholder=\"Search for people...\"\n            onChange={this.handleChange}\n          />\n\n          {// user has typed in a search string\n          searchString && (\n            //if there are selected users already, we manually shift\n            // the search results position down\n            <SearchResultsDropdown moved={selectedUsersForNewThread.length > 0}>\n              {searchResults.length > 0 &&\n                searchResults.map(user => {\n                  return (\n                    <SearchResult\n                      focused={focusedSearchResult === user.id}\n                      key={user.id}\n                      onClick={() => this.addUserToSelectedUsersList(user)}\n                    >\n                      <SearchResultImage\n                        user={user}\n                        isOnline={user.isOnline}\n                        size={32}\n                        radius={32}\n                        src={user.profilePhoto}\n                      />\n                      <SearchResultTextContainer>\n                        <SearchResultDisplayName>\n                          {user.name}\n                        </SearchResultDisplayName>\n                        {user.username && (\n                          <SearchResultUsername>\n                            @{user.username}\n                          </SearchResultUsername>\n                        )}\n                      </SearchResultTextContainer>\n                    </SearchResult>\n                  );\n                })}\n\n              {searchResults.length === 0 && (\n                <SearchResult>\n                  <SearchResultTextContainer>\n                    <SearchResultNull>\n                      No users found matching \"{searchString}\"\n                    </SearchResultNull>\n                  </SearchResultTextContainer>\n                </SearchResult>\n              )}\n            </SearchResultsDropdown>\n          )}\n        </ComposerInputWrapper>\n\n        <ViewContent\n          moved={selectedUsersForNewThread.length > 0}\n          innerRef={scrollBody => (this.scrollBody = scrollBody)}\n        >\n          {existingThreadWithMessages &&\n            existingThreadWithMessages.id && (\n              <Header\n                thread={existingThreadWithMessages}\n                currentUser={currentUser}\n              />\n            )}\n\n          {existingThreadBasedOnSelectedUsers && (\n            <Messages\n              id={existingThreadBasedOnSelectedUsers}\n              currentUser={currentUser}\n              forceScrollToBottom={this.forceScrollToBottom}\n            />\n          )}\n\n          {!existingThreadBasedOnSelectedUsers && (\n            <Grow>\n              {loadingExistingThreadMessages && (\n                <Spinner size={16} color={'brand.default'} />\n              )}\n            </Grow>\n          )}\n        </ViewContent>\n        <ChatInput\n          thread={\n            existingThreadBasedOnSelectedUsers || 'newDirectMessageThread'\n          }\n          createThread={this.createThread}\n          onFocus={this.onChatInputFocus}\n          onBlur={this.onChatInputBlur}\n          threadType={'directMessageThread'}\n          onRef={chatInput => (this.chatInput = chatInput)}\n        />\n      </MessagesContainer>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  initNewThreadWithUser: state.directMessageThreads.initNewThreadWithUser,\n  threadSliderIsOpen: state.threadSlider.isOpen,\n});\n\nexport default compose(\n  withApollo,\n  withRouter,\n  createDirectMessageThreadMutation,\n  connect(mapStateToProps)\n)(NewThread);\n\n\n\n// WEBPACK FOOTER //\n// src/views/directMessages/containers/newThread.js","// @flow\nimport * as React from 'react';\nimport compose from 'recompose/compose';\nimport Link from 'src/components/link';\nimport { connect } from 'react-redux';\nimport { getCurrentUserDirectMessageThreads } from '../../api/directMessageThread';\nimport { markDirectMessageNotificationsSeenMutation } from '../../api/notification';\nimport Icon from '../../components/icons';\nimport ThreadsList from './components/threadsList';\nimport NewThread from './containers/newThread';\nimport ExistingThread from './containers/existingThread';\nimport viewNetworkHandler from '../../components/viewNetworkHandler';\nimport ViewError from '../../components/viewError';\nimport { LoadingDM } from '../../components/loading';\nimport Titlebar from '../titlebar';\nimport { View, MessagesList, ComposeHeader } from './style';\n\ntype Props = {\n  subscribeToUpdatedDirectMessageThreads: Function,\n  markDirectMessageNotificationsSeen: Function,\n  dispatch: Function,\n  match: Object,\n  currentUser?: Object,\n  hasError: boolean,\n  hasNextPage: boolean,\n  fetchMore: Function,\n  data: {\n    user: {\n      directMessageThreadsConnection: {\n        edges: Array<Object>,\n      },\n    },\n  },\n};\ntype State = {\n  activeThread: string,\n  subscription: ?Function,\n};\n\nclass DirectMessages extends React.Component<Props, State> {\n  constructor() {\n    super();\n\n    this.state = {\n      activeThread: '',\n      subscription: null,\n    };\n  }\n\n  subscribe = () => {\n    this.setState({\n      subscription: this.props.subscribeToUpdatedDirectMessageThreads(),\n    });\n  };\n\n  unsubscribe = () => {\n    const { subscription } = this.state;\n    if (subscription) {\n      // This unsubscribes the subscription\n      subscription();\n    }\n  };\n\n  shouldComponentUpdate(nextProps) {\n    const curr = this.props;\n    // fetching more\n    if (curr.data.networkStatus === 7 && nextProps.data.networkStatus === 3)\n      return false;\n    return true;\n  }\n\n  componentDidMount() {\n    this.props.markDirectMessageNotificationsSeen();\n    this.subscribe();\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  setActiveThread = id => {\n    return this.setState({\n      activeThread: id === 'new' ? '' : id,\n    });\n  };\n\n  render() {\n    const {\n      match,\n      currentUser,\n      data,\n      hasError,\n      fetchMore,\n      hasNextPage,\n    } = this.props;\n\n    // Only logged-in users can view DM threads\n    if (!currentUser) return null;\n    const { activeThread } = this.state;\n    const isComposing = match.url === '/messages/new' && match.isExact;\n    const isViewingThread = !!match.params.threadId;\n    const ThreadDetail = isViewingThread ? ExistingThread : NewThread;\n    const dataExists =\n      currentUser && data.user && data.user.directMessageThreadsConnection;\n    const threads =\n      dataExists &&\n      data.user.directMessageThreadsConnection.edges &&\n      data.user.directMessageThreadsConnection.edges.length > 0\n        ? data.user.directMessageThreadsConnection.edges\n            .map(thread => thread.node)\n            .sort((a, b) => {\n              const x = new Date(a.threadLastActive).getTime();\n              const y = new Date(b.threadLastActive).getTime();\n              const val = y - x;\n              return val;\n            })\n        : null;\n\n    if (hasError) return <ViewError />;\n\n    return (\n      <View>\n        <Titlebar\n          title={isComposing ? 'New Message' : 'Messages'}\n          provideBack={isComposing || isViewingThread}\n          backRoute={`/messages`}\n          noComposer={isComposing || isViewingThread}\n          messageComposer={!isComposing && !isViewingThread}\n        />\n        <MessagesList isViewingThread={isViewingThread || isComposing}>\n          <Link to=\"/messages/new\" onClick={() => this.setActiveThread('new')}>\n            <ComposeHeader>\n              <Icon glyph=\"message-new\" />\n            </ComposeHeader>\n          </Link>\n\n          {dataExists ? (\n            <ThreadsList\n              hasNextPage={hasNextPage}\n              fetchMore={fetchMore}\n              active={activeThread}\n              threads={threads}\n              currentUser={currentUser}\n            />\n          ) : (\n            <div>\n              <LoadingDM />\n              <LoadingDM />\n              <LoadingDM />\n              <LoadingDM />\n              <LoadingDM />\n              <LoadingDM />\n              <LoadingDM />\n              <LoadingDM />\n              <LoadingDM />\n              <LoadingDM />\n              <LoadingDM />\n            </div>\n          )}\n        </MessagesList>\n\n        {dataExists && (\n          <ThreadDetail\n            match={match}\n            currentUser={currentUser}\n            setActiveThread={this.setActiveThread}\n            hideOnMobile={!(isComposing || isViewingThread)}\n            id={match.params.threadId && match.params.threadId}\n          />\n        )}\n      </View>\n    );\n  }\n}\n\nconst map = state => ({ currentUser: state.users.currentUser });\nexport default compose(\n  // $FlowIssue\n  connect(map),\n  getCurrentUserDirectMessageThreads,\n  markDirectMessageNotificationsSeenMutation,\n  viewNetworkHandler\n)(DirectMessages);\n\n\n\n// WEBPACK FOOTER //\n// src/views/directMessages/index.js","// @flow\n// $FlowFixMe\nimport { graphql, gql } from 'react-apollo';\nimport { messageInfoFragment } from '../../api/fragments/message/messageInfo';\n\n/*\n  Toggles a reaction on a specific message. The reaction object is created\n  in /components/chatMessages because that is a dumb component which might\n  be rendering messages from a directMessageThread or direct message thread. The reaction\n  object takes a 'type' and a 'message' id.\n\n  We run 'refetchQueries' on the current thread query in order to update\n  the UI to reflect the new reaction.\n*/\nconst TOGGLE_REACTION_MUTATION = gql`\n  mutation toggleReaction($reaction: ReactionInput!) {\n    toggleReaction(reaction: $reaction) {\n      ...messageInfo\n      __typename\n    }\n  }\n  ${messageInfoFragment}\n`;\nconst TOGGLE_REACTION_OPTIONS = {\n  props: ({ ownProps, mutate }) => ({\n    // renames the mutate method to 'toggleReaction' and accepts an argument\n    // of the reaction object. This helps us keep the mutation logic out of\n    // the component\n    toggleReaction: reaction =>\n      mutate({\n        variables: {\n          reaction,\n        },\n      }),\n  }),\n};\nexport const toggleReactionMutation = graphql(\n  TOGGLE_REACTION_MUTATION,\n  TOGGLE_REACTION_OPTIONS\n);\n\n\n\n// WEBPACK FOOTER //\n// src/views/directMessages/mutations.js"],"mappings":"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A;AACA;AACA;AAUA;;;;;;;;;;;;;;AAyCA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;AAjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAgBA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAaA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AAuBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;AAIA;AACA;;;;AAzGA;AACA;AA2GA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;;;AAeA;AAAA;AACA;AADA;AACA;AADA;AAyDA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AAEA;AACA;AACA;AADA;AAFA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAzHA;AA2HA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AA1SA;AA4SA;AACA;AADA;AACA;AAGA;AACA;AACA;AAlTA;AAmTA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AArUA;AAsUA;AACA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAhWA;AA2WA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAEA;AACA;AACA;AADA;AAFA;AAMA;AACA;AAAA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAvdA;AA4gBA;AACA;AACA;AACA;AACA;AAhhBA;AAihBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AANA;AAFA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AADA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAxlBA;AA0lBA;AACA;AADA;AAGA;AACA;AA9lBA;AAgmBA;AACA;AADA;AAGA;AACA;AAjmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1CA;AACA;AA4CA;AACA;AAjDA;AAkDA;AACA;AACA;;;;;;AA6SA;;;;;;;;;;;;;AAuHA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AACA;AACA;AADA;AAG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","sourceRoot":""}