{"version":3,"file":"1.96358f5c7f2339a17fbf.hot-update.js","sources":["/Users/brianlovin/Sites/spectrum/src/components/newActivityIndicator/index.js","/Users/brianlovin/Sites/spectrum/src/components/threadComposer/components/composer.js","/Users/brianlovin/Sites/spectrum/src/components/threadComposer/style.js","/Users/brianlovin/Sites/spectrum/src/views/communitySettings/components/importSlack.js","/Users/brianlovin/Sites/spectrum/src/views/newCommunity/components/share/style.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { clearActivityIndicator } from '../../actions/newActivityIndicator';\nimport styled from 'styled-components';\nimport { Gradient } from '../globals';\n\nconst Pill = styled.div`\n  padding: ${props => (props.refetching ? '8px' : '8px 16px')};\n  border-radius: 20px;\n  color: ${props => props.theme.text.reverse};\n  background: ${props =>\n    Gradient(props.theme.brand.alt, props.theme.brand.default)};};\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  align-self: center;\n  position: fixed;\n  top: 0;\n  opacity: ${props => (props.active ? '1' : '0')};\n  pointer-events: ${props => (props.active ? 'auto' : 'none')};\n  left: 50%;\n  z-index: 9999;\n  transform: translateX(-50%) translateY(${props =>\n    props.active ? '80px' : '60px'});\n  font-weight: 700;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n  transition: all 0.2s ease-in-out;\n  cursor: pointer;\n\n  &:hover {\n    transform: translateX(-50%) translateY(78px);\n    transition: all 0.2s ease-in-out;\n  }\n\n  &:active {\n    transform: translateX(-50%) translateY(80px);\n    transition: all 0.1s ease-in-out;\n  }\n\n  @media (max-width: 768px) {\n    transform: translateX(-50%) translateY(${props =>\n      props.active ? '60px' : '40px'});\n\n    &:hover {\n      transform: translateX(-50%) translateY(58px);\n      transition: all 0.2s ease-in-out;\n    }\n\n    &:active {\n      transform: translateX(-50%) translateY(60px);\n      transition: all 0.1s ease-in-out;\n    }\n  }\n`;\n\nconst scrollTo = (element, to, duration) => {\n  if (duration < 0) return;\n  const difference = to - element.scrollTop;\n  const perTick = difference / duration * 2;\n\n  setTimeout(() => {\n    element.scrollTop = element.scrollTop + perTick;\n    scrollTo(element, to, duration - 2);\n  }, 10);\n};\n\nclass Indicator extends Component {\n  state: {\n    elem: any,\n  };\n\n  constructor() {\n    super();\n\n    this.state = {\n      elem: null,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setState({\n        // NOTE(@mxstbr): This is super un-reacty but it works. This refers to\n        // the AppViewWrapper which is the scrolling part of the site.\n        elem: document.getElementById(this.props.elem),\n      });\n    }\n  }\n\n  componentDidMount() {\n    const elem = document.getElementById(this.props.elem);\n    this.setState({\n      // NOTE(@mxstbr): This is super un-reacty but it works. This refers to\n      // the AppViewWrapper which is the scrolling part of the site.\n      elem,\n    });\n\n    // if the component mounted while the user is scrolled to the top, immediately clear the redux store of the activity indicator - since the user can see the top of the feed, they don't need an indicator\n    if (elem.scrollTop < window.innerHeight / 2) {\n      this.props.dispatch(clearActivityIndicator());\n    }\n  }\n\n  componentWillUnmount() {\n    // when the component unmounts, clear the state so that at next mount we will always get a new scrollTop position for the scroll element\n    this.setState({\n      elem: null,\n    });\n  }\n\n  clearActivityIndicator = () => {\n    // if the user clicks on the new activity indicator, scroll them to the top of the feed and dismiss the indicator\n    setTimeout(() => this.props.dispatch(clearActivityIndicator()), 120);\n    scrollTo(this.state.elem, 0, 80);\n  };\n\n  render() {\n    const { elem } = this.state;\n    let active = false;\n\n    // if the scroll element exists, and the user has scrolled at least half of the screen (e.g. the top of the feed is out of view), then the user should see a new activity indicator\n    if (elem) {\n      active = elem.scrollTop > window.innerHeight / 2;\n    }\n\n    return (\n      <Pill active={active} onClick={this.clearActivityIndicator}>\n        New conversations!\n      </Pill>\n    );\n  }\n}\n\nexport default connect()(Indicator);\n\n\n\n// WEBPACK FOOTER //\n// src/components/newActivityIndicator/index.js","import * as React from 'react';\nimport compose from 'recompose/compose';\nimport Textarea from 'react-textarea-autosize';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport { track } from '../../../helpers/events';\nimport { closeComposer } from '../../../actions/composer';\nimport { changeActiveThread } from '../../../actions/dashboardFeed';\nimport { addToastWithTimeout } from '../../../actions/toasts';\nimport Editor from '../../draftjs-editor';\nimport { toPlainText, fromPlainText, toJSON } from 'shared/draft-utils';\nimport { getComposerCommunitiesAndChannels } from '../queries';\nimport { publishThread } from '../mutations';\nimport { getLinkPreviewFromUrl } from '../../../helpers/utils';\nimport isURL from 'validator/lib/isURL';\nimport { URLS, ENDS_IN_WHITESPACE } from '../../../helpers/regexps';\nimport { TextButton, Button } from '../../buttons';\nimport { FlexRow } from '../../../components/globals';\nimport { LoadingComposer } from '../../loading';\nimport viewNetworkHandler from '../../viewNetworkHandler';\nimport {\n  Container,\n  Composer,\n  Overlay,\n  ThreadDescription,\n  ThreadTitle,\n  ContentContainer,\n  Actions,\n  Dropdowns,\n} from '../style';\n\ntype Props = {\n  title: string,\n  body: Object,\n  isOpen: boolean,\n  dispatch: Function,\n  isLoading: boolean,\n  activeChannel?: string,\n  activeCommunity?: string,\n  isInbox: boolean,\n  mutate: Function,\n  history: Object,\n  data: {\n    refetch: Function,\n    user: {\n      channelConnection: {\n        edges: Array<any>,\n      },\n      communityConnection: {\n        edges: Array<any>,\n      },\n    },\n  },\n};\n\ntype State = {\n  isMounted: boolean,\n  title: string,\n  body: Object,\n  availableCommunities: Array<any>,\n  availableChannels: Array<any>,\n  activeCommunity: ?string,\n  activeChannel: ?string,\n  isPublishing: boolean,\n  linkPreview: ?Object,\n  linkPreviewTrueUrl: ?string,\n  linkPreviewLength: number,\n  fetchingLinkPreview: boolean,\n  postWasPublished: boolean,\n};\nclass ThreadComposerWithData extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isMounted: true,\n      title: props.title || '',\n      body: props.body || fromPlainText(''),\n      availableCommunities: [],\n      availableChannels: [],\n      activeCommunity: '',\n      activeChannel: '',\n      isPublishing: false,\n      linkPreview: null,\n      linkPreviewTrueUrl: '',\n      linkPreviewLength: 0,\n      fetchingLinkPreview: false,\n      postWasPublished: false,\n    };\n  }\n\n  handleIncomingProps = props => {\n    const { isMounted } = this.state;\n    if (!isMounted) return;\n    /*\n      Create a new array of communities only containing the `node` data from\n      graphQL. Then filter the resulting channel to remove any communities\n      that don't have any channels yet\n    */\n\n    // if the user doesn't exist, bust outta here\n    if (!props.data.user || props.data.user === undefined) return;\n\n    const availableCommunities = props.data.user.communityConnection.edges\n      .map(edge => edge.node)\n      .filter(\n        community =>\n          community.communityPermissions.isMember ||\n          community.communityPermissions.isOwner\n      )\n      .sort((a, b) => {\n        const bc = parseInt(b.communityPermissions.reputation, 10);\n        const ac = parseInt(a.communityPermissions.reputation, 10);\n        return bc <= ac ? -1 : 1;\n      });\n\n    /*\n      Iterate through each of our community nodes to construct a new array\n      of possible channels\n\n      returns an array of array, where each parent array represents a community\n      and each child array represents the channels within that parent\n      community\n    */\n    const availableChannels = props.data.user.channelConnection.edges\n      .map(edge => edge.node)\n      .filter(\n        channel =>\n          channel.channelPermissions.isMember ||\n          channel.channelPermissions.isOwner\n      )\n      .filter(channel => {\n        if (!channel.isPrivate) return channel;\n        if (!channel.community.isPro) return null;\n        return channel;\n      });\n\n    /*\n      If a user is viewing a communit or channel, we use the url as a prop\n      to set a default activeCommunity and activeChannel\n\n      If no defaults are set, we use the first available community, and then\n      find the first available channel within that available community\n    */\n    const activeCommunityFromPropsOrState =\n      props.activeCommunity || this.state.activeCommunity;\n\n    let activeCommunity =\n      availableCommunities &&\n      (activeCommunityFromPropsOrState\n        ? availableCommunities.filter(community => {\n            return (\n              community.slug.toLowerCase() ===\n              activeCommunityFromPropsOrState.toLowerCase()\n            );\n          })\n        : availableCommunities);\n\n    activeCommunity =\n      activeCommunity && activeCommunity.length > 0\n        ? activeCommunity[0].id\n        : null;\n\n    if (!activeCommunity) {\n      return props.data.refetch();\n    } else {\n      this.setActiveStuff(\n        availableCommunities,\n        availableChannels,\n        activeCommunity\n      );\n    }\n  };\n\n  setActiveStuff = (\n    availableCommunities,\n    availableChannels,\n    activeCommunity\n  ) => {\n    const props = this.props;\n    const { isMounted } = this.state;\n    if (!isMounted) return;\n    // get the channels for the proper community\n    const activeCommunityChannels = availableChannels.filter(\n      channel => channel.community.id === activeCommunity\n    );\n    let activeChannel = [];\n\n    // Get the active channel if there is one\n    if (props.activeChannel) {\n      activeChannel = activeCommunityChannels.filter(\n        channel =>\n          channel.slug.toLowerCase() === props.activeChannel.toLowerCase()\n      );\n    } else {\n      // Try and get the default channel for the active community\n      activeChannel = activeCommunityChannels.filter(\n        channel => channel.isDefault\n      );\n      // If there is no default channel capitulate and take the first one\n      if (activeChannel.length === 0) {\n        activeChannel = activeCommunityChannels;\n      } else if (activeChannel.length > 1) {\n        const generalChannel = activeChannel.filter(\n          channel => channel.slug === 'general'\n        );\n        if (generalChannel.length > 0) activeChannel = generalChannel;\n      }\n    }\n\n    // ensure that if no items were found for some reason, we don't crash the app\n    // and instead just set null values on the composer\n    activeChannel = activeChannel.length > 0 ? activeChannel[0].id : null;\n\n    this.setState({\n      title: props.title || '',\n      body: props.body || fromPlainText(''),\n      availableCommunities,\n      availableChannels,\n      activeCommunity,\n      activeChannel,\n      isPublishing: false,\n      linkPreview: null,\n      linkPreviewTrueUrl: '',\n      linkPreviewLength: 0,\n      fetchingLinkPreview: false,\n    });\n  };\n\n  componentDidMount() {\n    this.setState({ isMounted: true });\n    this.props.data.refetch().then(result => {\n      // we have to rebuild a new props object to pass to `this.handleIncomingProps`\n      // in order to retain all the previous props passed in from the parent\n      // component and the initial data functions provided by apollo\n      const newProps = Object.assign({}, this.props, {\n        ...this.props,\n        data: {\n          ...this.props.data,\n          user: {\n            ...this.props.data.user,\n            ...result.data.user,\n          },\n        },\n      });\n      this.handleIncomingProps(newProps);\n    });\n    this.refs.titleTextarea.focus();\n  }\n\n  componentWillUpdate(nextProps) {\n    const { isOpen } = nextProps;\n    if (isOpen) {\n      // $FlowIssue\n      document.addEventListener('keydown', this.handleKeyPress, false);\n    } else {\n      // $FlowIssue\n      document.removeEventListener('keydown', this.handleKeyPress, false);\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({ isMounted: false });\n    // $FlowIssue\n    document.removeEventListener('keydown', this.handleKeyPress, false);\n    const { postWasPublished } = this.state;\n\n    // if a post was published, in this session, clear redux so that the next\n    // composer open will start fresh\n    if (postWasPublished) return this.closeComposer('clear');\n\n    // otherwise, clear the composer normally and save the state\n    return this.closeComposer();\n  }\n\n  handleKeyPress = e => {\n    // if person taps esc, close the dialog\n    if (e.keyCode === 27) {\n      this.closeComposer();\n    }\n  };\n\n  changeTitle = e => {\n    const title = e.target.value;\n    if (/\\n$/g.test(title)) {\n      this.bodyEditor.focus();\n      return;\n    }\n    this.setState({\n      title,\n    });\n  };\n\n  changeBody = body => {\n    this.listenForUrl(body);\n    this.setState({\n      body,\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    const curr = this.props;\n    const { isMounted } = this.state;\n    if (!isMounted) return;\n    if (prevProps.isLoading && !curr.isLoading)\n      return this.handleIncomingProps(this.props);\n\n    const { availableCommunities, availableChannels } = this.state;\n    let activeCommunity;\n\n    if (prevProps.activeCommunity !== this.props.activeCommunity) {\n      activeCommunity = this.props.activeCommunity\n        ? availableCommunities.filter(community => {\n            return community.slug === this.props.activeCommunity;\n          })[0].id\n        : availableCommunities[0].id;\n\n      this.setState({\n        activeCommunity,\n      });\n    }\n\n    if (prevProps.activeChannel !== this.props.activeChannel) {\n      const activeCommunityChannels = availableChannels.filter(\n        channel => channel.community.id === activeCommunity\n      );\n      let activeChannel = [];\n\n      // Get the active channel if there is one\n      if (this.props.activeChannel) {\n        activeChannel = activeCommunityChannels.filter(\n          channel => channel.slug === this.props.activeChannel\n        );\n      } else {\n        // Try and get the default channel for the active community\n        activeChannel = activeCommunityChannels.filter(\n          channel => channel.isDefault\n        );\n        // If there is no default channel capitulate and take the first one\n        if (activeChannel.length === 0) {\n          activeChannel = activeCommunityChannels;\n          // If there are more than one default ones, try and choose the \"General\" one if it exists\n        } else if (activeChannel.length > 1) {\n          const generalChannel = activeChannel.filter(\n            channel => channel.slug === 'general'\n          );\n          if (generalChannel.length > 0) activeChannel = generalChannel;\n        }\n      }\n\n      // ensure that if no items were found for some reason, we don't crash the app\n      // and instead just set null values on the composer\n      activeChannel = activeChannel.length > 0 ? activeChannel[0].id : null;\n\n      this.setState({\n        activeChannel,\n      });\n    }\n  }\n\n  closeComposer = (clear?: string) => {\n    // we will clear the composer if it unmounts as a result of a post\n    // being published, that way the next composer open will start fresh\n    if (clear) return this.props.dispatch(closeComposer('', ''));\n\n    // otherwise, we will save the editor state to rehydrate the title and\n    // body if the user reopens the composer in the same session\n    const { title, body } = this.state;\n    this.props.dispatch(closeComposer(title, body));\n  };\n\n  setActiveCommunity = e => {\n    const newActiveCommunity = e.target.value;\n    const activeCommunityChannels = this.state.availableChannels.filter(\n      channel => channel.community.id === newActiveCommunity\n    );\n    const newActiveCommunityData = this.state.availableCommunities.find(\n      community => community.id === newActiveCommunity\n    );\n    const newActiveChannel =\n      activeCommunityChannels.find(channel => {\n        // If there is an active channel and we're switching back to the currently open community\n        // select that channel\n        if (\n          this.props.activeChannel &&\n          this.props.activeCommunity === newActiveCommunityData.slug\n        ) {\n          return channel.slug === this.props.activeChannel;\n        }\n        // Otherwise select the default one\n        return channel.isDefault;\n        // Default to the first channel if no default one can be found\n      }) || activeCommunityChannels[0];\n\n    this.setState({\n      activeCommunity: newActiveCommunity,\n      activeChannel: newActiveChannel.id,\n    });\n  };\n\n  setActiveChannel = e => {\n    const activeChannel = e.target.value;\n\n    this.setState({\n      activeChannel,\n    });\n  };\n\n  publishThread = () => {\n    // if no title and no channel is set, don't allow a thread to be published\n    if (!this.state.title || !this.state.activeChannel) {\n      return;\n    }\n\n    // isPublishing will change the publish button to a loading spinner\n    this.setState({\n      isPublishing: true,\n    });\n\n    // define new constants in order to construct the proper shape of the\n    // input for the publishThread mutation\n    const {\n      activeChannel,\n      activeCommunity,\n      title,\n      body,\n      linkPreview,\n      linkPreviewTrueUrl,\n    } = this.state;\n    const channelId = activeChannel;\n    const communityId = activeCommunity;\n    const jsonBody = toJSON(body);\n\n    const content = {\n      title,\n      body: JSON.stringify(jsonBody),\n    };\n\n    const attachments = [];\n    if (linkPreview) {\n      const attachmentData = JSON.stringify({\n        ...linkPreview,\n        trueUrl: linkPreviewTrueUrl,\n      });\n      attachments.push({\n        attachmentType: 'linkPreview',\n        data: attachmentData,\n      });\n    }\n\n    // Get the images\n    const filesToUpload = Object.keys(jsonBody.entityMap)\n      .filter(\n        key =>\n          jsonBody.entityMap[key].type === 'image' &&\n          jsonBody.entityMap[key].data.file &&\n          jsonBody.entityMap[key].data.file.constructor === File\n      )\n      .map(key => jsonBody.entityMap[key].data.file);\n\n    // this.props.mutate comes from a higher order component defined at the\n    // bottom of this file\n    this.props\n      .mutate({\n        variables: {\n          thread: {\n            channelId,\n            communityId,\n            type: 'DRAFTJS',\n            content,\n            attachments,\n            filesToUpload,\n          },\n        },\n      })\n      // after the mutation occurs, it will either return an error or the new\n      // thread that was published\n      .then(({ data }) => {\n        // get the thread id to redirect the user\n        const id = data.publishThread.id;\n\n        track('thread', 'published', null);\n\n        // stop the loading spinner on the publish button\n        this.setState({\n          postWasPublished: true,\n          isPublishing: false,\n        });\n\n        // redirect the user to the thread\n        // if they are in the inbox, select it\n        this.props.isInbox\n          ? this.props.dispatch(changeActiveThread(id))\n          : this.props.history.push(`?thread=${id}`);\n\n        this.props.dispatch(\n          addToastWithTimeout('success', 'Thread published!')\n        );\n\n        this.props.dispatch(closeComposer('', ''));\n      })\n      .catch(err => {\n        this.setState({\n          isPublishing: false,\n        });\n        this.props.dispatch(addToastWithTimeout('error', err.message));\n      });\n  };\n\n  listenForUrl = state => {\n    const { linkPreview, linkPreviewLength } = this.state;\n    if (linkPreview !== null) return;\n\n    const lastChangeType = state.getLastChangeType();\n    if (\n      lastChangeType !== 'backspace-character' &&\n      lastChangeType !== 'insert-characters'\n    ) {\n      return;\n    }\n\n    const text = toPlainText(state);\n\n    if (!ENDS_IN_WHITESPACE.test(text)) return;\n\n    const toCheck = text.match(URLS);\n\n    if (toCheck) {\n      const len = toCheck.length;\n      if (linkPreviewLength === len) return; // no new links, don't recheck\n\n      let urlToCheck = toCheck[len - 1].trim();\n\n      if (!/^https?:\\/\\//i.test(urlToCheck)) {\n        urlToCheck = 'https://' + urlToCheck;\n      }\n\n      if (!isURL(urlToCheck)) return;\n      this.setState({ fetchingLinkPreview: true });\n\n      getLinkPreviewFromUrl(urlToCheck)\n        .then(data => {\n          this.setState(prevState => ({\n            linkPreview: { ...data, trueUrl: urlToCheck },\n            linkPreviewTrueUrl: urlToCheck,\n            linkPreviewLength: prevState.linkPreviewLength + 1,\n            fetchingLinkPreview: false,\n            error: null,\n          }));\n        })\n        .catch(err => {\n          this.setState({\n            error:\n              \"Oops, that URL didn't seem to want to work. You can still publish your story anyways 👍\",\n            fetchingLinkPreview: false,\n          });\n        });\n    }\n  };\n\n  removeLinkPreview = () => {\n    this.setState({\n      linkPreview: null,\n      linkPreviewTrueUrl: null,\n    });\n  };\n\n  render() {\n    const {\n      title,\n      availableChannels,\n      availableCommunities,\n      activeCommunity,\n      activeChannel,\n      isPublishing,\n      linkPreview,\n      linkPreviewTrueUrl,\n      fetchingLinkPreview,\n    } = this.state;\n\n    const { isOpen, isLoading, isInbox } = this.props;\n\n    if (availableCommunities && availableChannels) {\n      return (\n        <Container isOpen={isOpen} isInbox={isInbox}>\n          <Overlay\n            isOpen={isOpen}\n            onClick={this.closeComposer}\n            isInbox={isInbox}\n          />\n          <Composer isOpen={isOpen} isInbox={isInbox}>\n            <ContentContainer isOpen={isOpen}>\n              <Textarea\n                onChange={this.changeTitle}\n                style={ThreadTitle}\n                value={this.state.title}\n                placeholder={'A title for your conversation...'}\n                ref=\"titleTextarea\"\n                autoFocus\n              />\n\n              <Editor\n                onChange={this.changeBody}\n                state={this.state.body}\n                style={ThreadDescription}\n                editorRef={editor => (this.bodyEditor = editor)}\n                editorKey=\"thread-composer\"\n                placeholder=\"Write more thoughts here...\"\n                className={'threadComposer'}\n                showLinkPreview={true}\n                linkPreview={{\n                  loading: fetchingLinkPreview,\n                  remove: this.removeLinkPreview,\n                  trueUrl: linkPreviewTrueUrl,\n                  data: linkPreview,\n                }}\n              />\n\n              <Actions>\n                <FlexRow>\n                  <Dropdowns>\n                    <select\n                      onChange={this.setActiveCommunity}\n                      value={activeCommunity}\n                    >\n                      {availableCommunities.map(community => {\n                        return (\n                          <option key={community.id} value={community.id}>\n                            {community.name}\n                          </option>\n                        );\n                      })}\n                    </select>\n                    <select\n                      onChange={this.setActiveChannel}\n                      value={activeChannel}\n                    >\n                      {availableChannels\n                        .filter(\n                          channel => channel.community.id === activeCommunity\n                        )\n                        .map((channel, i) => {\n                          return (\n                            <option key={channel.id} value={channel.id}>\n                              {channel.name}\n                            </option>\n                          );\n                        })}\n                    </select>\n                  </Dropdowns>\n                </FlexRow>\n                <FlexRow>\n                  <TextButton\n                    hoverColor=\"warn.alt\"\n                    onClick={this.closeComposer}\n                  >\n                    Cancel\n                  </TextButton>\n                  <Button\n                    onClick={this.publishThread}\n                    loading={isPublishing}\n                    disabled={!title || isPublishing}\n                    color={'brand'}\n                  >\n                    Publish\n                  </Button>\n                </FlexRow>\n              </Actions>\n            </ContentContainer>\n          </Composer>\n        </Container>\n      );\n    }\n\n    if (isLoading) {\n      return <LoadingComposer />;\n    }\n\n    return null;\n  }\n}\n\nconst map = state => ({\n  isOpen: state.composer.isOpen,\n  title: state.composer.title,\n  body: state.composer.body,\n});\nexport default compose(\n  // $FlowIssue\n  connect(map),\n  getComposerCommunitiesAndChannels,\n  publishThread,\n  viewNetworkHandler,\n  withRouter\n)(ThreadComposerWithData);\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadComposer/components/composer.js","import styled, { keyframes } from 'styled-components';\nimport { Card } from '../card';\nimport { Transition, hexa, Shadow, FlexRow, FlexCol, zIndex } from '../globals';\n\nexport const Container = styled(FlexRow)`\n  align-self: stretch;\n  display: flex;\n  justify-content: center;\n\n  @media (max-width: 768px) {\n    display: ${props => (props.isOpen ? 'block' : 'none')};\n    position: fixed;\n    height: calc(100vh - 56px);\n    width: 100%;\n    top: 8px;\n    flex-direction: column;\n    justify-content: flex-start;\n    z-index: ${zIndex.composer};\n  }\n`;\n\nexport const Composer = styled(Card)`\n  margin-bottom: 16px;\n  position: relative;\n  z-index: ${props => (props.isInbox ? '3001' : zIndex.composer)};\n  width: 100%;\n  display: block;\n  min-height: 64px;\n  border-radius: 12px;\n  transition: ${Transition.hover.off};\n\n  &:hover {\n    transition: none;\n    box-shadow: ${Shadow.high}\n      ${({ theme }) => hexa(theme.text.placeholder, 0.5)};\n  }\n\n  @media (max-width: 768px) {\n    width: calc(100% - 16px);\n    margin: 48px 8px;\n    height: calc(100% - 112px);\n    min-height: 240px;\n    pointer-events: all;\n  }\n`;\n\nexport const Overlay = styled.div`\n  ${props =>\n    props.isOpen\n      ? `\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      width: 100%;\n      height: 100%;\n      z-index: ${props.isInbox ? '3000' : zIndex.composer - 1};\n      background: #000;\n      pointer-events: auto;\n      opacity: 0.4;\n    `\n      : `\n      opacity: 0;\n      pointer-events: none;\n\n    `};\n`;\n\nexport const Placeholder = styled.div`\n  ${/* either the placeholder *or* the content container shows at a time. */ ''} display: ${props =>\n      props.isOpen ? 'none' : 'flex'};\n  justify-content: flex-start;\n  align-items: center;\n  cursor: pointer;\n  padding: 16px;\n  color: ${props => props.theme.text.alt};\n  transition: ${Transition.hover.off};\n\n  &:hover {\n    transition: ${Transition.hover.on};\n    color: ${props => props.theme.brand.alt};\n  }\n\n  @media (max-width: 768px) {\n    opacity: 0;\n  }\n`;\n\nexport const PlaceholderLabel = styled.h3`\n  font-size: 20px;\n  font-weight: 800;\n  margin-left: 8px;\n`;\n\nexport const ContentContainer = styled.div`\n  display: ${props => (props.isOpen ? 'block' : 'none')};\n\n  @media (max-width: 768px) {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const Actions = styled(FlexCol)`\n  background: #f8fbfe;\n  border-top: 2px solid ${props => props.theme.bg.border};\n  padding: 8px 8px 8px 0;\n  border-radius: 0 0 12px 12px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n\n  @media (max-width: 768px) {\n    position: absolute;\n    bottom: 0;\n    flex-direction: column;\n    align-items: flex-end;\n    padding: 8px;\n  }\n`;\n\nexport const Dropdowns = styled(FlexRow)`\n  display: flex;\n  align-items: center;\n  margin-bottom: 16px;\n\n  select {\n    max-width: 224px;\n    display: block;\n    padding: 8px 12px;\n    border: none;\n    border: 2px solid ${props => props.theme.bg.border};\n    border-radius: 8px;\n    box-shadow: none;\n    color: ${props => props.theme.text.default};\n    font-weight: 600;\n    font-size: 14px;\n    box-sizing: border-box;\n    background-color: #fff;\n    background-image: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    cursor: pointer;\n    margin-left: 8px;\n  }\n\n  @media (max-width: 768px) {\n    width: 100%;\n    justify-content: flex-start;\n    margin-bottom: 8px;\n\n    select:nth-of-type(2) {\n        flex: 1 0 auto;\n        margin-left: 4px;\n      }\n    }\n  }\n`;\n\nexport const ComposerUpsell = styled.div`\n  position: relative;\n  padding: 4px 16px;\n  background: ${props => props.theme.brand.alt};\n  border-bottom: 2px solid ${props => props.theme.brand.alt};\n  color: #fff;\n  text-align: center;\n  border-radius: 12px 12px 0 0;\n\n  p {\n    font-size: 14px;\n    font-weight: 700;\n  }\n`;\n\nexport const UpsellPulse = styled.div`\n  width: 10px;\n  height: 10px;\n  border: 5px solid ${props => props.theme.brand.alt};\n  -webkit-border-radius: 30px;\n  -moz-border-radius: 30px;\n  border-radius: 30px;\n  background-color: ${props => props.theme.brand.alt};\n  z-index: ${zIndex.composer};\n  position: absolute;\n  top: -4px;\n  left: -4px;\n  box-shadow: 0 0 0 2px #fff;\n`;\n\nconst pulse = keyframes`\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    opacity: 0.0;\n  }\n  25% {\n    -webkit-transform: scale(0);\n      -moz-transform: scale(0);\n      opacity: 0.1;\n  }\n  50% {\n      -webkit-transform: scale(0.1);\n      -moz-transform: scale(0.1);\n      opacity: 0.3;\n  }\n  75% {\n      -webkit-transform: scale(0.5);\n      -moz-transform: scale(0.5);\n      opacity: 0.5;\n  }\n  100% {\n      -webkit-transform: scale(1);\n      -moz-transform: scale(1);\n      opacity: 0.0;\n  }\n`;\n\nexport const UpsellDot = styled.div`\n  border: 10px solid ${props => props.theme.brand.default};\n  background: transparent;\n  -webkit-border-radius: 60px;\n  -moz-border-radius: 60px;\n  border-radius: 60px;\n  height: 50px;\n  width: 50px;\n  -webkit-animation: ${pulse} 3s ease-out;\n  -moz-animation: ${pulse} 3s ease-out;\n  animation: ${pulse} 3s ease-out;\n  -webkit-animation-iteration-count: infinite;\n  -moz-animation-iteration-count: infinite;\n  animation-iteration-count: infinite;\n  position: absolute;\n  top: -24px;\n  left: -24px;\n  z-index: ${zIndex.composer};\n  opacity: 0;\n`;\n\n// these are style objects because i'm custom styling another react component to handle autoresizing\n\nexport const ThreadTitle = {\n  fontSize: '20px',\n  padding: '16px 24px 0 24px',\n  outline: 'none',\n  border: '0',\n  lineHeight: '1.4',\n  fontWeight: '800',\n  boxShadow: 'none',\n  width: '100%',\n  color: '#171A21',\n  whiteSpace: 'pre-wrap',\n  borderRadius: '12px 12px 0 0',\n};\n\nexport const ThreadDescription = {\n  fontSize: '16px',\n  fontWeight: '500',\n  width: '100%',\n  height: 'calc(100% - 132px)',\n  display: 'inline-block',\n  lineHeight: '1.5',\n  padding: '0 24px 24px 24px',\n  outline: 'none',\n  border: '0',\n  boxShadow: 'none',\n  color: '#171A21',\n  whiteSpace: 'pre-wrap',\n  overflowY: 'scroll',\n  position: 'relative',\n  top: '6px',\n};\n\n\n\n// WEBPACK FOOTER //\n// src/components/threadComposer/style.js","// @flow\nimport * as React from 'react';\nimport compose from 'recompose/compose';\nimport { connect } from 'react-redux';\nimport Textarea from 'react-textarea-autosize';\nimport { addToastWithTimeout } from '../../../actions/toasts';\nimport {\n  getSlackImport,\n  sendSlackInvitationsMutation,\n} from '../../../api/slackImport';\nimport { Loading } from '../../../components/loading';\nimport { Button } from '../../../components/buttons';\nimport Icon from '../../../components/icons';\nimport viewNetworkHandler from '../../../components/viewNetworkHandler';\nimport { CustomMessageToggle, CustomMessageTextAreaStyles } from '../style';\nimport {\n  SectionCard,\n  SectionCardFooter,\n  SectionTitle,\n} from '../../../components/settingsViews/style';\nimport { Description, Notice } from '../../../components/listItems/style';\nimport { Error } from '../../../components/formElements';\n\ntype Props = {\n  data: {\n    community: Object,\n    startPolling: Function,\n    stopPolling: Function,\n  },\n  hasInvitedPeople: Function,\n  sendSlackInvites: Function,\n  dispatch: Function,\n  isLoading: boolean,\n};\n\ntype State = {\n  isSendingInvites: boolean,\n  hasCustomMessage: boolean,\n  customMessageString: string,\n  customMessageError: boolean,\n};\n\nclass ImportSlack extends React.Component<Props, State> {\n  constructor() {\n    super();\n\n    this.state = {\n      isSendingInvites: false,\n      hasCustomMessage: false,\n      customMessageString: '',\n      customMessageError: false,\n    };\n  }\n\n  sendInvites = () => {\n    const { community } = this.props.data;\n    const {\n      customMessageError,\n      customMessageString,\n      hasCustomMessage,\n    } = this.state;\n\n    this.props.hasInvitedPeople && this.props.hasInvitedPeople();\n\n    let customMessage =\n      hasCustomMessage && !customMessageError ? customMessageString : null;\n\n    this.setState({\n      isSendingInvites: true,\n    });\n\n    this.props\n      .sendSlackInvites({\n        id: community.id,\n        customMessage,\n      })\n      .then(({ data: { sendSlackInvites } }) => {\n        this.setState({\n          isSendingInvites: false,\n          hasCustomMessage: false,\n        });\n        this.props.dispatch(\n          addToastWithTimeout('success', 'Your invitations are being sent!')\n        );\n      })\n      .catch(err => {\n        this.setState({\n          isSendingInvites: false,\n        });\n        this.props.dispatch(addToastWithTimeout('error', err.message));\n      });\n  };\n\n  handleChange = e => {\n    const customMessageString = e.target.value;\n    if (customMessageString.length > 500) {\n      this.setState({\n        customMessageString,\n        customMessageError: true,\n      });\n    } else {\n      this.setState({\n        customMessageString,\n        customMessageError: false,\n      });\n    }\n  };\n\n  toggleCustomMessage = () => {\n    const { hasCustomMessage } = this.state;\n    this.setState({\n      hasCustomMessage: !hasCustomMessage,\n    });\n  };\n\n  render() {\n    const {\n      data: { community, startPolling, stopPolling },\n      isLoading,\n    } = this.props;\n    const {\n      isSendingInvites,\n      customMessageString,\n      hasCustomMessage,\n      customMessageError,\n    } = this.state;\n\n    if (community) {\n      // if no import has been created yet, we won't have a team name or a record at all\n      const noImport =\n        !community.slackImport || !community.slackImport.teamName;\n      // if an import has been created, but does not have members data yet\n      const partialImport =\n        community.slackImport &&\n        community.slackImport.teamName &&\n        !community.slackImport.members;\n      // if an import has been created and we have members\n      const fullImport = community.slackImport && community.slackImport.members;\n      const hasAlreadyBeenSent = fullImport && community.slackImport.sent;\n\n      const url = this.props.isOnboarding\n        ? `https://slack.com/oauth/authorize?&client_id=201769987287.200380534417&scope=users:read.email,users:read,team:read,admin&state=${community.id}&redirect_uri=${process\n            .env.NODE_ENV === 'development'\n            ? 'http://localhost:3001/api/slack/onboarding'\n            : 'https://spectrum.chat/api/slack/onboarding'}`\n        : `https://slack.com/oauth/authorize?&client_id=201769987287.200380534417&scope=users:read.email,users:read,team:read,admin&state=${community.id}&redirect_uri=${process\n            .env.NODE_ENV === 'development'\n            ? 'http://localhost:3001/api/slack'\n            : 'https://spectrum.chat/api/slack'}`;\n\n      if (noImport) {\n        return (\n          <div>\n            <SectionTitle>Invite a Slack Team</SectionTitle>\n            <Description>\n              Easily invite your team from an existing Slack team to Spectrum.\n              Get started by connecting your team below.{' '}\n            </Description>\n            <Notice>\n              <strong>Note:</strong> We will not invite any of your team members\n              until you’re ready. We will prompt for admin access to ensure that\n              you own the Slack team.\n            </Notice>\n            <SectionCardFooter>\n              <a href={url}>\n                <Button>Connect a Slack Team</Button>\n              </a>\n            </SectionCardFooter>\n          </div>\n        );\n      } else if (partialImport) {\n        startPolling(5000);\n        return (\n          <div>\n            <SectionTitle>Invite a Slack Team</SectionTitle>\n            <SectionCardFooter>\n              <Button loading>Connecting with Slack...</Button>\n            </SectionCardFooter>\n          </div>\n        );\n      } else if (fullImport) {\n        stopPolling();\n        const members = JSON.parse(community.slackImport.members);\n        const teamName = community.slackImport.teamName;\n        const count = members.length.toLocaleString();\n\n        if (hasAlreadyBeenSent) {\n          return (\n            <div>\n              <SectionTitle>Invite your Slack team</SectionTitle>\n              <Description>\n                This community has been connected to the{' '}\n                <strong>{teamName}</strong> Slack team. We found {count} members\n                with email addresses - you have already invited them to join\n                your community.\n              </Description>\n              <SectionCardFooter>\n                <Button disabled>Invites sent to {count} people</Button>\n              </SectionCardFooter>\n            </div>\n          );\n        } else {\n          return (\n            <div>\n              <SectionTitle>Invite a Slack Team</SectionTitle>\n              <Description>\n                This community has been connected to the{' '}\n                <strong>{teamName}</strong> Slack team. We found {count} members\n                with email addresses - you can invite them to your Spectrum\n                community in one click.\n              </Description>\n\n              <CustomMessageToggle onClick={this.toggleCustomMessage}>\n                <Icon\n                  glyph={hasCustomMessage ? 'view-close' : 'post'}\n                  size={20}\n                />\n                {hasCustomMessage\n                  ? 'Remove custom message'\n                  : 'Optional: Add a custom message to your invitation'}\n              </CustomMessageToggle>\n\n              {hasCustomMessage && (\n                <Textarea\n                  autoFocus\n                  value={customMessageString}\n                  placeholder=\"Write something sweet here...\"\n                  style={{\n                    ...CustomMessageTextAreaStyles,\n                    border: customMessageError\n                      ? '1px solid #E3353C'\n                      : '1px solid #DFE7EF',\n                  }}\n                  onChange={this.handleChange}\n                />\n              )}\n\n              {hasCustomMessage &&\n                customMessageError && (\n                  <Error>\n                    Your custom invitation message can be up to 500 characters.\n                  </Error>\n                )}\n\n              <SectionCardFooter>\n                <Button\n                  gradientTheme=\"success\"\n                  onClick={this.sendInvites}\n                  loading={isSendingInvites}\n                  disabled={hasCustomMessage && customMessageError}\n                >\n                  Invite {count} people to Spectrum\n                </Button>\n              </SectionCardFooter>\n            </div>\n          );\n        }\n      }\n    }\n\n    if (isLoading) {\n      return <Loading />;\n    }\n\n    return null;\n  }\n}\n\nconst ImportSlackCard = props => (\n  <SectionCard>\n    <ImportSlack {...props} />\n  </SectionCard>\n);\n\nconst ImportSlackNoCard = props => <ImportSlack {...props} />;\n\nexport const ImportSlackWithoutCard = compose(\n  sendSlackInvitationsMutation,\n  getSlackImport,\n  connect(),\n  viewNetworkHandler\n)(ImportSlackNoCard);\nexport const ImportSlackWithCard = compose(\n  sendSlackInvitationsMutation,\n  getSlackImport,\n  connect(),\n  viewNetworkHandler\n)(ImportSlackCard);\nexport default ImportSlackWithCard;\n\n\n\n// WEBPACK FOOTER //\n// src/views/communitySettings/components/importSlack.js","// @flow\n// $FlowFixMe\nimport styled from 'styled-components';\nimport { zIndex } from '../../../../components/globals';\n\nexport const ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  flex-wrap: wrap;\n  margin-top: 16px;\n  justify-content: center;\n\n  a,\n  button {\n    margin-top: 16px;\n  }\n\n  a:first-of-type,\n  button:first-of-type {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n\n  a > button:first-of-type {\n    margin: 0;\n  }\n`;\n\nexport const InputRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  flex-wrap: wrap;\n  margin: 16px;\n  justify-content: center;\n  position: relative;\n  max-width: 100%;\n`;\n\nexport const Input = styled.div`\n  padding: 4px 12px;\n  border-radius: 8px;\n  border: 2px solid ${props => props.theme.bg.border};\n  background: #fff;\n  font-weight: 500;\n  color: ${props => props.theme.text.alt};\n  padding-right: 72px;\n  position: relative;\n  display: flex;\n  align-self: center;\n  max-width: 100%;\n  z-index: ${zIndex.form};\n\n  &:hover {\n    cursor: pointer;\n\n    &:after {\n      background: ${props => props.theme.bg.wash};\n    }\n  }\n\n  &:after {\n    content: 'COPY';\n    font-size: 11px;\n    font-weight: 600;\n    color: ${props => props.theme.brand.default};\n    text-transform: uppercase;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    background: #fff;\n    padding: 4px 12px;\n    border-left: 2px solid ${props => props.theme.bg.border};\n    border-radius: 0 8px 8px 0;\n    z-index: ${zIndex.form + 1};\n    line-height: 2.1;\n  }\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/views/newCommunity/components/share/style.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AASA;AAAA;AACA;AAAA;AAGA;AAAA;AAkBA;AAAA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AAAA;AACA;AADA;AACA;AADA;AAwCA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAzCA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAhEA;AACA;AAkEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiDA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAHA;AAkBA;AACA;;;AA2IA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AAFA;AAUA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AA2BA;AAAA;AACA;AAAA;AADA;AACA;AAEA;AACA;AACA;AALA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAiNA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAaA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAVA;AAYA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAdA;AAbA;AADA;AAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAjCA;AA3BA;AADA;AANA;AAwFA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;AAjmBA;AACA;;;;AAoBA;AAAA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AAEA;AAIA;AAIA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAEA;AAFA;AAIA;AA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","sourceRoot":""}